{
  "version": 3,
  "sources": ["../../src/helpers.ts", "../../src/eventbuilder.ts", "../../src/integrations/breadcrumbs.ts", "../../src/client.ts", "../../src/transports/utils.ts", "../../src/transports/fetch.ts", "../../src/transports/xhr.ts", "../../src/stack-parsers.ts", "../../src/integrations/globalhandlers.ts", "../../src/integrations/trycatch.ts", "../../src/integrations/linkederrors.ts", "../../src/integrations/httpcontext.ts", "../../src/integrations/dedupe.ts", "../../src/sdk.ts", "../../@sentry/browser/esm/integrations/index.js", "../../src/constants.ts", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb-snapshot/es/rrweb-snapshot.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/types.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/utils.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/mutation.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/sentry/callbackWrapper.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observer.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/iframe-manager.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/shadow-dom-manager.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/ext/tslib/tslib.es6.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/2d.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/canvas.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/ext/base64-arraybuffer/dist/base64-arraybuffer.es5.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/serialize-args.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/webgl.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/canvas-manager.js", "../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/index.js", "../../src/util/dedupePerformanceEntries.ts", "../../src/coreHandlers/performanceObserver.ts", "../../../replay-worker/build/npm/esm/worker.ts", "../../../replay-worker/build/npm/esm/index.js", "../../src/eventBuffer/EventBufferArray.ts", "../../src/eventBuffer/WorkerHandler.ts", "../../src/eventBuffer/EventBufferCompressionWorker.ts", "../../src/eventBuffer/EventBufferProxy.ts", "../../src/eventBuffer/index.ts", "../../src/util/isExpired.ts", "../../src/util/isSessionExpired.ts", "../../src/session/saveSession.ts", "../../src/util/isSampled.ts", "../../src/session/Session.ts", "../../src/session/createSession.ts", "../../src/session/fetchSession.ts", "../../src/session/getSession.ts", "../../src/util/addEvent.ts", "../../src/util/createBreadcrumb.ts", "../../src/coreHandlers/addBreadcrumbEvent.ts", "../../src/coreHandlers/handleDom.ts", "../../src/util/createPerformanceSpans.ts", "../../src/util/shouldFilterRequest.ts", "../../src/coreHandlers/handleFetch.ts", "../../src/util/isRrwebError.ts", "../../src/coreHandlers/handleGlobalEvent.ts", "../../src/coreHandlers/handleHistory.ts", "../../src/coreHandlers/handleScope.ts", "../../src/coreHandlers/handleXhr.ts", "../../src/util/addGlobalListeners.ts", "../../src/util/addMemoryEntry.ts", "../../src/util/createPerformanceEntries.ts", "../../src/util/debounce.ts", "../../src/util/monkeyPatchRecordDroppedEvent.ts", "../../src/util/createReplayEnvelope.ts", "../../src/util/prepareRecordingData.ts", "../../src/util/prepareReplayEvent.ts", "../../src/util/sendReplayRequest.ts", "../../src/util/sendReplay.ts", "../../src/replay.ts", "../../src/util/getPrivacyOptions.ts", "../../src/util/isBrowser.ts", "../../src/integration.ts", "../../src/transports/offline.ts", "../../src/index.ts"],
  "sourcesContent": ["import { captureException, withScope } from '@sentry/core';\nimport type { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  addNonEnumerableProperty,\n  getOriginalFunction,\n  GLOBAL_OBJ,\n  markFunctionWrapped,\n} from '@sentry/utils';\n\nexport const WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError++;\n  setTimeout(() => {\n    ignoreOnError--;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n * has a correct `this` context.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    const wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      return wrapper;\n    }\n\n    // We don't wanna wrap it twice\n    if (getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n  const sentryWrapped: WrappedFunction = function (this: unknown): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          if (options.mechanism) {\n            addExceptionTypeValue(event, undefined, undefined);\n            addExceptionMechanism(event, options.mechanism);\n          }\n\n          event.extra = {\n            ...event.extra,\n            arguments: args,\n          };\n\n          return event;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  markFunctionWrapped(sentryWrapped, fn);\n\n  addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(this: void): void;\n}\n", "import { getCurrentHub } from '@sentry/core';\nimport type { Event, EventHint, Exception, Severity, SeverityLevel, StackFrame, StackParser } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  extractExceptionKeysForMessage,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  normalizeToSize,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\n/**\n * This function creates an exception from a JavaScript Error\n */\nexport function exceptionFromError(stackParser: StackParser, ex: Error): Exception {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(stackParser, ex);\n\n  const exception: Exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex),\n  };\n\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  stackParser: StackParser,\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  isUnhandledRejection?: boolean,\n): Event {\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n  const normalizeDepth = client && client.getOptions().normalizeDepth;\n\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            isUnhandledRejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception, normalizeDepth),\n    },\n  };\n\n  if (syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      // event.exception.values[0] has been set above\n      (event.exception as { values: Exception[] }).values[0].stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromError(stackParser: StackParser, ex: Error): Event {\n  return {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n}\n\n/** Parses stack frames from an error */\nexport function parseStackFrames(\n  stackParser: StackParser,\n  ex: Error & { framesToPop?: number; stacktrace?: string },\n): StackFrame[] {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n\n  const popSize = getPopSize(ex);\n\n  try {\n    return stackParser(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: Error & { message: { error?: Error } }): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nexport function eventFromException(\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = 'error';\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: string,\n  // eslint-disable-next-line deprecation/deprecation\n  level: Severity | SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  stackParser: StackParser,\n  exception: unknown,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n  isUnhandledRejection?: boolean,\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    return eventFromError(stackParser, errorEvent.error as Error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromError(stackParser, exception as Error);\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(stackParser, exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(stackParser, exception as string, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  stackParser: StackParser,\n  input: string,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{ value: input, stacktrace: { frames } }],\n      };\n    }\n  }\n\n  return event;\n}\n", "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport type { Event, Integration } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  htmlTreeAsString,\n  logger,\n  parseUrl,\n  safeJoin,\n  severityLevelFromString,\n} from '@sentry/utils';\n\nimport { WINDOW } from '../helpers';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom:\n    | boolean\n    | {\n        serializeAttribute?: string | string[];\n        maxStringLength?: number;\n      };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\n\nexport const BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = BREADCRUMB_INTEGRATION_ID;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n  public readonly options: Readonly<BreadcrumbsOptions>;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this.options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this.options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this.options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this.options.dom));\n    }\n    if (this.options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this.options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this.options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n\n  /**\n   * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (this.options.sentry) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n          event_id: event.event_id,\n          level: event.level,\n          message: getEventDescription(event),\n        },\n        {\n          event,\n        },\n      );\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: { [key: string]: any }) => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    let maxStringLength =\n      typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          `\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`,\n        );\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, { keyAttrs, maxStringLength })\n        : htmlTreeAsString(handlerData.event as unknown as Node, { keyAttrs, maxStringLength });\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n  // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n  // console warnings. This happens when a Vue template is rendered with\n  // an undeclared variable, which we try to stringify, ultimately causing\n  // Vue to issue another warning which repeats indefinitely.\n  // see: https://github.com/getsentry/sentry-javascript/pull/6010\n  // see: https://github.com/getsentry/sentry-javascript/issues/5916\n  for (let i = 0; i < handlerData.args.length; i++) {\n    if (handlerData.args[i] === 'ref=Ref<') {\n      handlerData.args[i + 1] = 'viewRef';\n      break;\n    }\n  }\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'xhr',\n        data: {\n          method,\n          url,\n          status_code,\n        },\n        type: 'http',\n      },\n      {\n        xhr: handlerData.xhr,\n        input: body,\n      },\n    );\n\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: 'error',\n        type: 'http',\n      },\n      {\n        data: handlerData.error,\n        input: handlerData.args,\n      },\n    );\n  } else {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: {\n          ...handlerData.fetchData,\n          status_code: handlerData.response.status,\n        },\n        type: 'http',\n      },\n      {\n        input: handlerData.args,\n        response: handlerData.response,\n      },\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n  let from = handlerData.from;\n  let to = handlerData.to;\n  const parsedLoc = parseUrl(WINDOW.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n", "import type { Scope } from '@sentry/core';\nimport { BaseClient, getEnvelopeEndpointWithUrlEncodedAuth, SDK_VERSION } from '@sentry/core';\nimport type {\n  BrowserClientReplayOptions,\n  ClientOptions,\n  Event,\n  EventHint,\n  Options,\n  Severity,\n  SeverityLevel,\n} from '@sentry/types';\nimport { createClientReportEnvelope, dsnToString, getSDKSource, logger, serializeEnvelope } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { WINDOW } from './helpers';\nimport type { Breadcrumbs } from './integrations';\nimport { BREADCRUMB_INTEGRATION_ID } from './integrations/breadcrumbs';\nimport type { BrowserTransportOptions } from './transports/types';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\nexport type BrowserOptions = Options<BrowserTransportOptions> & BrowserClientReplayOptions;\n\n/**\n * Configuration options for the Sentry Browser SDK Client class\n * @see BrowserClient for more information.\n */\nexport type BrowserClientOptions = ClientOptions<BrowserTransportOptions>;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserClientOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserClientOptions) {\n    const sdkSource = WINDOW.SENTRY_SDK_SOURCE || getSDKSource();\n\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: `${sdkSource}:@sentry/browser`,\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(options);\n\n    if (options.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', () => {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint?: EventHint): void {\n    // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n    // activated its `sentry` option.\n    // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n    // bundles, if it is not used by the SDK.\n    // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n    // way for now.\n    const breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID) as Breadcrumbs | undefined;\n    // We check for definedness of `addSentryBreadcrumb` in case users provided their own integration with id\n    // \"Breadcrumbs\" that does not have this function.\n    if (breadcrumbIntegration && breadcrumbIntegration.addSentryBreadcrumb) {\n      breadcrumbIntegration.addSentryBreadcrumb(event);\n    }\n\n    super.sendEvent(event, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  private _flushOutcomes(): void {\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      __DEBUG_BUILD__ && logger.log('No outcomes to send');\n      return;\n    }\n\n    if (!this._dsn) {\n      __DEBUG_BUILD__ && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('Sending outcomes:', outcomes);\n\n    const url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, this._options);\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n    try {\n      const isRealNavigator = Object.prototype.toString.call(WINDOW && WINDOW.navigator) === '[object Navigator]';\n      const hasSendBeacon = isRealNavigator && typeof WINDOW.navigator.sendBeacon === 'function';\n      // Make sure beacon is not used if user configures custom transport options\n      if (hasSendBeacon && !this._options.transportOptions) {\n        // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n        const sendBeacon = WINDOW.navigator.sendBeacon.bind(WINDOW.navigator);\n        sendBeacon(url, serializeEnvelope(envelope));\n      } else {\n        // If beacon is not supported or if they are using the tunnel option\n        // use our regular transport to send client reports to Sentry.\n        this._sendEnvelope(envelope);\n      }\n    } catch (e) {\n      __DEBUG_BUILD__ && logger.error(e);\n    }\n  }\n}\n", "import { isNativeFetch, logger } from '@sentry/utils';\n\nimport { WINDOW } from '../helpers';\n\nlet cachedFetchImpl: FetchImpl | undefined = undefined;\n\nexport type FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nexport function getNativeFetchImplementation(): FetchImpl {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  }\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFetch(WINDOW.fetch)) {\n    return (cachedFetchImpl = WINDOW.fetch.bind(WINDOW));\n  }\n\n  const document = WINDOW.document;\n  let fetchImpl = WINDOW.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow && contentWindow.fetch) {\n        fetchImpl = contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      __DEBUG_BUILD__ &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return (cachedFetchImpl = fetchImpl.bind(WINDOW));\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/** Clears cached fetch impl */\nexport function clearCachedFetchImplementation(): void {\n  cachedFetchImpl = undefined;\n}\n", "import { createTransport } from '@sentry/core';\nimport type { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { rejectedSyncPromise } from '@sentry/utils';\n\nimport type { BrowserTransportOptions } from './types';\nimport type { FetchImpl } from './utils';\nimport { clearCachedFetchImplementation, getNativeFetchImplementation } from './utils';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeFetchTransport(\n  options: BrowserTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch), a request with `keepalive: true`\n      //   and a content length of > 64 kibibytes returns a network error. We will therefore only activate the flag when\n      //   we're below that limit.\n      keepalive: request.body.length <= 65536,\n      ...options.fetchOptions,\n    };\n\n    try {\n      return nativeFetch(options.url, requestOptions).then(response => ({\n        statusCode: response.status,\n        headers: {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After'),\n        },\n      }));\n    } catch (e) {\n      clearCachedFetchImplementation();\n      return rejectedSyncPromise(e);\n    }\n  }\n\n  return createTransport(options, makeRequest);\n}\n", "import { createTransport } from '@sentry/core';\nimport type { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\nimport type { BrowserTransportOptions } from './types';\n\n/**\n * The DONE ready state for XmlHttpRequest\n *\n * Defining it here as a constant b/c XMLHttpRequest.DONE is not always defined\n * (e.g. during testing, it is `undefined`)\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState}\n */\nconst XHR_READYSTATE_DONE = 4;\n\n/**\n * Creates a Transport that uses the XMLHttpRequest API to send events to Sentry.\n */\nexport function makeXHRTransport(options: BrowserTransportOptions): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    return new SyncPromise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.onerror = reject;\n\n      xhr.onreadystatechange = (): void => {\n        if (xhr.readyState === XHR_READYSTATE_DONE) {\n          resolve({\n            statusCode: xhr.status,\n            headers: {\n              'x-sentry-rate-limits': xhr.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': xhr.getResponseHeader('Retry-After'),\n            },\n          });\n        }\n      };\n\n      xhr.open('POST', options.url);\n\n      for (const header in options.headers) {\n        if (Object.prototype.hasOwnProperty.call(options.headers, header)) {\n          xhr.setRequestHeader(header, options.headers[header]);\n        }\n      }\n\n      xhr.send(request.body);\n    });\n  }\n\n  return createTransport(options, makeRequest);\n}\n", "import type { StackFrame, StackLineParser, StackLineParserFn } from '@sentry/types';\nimport { createStackParser } from '@sentry/utils';\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\nconst OPERA10_PRIORITY = 10;\nconst OPERA11_PRIORITY = 20;\nconst CHROME_PRIORITY = 30;\nconst WINJS_PRIORITY = 40;\nconst GECKO_PRIORITY = 50;\n\nfunction createFrame(filename: string, func: string, lineno?: number, colno?: number): StackFrame {\n  const frame: StackFrame = {\n    filename,\n    abs_path: filename, // As opposed to filename, abs_path is immutable (I can't control your actions but don't touch it!)\n    function: func,\n    in_app: true, // All browser frames are considered in_app\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n}\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chromeRegex =\n  /^\\s*at (?:(.*\\).*?|.*?) ?\\((?:address at )?)?(?:async )?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nconst chrome: StackLineParserFn = line => {\n  const parts = chromeRegex.exec(line);\n\n  if (parts) {\n    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      const subMatch = chromeEvalRegex.exec(parts[2]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n        parts[3] = subMatch[2]; // line\n        parts[4] = subMatch[3]; // column\n      }\n    }\n\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nexport const chromeStackLineParser: StackLineParser = [CHROME_PRIORITY, chrome];\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex =\n  /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|safari-extension|safari-web-extension|capacitor)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nconst gecko: StackLineParserFn = line => {\n  const parts = geckoREgex.exec(line);\n\n  if (parts) {\n    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n    if (isEval) {\n      const subMatch = geckoEvalRegex.exec(parts[3]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    let filename = parts[3];\n    let func = parts[1] || UNKNOWN_FUNCTION;\n    [func, filename] = extractSafariExtensionDetails(func, filename);\n\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nexport const geckoStackLineParser: StackLineParser = [GECKO_PRIORITY, gecko];\n\nconst winjsRegex =\n  /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nconst winjs: StackLineParserFn = line => {\n  const parts = winjsRegex.exec(line);\n\n  return parts\n    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\n    : undefined;\n};\n\nexport const winjsStackLineParser: StackLineParser = [WINJS_PRIORITY, winjs];\n\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nconst opera10: StackLineParserFn = line => {\n  const parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nexport const opera10StackLineParser: StackLineParser = [OPERA10_PRIORITY, opera10];\n\nconst opera11Regex =\n  / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nconst opera11: StackLineParserFn = line => {\n  const parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nexport const opera11StackLineParser: StackLineParser = [OPERA11_PRIORITY, opera11];\n\nexport const defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser, winjsStackLineParser];\n\nexport const defaultStackParser = createStackParser(...defaultStackLineParsers);\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, filename: string): [string, string] => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\n      ]\n    : [func, filename];\n};\n", "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport type { Event, EventHint, Hub, Integration, Primitive, StackParser } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport type { BrowserClient } from '../client';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\n/** JSDoc */\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /**\n   * Stores references functions to installing handlers. Will set to undefined\n   * after they have been run so that they are not used twice.\n   */\n  private _installFunc: Record<GlobalHandlersIntegrationsOptionKeys, (() => void) | undefined> = {\n    onerror: _installGlobalOnErrorHandler,\n    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,\n  };\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n    const options = this._options;\n\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (const key in options) {\n      const installFunc = this._installFunc[key as GlobalHandlersIntegrationsOptionKeys];\n      if (installFunc && options[key as GlobalHandlersIntegrationsOptionKeys]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key as GlobalHandlersIntegrationsOptionKeys] = undefined;\n      }\n    }\n  }\n}\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler(): void {\n  addInstrumentationHandler(\n    'error',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n      const [hub, stackParser, attachStacktrace] = getHubAndOptions();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      const { msg, url, line, column, error } = data;\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return;\n      }\n\n      const event =\n        error === undefined && isString(msg)\n          ? _eventFromIncompleteOnError(msg, url, line, column)\n          : _enhanceEventWithInitialFrame(\n              eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false),\n              url,\n              line,\n              column,\n            );\n\n      event.level = 'error';\n\n      addMechanismAndCapture(hub, error, event, 'onerror');\n    },\n  );\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler(): void {\n  addInstrumentationHandler(\n    'unhandledrejection',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (e: any) => {\n      const [hub, stackParser, attachStacktrace] = getHubAndOptions();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return true;\n      }\n\n      const event = isPrimitive(error)\n        ? _eventFromRejectionWithPrimitive(error)\n        : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n\n      event.level = 'error';\n\n      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n      return;\n    },\n  );\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  __DEBUG_BUILD__ && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction addMechanismAndCapture(hub: Hub, error: EventHint['originalException'], event: Event, type: string): void {\n  addExceptionMechanism(event, {\n    handled: false,\n    type,\n  });\n  hub.captureEvent(event, {\n    originalException: error,\n  });\n}\n\nfunction getHubAndOptions(): [Hub, StackParser, boolean | undefined] {\n  const hub = getCurrentHub();\n  const client = hub.getClient<BrowserClient>();\n  const options = (client && client.getOptions()) || {\n    stackParser: () => [],\n    attachStacktrace: false,\n  };\n  return [hub, options.stackParser, options.attachStacktrace];\n}\n", "import type { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getOriginalFunction } from '@sentry/utils';\n\nimport { WINDOW, wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    if (this._options.setTimeout) {\n      fill(WINDOW, 'setTimeout', _wrapTimeFunction);\n    }\n\n    if (this._options.setInterval) {\n      fill(WINDOW, 'setInterval', _wrapTimeFunction);\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(WINDOW, 'requestAnimationFrame', _wrapRAF);\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in WINDOW) {\n      fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n    }\n\n    const eventTargetOption = this._options.eventTarget;\n    if (eventTargetOption) {\n      const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(_wrapEventTarget);\n    }\n  }\n}\n\n/** JSDoc */\nfunction _wrapTimeFunction(original: () => void): () => number {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, ...args: any[]): number {\n    const originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: { function: getFunctionName(original) },\n        handled: true,\n        type: 'instrument',\n      },\n    });\n    return original.apply(this, args);\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _wrapRAF(original: any): (callback: () => void) => any {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, callback: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return original.apply(this, [\n      wrap(callback, {\n        mechanism: {\n          data: {\n            function: 'requestAnimationFrame',\n            handler: getFunctionName(original),\n          },\n          handled: true,\n          type: 'instrument',\n        },\n      }),\n    ]);\n  };\n}\n\n/** JSDoc */\nfunction _wrapXHR(originalSend: () => void): () => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: XMLHttpRequest, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const xhr = this;\n    const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n    xmlHttpRequestProps.forEach(prop => {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fill(xhr, prop, function (original: WrappedFunction): () => any {\n          const wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: getFunctionName(original),\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          };\n\n          // If Instrument integration has been called before TryCatch, get the name of original function\n          const originalFunction = getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n\n    return originalSend.apply(this, args);\n  };\n}\n\n/** JSDoc */\nfunction _wrapEventTarget(target: string): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const globalObject = WINDOW as { [key: string]: any };\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const proto = globalObject[target] && globalObject[target].prototype;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n    return;\n  }\n\n  fill(proto, 'addEventListener', function (original: () => void): (\n    eventName: string,\n    fn: EventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ) => void {\n    return function (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this: any,\n      eventName: string,\n      fn: EventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n      try {\n        if (typeof fn.handleEvent === 'function') {\n          // ESlint disable explanation:\n          //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would\n          //  introduce a bug here, because bind returns a new function that doesn't have our\n          //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.\n          //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          fn.handleEvent = wrap(fn.handleEvent, {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          });\n        }\n      } catch (err) {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n\n      return original.apply(this, [\n        eventName,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        wrap(fn as any as WrappedFunction, {\n          mechanism: {\n            data: {\n              function: 'addEventListener',\n              handler: getFunctionName(fn),\n              target,\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n        options,\n      ]);\n    };\n  });\n\n  fill(\n    proto,\n    'removeEventListener',\n    function (\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function (\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = fn as unknown as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    },\n  );\n}\n", "import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport type { Event, EventHint, Exception, ExtendedError, Integration, StackParser } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport type { BrowserClient } from '../client';\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    const client = getCurrentHub().getClient<BrowserClient>();\n    if (!client) {\n      return;\n    }\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(parser, limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  stack: Exception[] = [],\n): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception, ...stack]);\n}\n", "import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport type { Event, Integration } from '@sentry/types';\n\nimport { WINDOW } from '../helpers';\n\n/** HttpContext integration collects information about HTTP request headers */\nexport class HttpContext implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'HttpContext';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = HttpContext.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(HttpContext)) {\n        // if none of the information we want exists, don't bother\n        if (!WINDOW.navigator && !WINDOW.location && !WINDOW.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = (event.request && event.request.url) || (WINDOW.location && WINDOW.location.href);\n        const { referrer } = WINDOW.document || {};\n        const { userAgent } = WINDOW.navigator || {};\n\n        const headers = {\n          ...(event.request && event.request.headers),\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...event.request, ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n", "import type { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const eventProcessor: EventProcessor = currentEvent => {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            __DEBUG_BUILD__ && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    };\n\n    eventProcessor.id = this.name;\n    addGlobalEventProcessor(eventProcessor);\n  }\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n", "import type { Hub } from '@sentry/core';\nimport {\n  getCurrentHub,\n  getIntegrationsToSetup,\n  getReportDialogEndpoint,\n  initAndBind,\n  Integrations as CoreIntegrations,\n} from '@sentry/core';\nimport {\n  addInstrumentationHandler,\n  logger,\n  resolvedSyncPromise,\n  stackParserFromStackParserOptions,\n  supportsFetch,\n} from '@sentry/utils';\n\nimport type { BrowserClientOptions, BrowserOptions } from './client';\nimport { BrowserClient } from './client';\nimport type { ReportDialogOptions } from './helpers';\nimport { WINDOW, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, Dedupe, GlobalHandlers, HttpContext, LinkedErrors, TryCatch } from './integrations';\nimport { defaultStackParser } from './stack-parsers';\nimport { makeFetchTransport, makeXHRTransport } from './transports';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new Dedupe(),\n  new HttpContext(),\n];\n\n/**\n * A magic string that build tooling can leverage in order to inject a release value into the SDK.\n */\ndeclare const __SENTRY_RELEASE__: string | undefined;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    // This allows build tooling to find-and-replace __SENTRY_RELEASE__ to inject a release value\n    if (typeof __SENTRY_RELEASE__ === 'string') {\n      options.release = __SENTRY_RELEASE__;\n    }\n\n    // This supports the variable that sentry-webpack-plugin injects\n    if (WINDOW.SENTRY_RELEASE && WINDOW.SENTRY_RELEASE.id) {\n      options.release = WINDOW.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  const clientOptions: BrowserClientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || (supportsFetch() ? makeFetchTransport : makeXHRTransport),\n  };\n\n  initAndBind(BrowserClient, clientOptions);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}, hub: Hub = getCurrentHub()): void {\n  // doesn't work without a document (React Native)\n  if (!WINDOW.document) {\n    __DEBUG_BUILD__ && logger.error('Global document not defined in showReportDialog call');\n    return;\n  }\n\n  const { client, scope } = hub.getStackTop();\n  const dsn = options.dsn || (client && client.getDsn());\n  if (!dsn) {\n    __DEBUG_BUILD__ && logger.error('DSN not configured for showReportDialog call');\n    return;\n  }\n\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n\n  const script = WINDOW.document.createElement('script');\n  script.async = true;\n  script.src = getReportDialogEndpoint(dsn, options);\n\n  if (options.onLoad) {\n    script.onload = options.onLoad;\n  }\n\n  const injectionPoint = WINDOW.document.head || WINDOW.document.body;\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    __DEBUG_BUILD__ && logger.error('Not injecting report dialog. No injection point found in HTML');\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  __DEBUG_BUILD__ && logger.warn('Cannot flush events. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  __DEBUG_BUILD__ && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\nfunction startSessionOnHub(hub: Hub): void {\n  hub.startSession({ ignoreDuration: true });\n  hub.captureSession();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  if (typeof WINDOW.document === 'undefined') {\n    __DEBUG_BUILD__ &&\n      logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (!hub.captureSession) {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSessionOnHub(hub);\n\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler('history', ({ from, to }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (!(from === undefined || from === to)) {\n      startSessionOnHub(getCurrentHub());\n    }\n  });\n}\n", "export { GlobalHandlers } from './globalhandlers.js';\nexport { TryCatch } from './trycatch.js';\nexport { Breadcrumbs } from './breadcrumbs.js';\nexport { LinkedErrors } from './linkederrors.js';\nexport { HttpContext } from './httpcontext.js';\nexport { Dedupe } from './dedupe.js';\n//# sourceMappingURL=index.js.map\n", "import { GLOBAL_OBJ } from '@sentry/utils';\n\n// exporting a separate copy of `WINDOW` rather than exporting the one from `@sentry/browser`\n// prevents the browser package from being bundled in the CDN bundle, and avoids a\n// circular dependency between the browser and replay packages should `@sentry/browser` import\n// from `@sentry/replay` in the future\nexport const WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nexport const REPLAY_SESSION_KEY = 'sentryReplaySession';\nexport const REPLAY_EVENT_NAME = 'replay_event';\nexport const RECORDING_EVENT_NAME = 'replay_recording';\nexport const UNABLE_TO_SEND_REPLAY = 'Unable to send Replay';\n\n// The idle limit for a session\nexport const SESSION_IDLE_DURATION = 300_000; // 5 minutes in ms\n\n// Grace period to keep a session when a user changes tabs or hides window\nexport const VISIBILITY_CHANGE_TIMEOUT = SESSION_IDLE_DURATION;\n\n// The maximum length of a session\nexport const MAX_SESSION_LIFE = 3_600_000; // 60 minutes\n\n/** Default flush delays */\nexport const DEFAULT_FLUSH_MIN_DELAY = 5_000;\n// XXX: Temp fix for our debounce logic where `maxWait` would never occur if it\n// was the same as `wait`\nexport const DEFAULT_FLUSH_MAX_DELAY = 5_500;\n\n/* How long to wait for error checkouts */\nexport const ERROR_CHECKOUT_TIME = 60_000;\n\nexport const RETRY_BASE_INTERVAL = 5000;\nexport const RETRY_MAX_COUNT = 3;\n", "var NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType || (NodeType = {}));\n\nfunction isElement(n) {\n    return n.nodeType === n.ELEMENT_NODE;\n}\nfunction isShadowRoot(n) {\n    const host = n === null || n === void 0 ? void 0 : n.host;\n    return Boolean(host && host.shadowRoot && host.shadowRoot === n);\n}\nfunction isInputTypeMasked({ maskInputOptions, tagName, type, }) {\n    return (maskInputOptions[tagName.toLowerCase()] ||\n        maskInputOptions[type] ||\n        (tagName === 'input' && !type && maskInputOptions['text']));\n}\nfunction hasInputMaskOptions({ tagName, type, maskInputOptions, maskInputSelector, }) {\n    return (maskInputSelector || isInputTypeMasked({ maskInputOptions, tagName, type }));\n}\nfunction maskInputValue({ input, maskInputSelector, unmaskInputSelector, maskInputOptions, tagName, type, value, maskInputFn, }) {\n    let text = value || '';\n    if (unmaskInputSelector && input.matches(unmaskInputSelector)) {\n        return text;\n    }\n    if (isInputTypeMasked({ maskInputOptions, tagName, type }) ||\n        (maskInputSelector && input.matches(maskInputSelector))) {\n        if (maskInputFn) {\n            text = maskInputFn(text);\n        }\n        else {\n            text = '*'.repeat(text.length);\n        }\n    }\n    return text;\n}\nconst ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\nfunction is2DCanvasBlank(canvas) {\n    const ctx = canvas.getContext('2d');\n    if (!ctx)\n        return true;\n    const chunkSize = 50;\n    for (let x = 0; x < canvas.width; x += chunkSize) {\n        for (let y = 0; y < canvas.height; y += chunkSize) {\n            const getImageData = ctx.getImageData;\n            const originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData\n                ? getImageData[ORIGINAL_ATTRIBUTE_NAME]\n                : getImageData;\n            const pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\n            if (pixelBuffer.some((pixel) => pixel !== 0))\n                return false;\n        }\n    }\n    return true;\n}\n\nlet _id = 1;\nconst tagNameRegex = new RegExp('[^a-z0-9-_:]');\nconst IGNORED_NODE = -2;\nfunction defaultMaskFn(str) {\n    return str ? str.replace(/[\\S]/g, '*') : '';\n}\nfunction genId() {\n    return _id++;\n}\nfunction getValidTagName(element) {\n    if (element instanceof HTMLFormElement) {\n        return 'form';\n    }\n    const processedTagName = element.tagName.toLowerCase().trim();\n    if (tagNameRegex.test(processedTagName)) {\n        return 'div';\n    }\n    return processedTagName;\n}\nfunction getCssRulesString(s) {\n    try {\n        const rules = s.rules || s.cssRules;\n        return rules ? Array.from(rules).map(getCssRuleString).join('') : null;\n    }\n    catch (error) {\n        return null;\n    }\n}\nfunction getCssRuleString(rule) {\n    let cssStringified = rule.cssText;\n    if (isCSSImportRule(rule)) {\n        try {\n            cssStringified = getCssRulesString(rule.styleSheet) || cssStringified;\n        }\n        catch (_a) {\n        }\n    }\n    return cssStringified;\n}\nfunction isCSSImportRule(rule) {\n    return 'styleSheet' in rule;\n}\nfunction stringifyStyleSheet(sheet) {\n    return sheet.cssRules\n        ? Array.from(sheet.cssRules)\n            .map((rule) => rule.cssText || '')\n            .join('')\n        : '';\n}\nfunction extractOrigin(url) {\n    let origin = '';\n    if (url.indexOf('//') > -1) {\n        origin = url.split('/').slice(0, 3).join('/');\n    }\n    else {\n        origin = url.split('/')[0];\n    }\n    origin = origin.split('?')[0];\n    return origin;\n}\nlet canvasService;\nlet canvasCtx;\nconst URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\nconst RELATIVE_PATH = /^(?!www\\.|(?:http|ftp)s?:\\/\\/|[A-Za-z]:\\\\|\\/\\/|#).*/;\nconst DATA_URI = /^(data:)([^,]*),(.*)/i;\nfunction absoluteToStylesheet(cssText, href) {\n    return (cssText || '').replace(URL_IN_CSS_REF, (origin, quote1, path1, quote2, path2, path3) => {\n        const filePath = path1 || path2 || path3;\n        const maybeQuote = quote1 || quote2 || '';\n        if (!filePath) {\n            return origin;\n        }\n        if (!RELATIVE_PATH.test(filePath)) {\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\n        }\n        if (DATA_URI.test(filePath)) {\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\n        }\n        if (filePath[0] === '/') {\n            return `url(${maybeQuote}${extractOrigin(href) + filePath}${maybeQuote})`;\n        }\n        const stack = href.split('/');\n        const parts = filePath.split('/');\n        stack.pop();\n        for (const part of parts) {\n            if (part === '.') {\n                continue;\n            }\n            else if (part === '..') {\n                stack.pop();\n            }\n            else {\n                stack.push(part);\n            }\n        }\n        return `url(${maybeQuote}${stack.join('/')}${maybeQuote})`;\n    });\n}\nconst SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\nconst SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\n    if (attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    let pos = 0;\n    function collectCharacters(regEx) {\n        let chars;\n        let match = regEx.exec(attributeValue.substring(pos));\n        if (match) {\n            chars = match[0];\n            pos += chars.length;\n            return chars;\n        }\n        return '';\n    }\n    let output = [];\n    while (true) {\n        collectCharacters(SRCSET_COMMAS_OR_SPACES);\n        if (pos >= attributeValue.length) {\n            break;\n        }\n        let url = collectCharacters(SRCSET_NOT_SPACES);\n        if (url.slice(-1) === ',') {\n            url = absoluteToDoc(doc, url.substring(0, url.length - 1));\n            output.push(url);\n        }\n        else {\n            let descriptorsStr = '';\n            url = absoluteToDoc(doc, url);\n            let inParens = false;\n            while (true) {\n                let c = attributeValue.charAt(pos);\n                if (c === '') {\n                    output.push((url + descriptorsStr).trim());\n                    break;\n                }\n                else if (!inParens) {\n                    if (c === ',') {\n                        pos += 1;\n                        output.push((url + descriptorsStr).trim());\n                        break;\n                    }\n                    else if (c === '(') {\n                        inParens = true;\n                    }\n                }\n                else {\n                    if (c === ')') {\n                        inParens = false;\n                    }\n                }\n                descriptorsStr += c;\n                pos += 1;\n            }\n        }\n    }\n    return output.join(', ');\n}\nfunction absoluteToDoc(doc, attributeValue) {\n    if (!attributeValue || attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    const a = doc.createElement('a');\n    a.href = attributeValue;\n    return a.href;\n}\nfunction isSVGElement(el) {\n    return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\n}\nfunction getHref() {\n    const a = document.createElement('a');\n    a.href = '';\n    return a.href;\n}\nfunction transformAttribute(doc, tagName, name, value, maskAllText, maskTextFn) {\n    if (!value) {\n        return value;\n    }\n    if (name === 'src' || name === 'href') {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'xlink:href' && value[0] !== '#') {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'background' &&\n        (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'srcset') {\n        return getAbsoluteSrcsetString(doc, value);\n    }\n    else if (name === 'style') {\n        return absoluteToStylesheet(value, getHref());\n    }\n    else if (tagName === 'object' && name === 'data') {\n        return absoluteToDoc(doc, value);\n    }\n    else if (maskAllText &&\n        ['placeholder', 'title', 'aria-label'].indexOf(name) > -1) {\n        return maskTextFn ? maskTextFn(value) : defaultMaskFn(value);\n    }\n    return value;\n}\nfunction _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {\n    if (unblockSelector && element.matches(unblockSelector)) {\n        return false;\n    }\n    if (typeof blockClass === 'string') {\n        if (element.classList.contains(blockClass)) {\n            return true;\n        }\n    }\n    else {\n        for (let eIndex = 0; eIndex < element.classList.length; eIndex++) {\n            const className = element.classList[eIndex];\n            if (blockClass.test(className)) {\n                return true;\n            }\n        }\n    }\n    if (blockSelector) {\n        return element.matches(blockSelector);\n    }\n    return false;\n}\nfunction needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText) {\n    if (!node) {\n        return false;\n    }\n    if (node.nodeType !== node.ELEMENT_NODE) {\n        return needMaskingText(node.parentNode, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText);\n    }\n    if (unmaskTextSelector) {\n        if (node.matches(unmaskTextSelector) ||\n            node.closest(unmaskTextSelector)) {\n            return false;\n        }\n    }\n    if (maskAllText) {\n        return true;\n    }\n    if (typeof maskTextClass === 'string') {\n        if (node.classList.contains(maskTextClass)) {\n            return true;\n        }\n    }\n    else {\n        for (let eIndex = 0; eIndex < node.classList.length; eIndex++) {\n            const className = node.classList[eIndex];\n            if (maskTextClass.test(className)) {\n                return true;\n            }\n        }\n    }\n    if (maskTextSelector) {\n        if (node.matches(maskTextSelector)) {\n            return true;\n        }\n    }\n    return needMaskingText(node.parentNode, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText);\n}\nfunction onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\n    const win = iframeEl.contentWindow;\n    if (!win) {\n        return;\n    }\n    let fired = false;\n    let readyState;\n    try {\n        readyState = win.document.readyState;\n    }\n    catch (error) {\n        return;\n    }\n    if (readyState !== 'complete') {\n        const timer = setTimeout(() => {\n            if (!fired) {\n                listener();\n                fired = true;\n            }\n        }, iframeLoadTimeout);\n        iframeEl.addEventListener('load', () => {\n            clearTimeout(timer);\n            fired = true;\n            listener();\n        });\n        return;\n    }\n    const blankUrl = 'about:blank';\n    if (win.location.href !== blankUrl ||\n        iframeEl.src === blankUrl ||\n        iframeEl.src === '') {\n        setTimeout(listener, 0);\n        return;\n    }\n    iframeEl.addEventListener('load', listener);\n}\nfunction serializeNode(n, options) {\n    var _a;\n    const { doc, blockClass, blockSelector, unblockSelector, maskTextClass, maskTextSelector, unmaskTextSelector, inlineStylesheet, maskInputSelector, unmaskInputSelector, maskAllText, maskInputOptions = {}, maskTextFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, } = options;\n    let rootId;\n    if (doc.__sn) {\n        const docId = doc.__sn.id;\n        rootId = docId === 1 ? undefined : docId;\n    }\n    switch (n.nodeType) {\n        case n.DOCUMENT_NODE:\n            if (n.compatMode !== 'CSS1Compat') {\n                return {\n                    type: NodeType.Document,\n                    childNodes: [],\n                    compatMode: n.compatMode,\n                    rootId,\n                };\n            }\n            else {\n                return {\n                    type: NodeType.Document,\n                    childNodes: [],\n                    rootId,\n                };\n            }\n        case n.DOCUMENT_TYPE_NODE:\n            return {\n                type: NodeType.DocumentType,\n                name: n.name,\n                publicId: n.publicId,\n                systemId: n.systemId,\n                rootId,\n            };\n        case n.ELEMENT_NODE:\n            const needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);\n            const tagName = getValidTagName(n);\n            let attributes = {};\n            for (const { name, value } of Array.from(n.attributes)) {\n                if (!skipAttribute(tagName, name)) {\n                    attributes[name] = transformAttribute(doc, tagName, name, value, maskAllText, maskTextFn);\n                }\n            }\n            if (tagName === 'link' && inlineStylesheet) {\n                const stylesheet = Array.from(doc.styleSheets).find((s) => {\n                    return s.href === n.href;\n                });\n                let cssText = null;\n                if (stylesheet) {\n                    cssText = getCssRulesString(stylesheet);\n                }\n                if (cssText) {\n                    delete attributes.rel;\n                    delete attributes.href;\n                    attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);\n                }\n            }\n            if (tagName === 'style' &&\n                n.sheet &&\n                !(n.innerText ||\n                    n.textContent ||\n                    '').trim().length) {\n                const cssText = getCssRulesString(n.sheet);\n                if (cssText) {\n                    attributes._cssText = absoluteToStylesheet(cssText, getHref());\n                }\n            }\n            if (tagName === 'input' ||\n                tagName === 'textarea' ||\n                tagName === 'select') {\n                const value = n.value;\n                if (attributes.type !== 'radio' &&\n                    attributes.type !== 'checkbox' &&\n                    attributes.type !== 'submit' &&\n                    attributes.type !== 'button' &&\n                    value) {\n                    attributes.value = maskInputValue({\n                        input: n,\n                        type: attributes.type,\n                        tagName,\n                        value,\n                        maskInputSelector,\n                        unmaskInputSelector,\n                        maskInputOptions,\n                        maskInputFn,\n                    });\n                }\n                else if (n.checked) {\n                    attributes.checked = n.checked;\n                }\n            }\n            if (tagName === 'option') {\n                if (n.selected && !maskInputOptions['select']) {\n                    attributes.selected = true;\n                }\n                else {\n                    delete attributes.selected;\n                }\n            }\n            if (tagName === 'canvas' && recordCanvas) {\n                if (n.__context === '2d') {\n                    if (!is2DCanvasBlank(n)) {\n                        attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n                    }\n                }\n                else if (!('__context' in n)) {\n                    const canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n                    const blankCanvas = document.createElement('canvas');\n                    blankCanvas.width = n.width;\n                    blankCanvas.height = n.height;\n                    const blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n                    if (canvasDataURL !== blankCanvasDataURL) {\n                        attributes.rr_dataURL = canvasDataURL;\n                    }\n                }\n            }\n            if (tagName === 'img' && inlineImages) {\n                if (!canvasService) {\n                    canvasService = doc.createElement('canvas');\n                    canvasCtx = canvasService.getContext('2d');\n                }\n                const image = n;\n                const oldValue = image.crossOrigin;\n                image.crossOrigin = 'anonymous';\n                const recordInlineImage = () => {\n                    try {\n                        canvasService.width = image.naturalWidth;\n                        canvasService.height = image.naturalHeight;\n                        canvasCtx.drawImage(image, 0, 0);\n                        attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n                    }\n                    catch (err) {\n                        console.warn(`Cannot inline img src=${image.currentSrc}! Error: ${err}`);\n                    }\n                    oldValue\n                        ? (attributes.crossOrigin = oldValue)\n                        : delete attributes.crossOrigin;\n                };\n                if (image.complete && image.naturalWidth !== 0)\n                    recordInlineImage();\n                else\n                    image.onload = recordInlineImage;\n            }\n            if (tagName === 'audio' || tagName === 'video') {\n                attributes.rr_mediaState = n.paused\n                    ? 'paused'\n                    : 'played';\n                attributes.rr_mediaCurrentTime = n.currentTime;\n            }\n            if (n.scrollLeft) {\n                attributes.rr_scrollLeft = n.scrollLeft;\n            }\n            if (n.scrollTop) {\n                attributes.rr_scrollTop = n.scrollTop;\n            }\n            if (needBlock) {\n                const { width, height } = n.getBoundingClientRect();\n                attributes = {\n                    class: attributes.class,\n                    rr_width: `${width}px`,\n                    rr_height: `${height}px`,\n                };\n            }\n            if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {\n                if (!n.contentDocument) {\n                    attributes.rr_src = attributes.src;\n                }\n                delete attributes.src;\n            }\n            return {\n                type: NodeType.Element,\n                tagName,\n                attributes,\n                childNodes: [],\n                isSVG: isSVGElement(n) || undefined,\n                needBlock,\n                rootId,\n            };\n        case n.TEXT_NODE:\n            const parentTagName = n.parentNode && n.parentNode.tagName;\n            let textContent = n.textContent;\n            const isStyle = parentTagName === 'STYLE' ? true : undefined;\n            const isScript = parentTagName === 'SCRIPT' ? true : undefined;\n            if (isStyle && textContent) {\n                try {\n                    if (n.nextSibling || n.previousSibling) {\n                    }\n                    else if ((_a = n.parentNode.sheet) === null || _a === void 0 ? void 0 : _a.cssRules) {\n                        textContent = stringifyStyleSheet(n.parentNode.sheet);\n                    }\n                }\n                catch (err) {\n                    console.warn(`Cannot get CSS styles from text's parentNode. Error: ${err}`, n);\n                }\n                textContent = absoluteToStylesheet(textContent, getHref());\n            }\n            if (isScript) {\n                textContent = 'SCRIPT_PLACEHOLDER';\n            }\n            if (parentTagName === 'TEXTAREA' && textContent) {\n                textContent = '';\n            }\n            else if (!isStyle &&\n                !isScript &&\n                needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText) &&\n                textContent) {\n                textContent = maskTextFn\n                    ? maskTextFn(textContent)\n                    : defaultMaskFn(textContent);\n            }\n            return {\n                type: NodeType.Text,\n                textContent: textContent || '',\n                isStyle,\n                rootId,\n            };\n        case n.CDATA_SECTION_NODE:\n            return {\n                type: NodeType.CDATA,\n                textContent: '',\n                rootId,\n            };\n        case n.COMMENT_NODE:\n            return {\n                type: NodeType.Comment,\n                textContent: n.textContent || '',\n                rootId,\n            };\n        default:\n            return false;\n    }\n}\nfunction lowerIfExists(maybeAttr) {\n    if (maybeAttr === undefined || maybeAttr === null) {\n        return '';\n    }\n    else {\n        return maybeAttr.toLowerCase();\n    }\n}\nfunction slimDOMExcluded(sn, slimDOMOptions) {\n    if (slimDOMOptions.comment && sn.type === NodeType.Comment) {\n        return true;\n    }\n    else if (sn.type === NodeType.Element) {\n        if (slimDOMOptions.script &&\n            (sn.tagName === 'script' ||\n                (sn.tagName === 'link' &&\n                    (sn.attributes.rel === 'preload' ||\n                        sn.attributes.rel === 'modulepreload') &&\n                    sn.attributes.as === 'script') ||\n                (sn.tagName === 'link' &&\n                    sn.attributes.rel === 'prefetch' &&\n                    typeof sn.attributes.href === 'string' &&\n                    sn.attributes.href.endsWith('.js')))) {\n            return true;\n        }\n        else if (slimDOMOptions.headFavicon &&\n            ((sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon') ||\n                (sn.tagName === 'meta' &&\n                    (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) ||\n                        lowerIfExists(sn.attributes.name) === 'application-name' ||\n                        lowerIfExists(sn.attributes.rel) === 'icon' ||\n                        lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' ||\n                        lowerIfExists(sn.attributes.rel) === 'shortcut icon')))) {\n            return true;\n        }\n        else if (sn.tagName === 'meta') {\n            if (slimDOMOptions.headMetaDescKeywords &&\n                lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaSocial &&\n                (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) ||\n                    lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) ||\n                    lowerIfExists(sn.attributes.name) === 'pinterest')) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaRobots &&\n                (lowerIfExists(sn.attributes.name) === 'robots' ||\n                    lowerIfExists(sn.attributes.name) === 'googlebot' ||\n                    lowerIfExists(sn.attributes.name) === 'bingbot')) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaHttpEquiv &&\n                sn.attributes['http-equiv'] !== undefined) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaAuthorship &&\n                (lowerIfExists(sn.attributes.name) === 'author' ||\n                    lowerIfExists(sn.attributes.name) === 'generator' ||\n                    lowerIfExists(sn.attributes.name) === 'framework' ||\n                    lowerIfExists(sn.attributes.name) === 'publisher' ||\n                    lowerIfExists(sn.attributes.name) === 'progid' ||\n                    lowerIfExists(sn.attributes.property).match(/^article:/) ||\n                    lowerIfExists(sn.attributes.property).match(/^product:/))) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaVerification &&\n                (lowerIfExists(sn.attributes.name) === 'google-site-verification' ||\n                    lowerIfExists(sn.attributes.name) === 'yandex-verification' ||\n                    lowerIfExists(sn.attributes.name) === 'csrf-token' ||\n                    lowerIfExists(sn.attributes.name) === 'p:domain_verify' ||\n                    lowerIfExists(sn.attributes.name) === 'verify-v1' ||\n                    lowerIfExists(sn.attributes.name) === 'verification' ||\n                    lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction serializeNodeWithId(n, options) {\n    const { doc, map, blockClass, blockSelector, unblockSelector, maskTextClass, maskTextSelector, unmaskTextSelector, skipChild = false, inlineStylesheet = true, maskInputSelector, unmaskInputSelector, maskAllText, maskInputOptions = {}, maskTextFn, maskInputFn, slimDOMOptions, dataURLOptions = {}, inlineImages = false, recordCanvas = false, onSerialize, onIframeLoad, iframeLoadTimeout = 5000, keepIframeSrcFn = () => false, } = options;\n    let { preserveWhiteSpace = true } = options;\n    const _serializedNode = serializeNode(n, {\n        doc,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        maskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        inlineStylesheet,\n        maskInputSelector,\n        unmaskInputSelector,\n        maskAllText,\n        maskInputOptions,\n        maskTextFn,\n        maskInputFn,\n        dataURLOptions,\n        inlineImages,\n        recordCanvas,\n        keepIframeSrcFn,\n    });\n    if (!_serializedNode) {\n        console.warn(n, 'not serialized');\n        return null;\n    }\n    let id;\n    if ('__sn' in n) {\n        id = n.__sn.id;\n    }\n    else if (slimDOMExcluded(_serializedNode, slimDOMOptions) ||\n        (!preserveWhiteSpace &&\n            _serializedNode.type === NodeType.Text &&\n            !_serializedNode.isStyle &&\n            !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length)) {\n        id = IGNORED_NODE;\n    }\n    else {\n        id = genId();\n    }\n    const serializedNode = Object.assign(_serializedNode, { id });\n    n.__sn = serializedNode;\n    if (id === IGNORED_NODE) {\n        return null;\n    }\n    map[id] = n;\n    if (onSerialize) {\n        onSerialize(n);\n    }\n    let recordChild = !skipChild;\n    if (serializedNode.type === NodeType.Element) {\n        recordChild = recordChild && !serializedNode.needBlock;\n        delete serializedNode.needBlock;\n        if (n.shadowRoot)\n            serializedNode.isShadowHost = true;\n    }\n    if ((serializedNode.type === NodeType.Document ||\n        serializedNode.type === NodeType.Element) &&\n        recordChild) {\n        if (slimDOMOptions.headWhitespace &&\n            _serializedNode.type === NodeType.Element &&\n            _serializedNode.tagName === 'head') {\n            preserveWhiteSpace = false;\n        }\n        const bypassOptions = {\n            doc,\n            map,\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            skipChild,\n            inlineStylesheet,\n            maskInputSelector,\n            unmaskInputSelector,\n            maskAllText,\n            maskInputOptions,\n            maskTextFn,\n            maskInputFn,\n            slimDOMOptions,\n            dataURLOptions,\n            inlineImages,\n            recordCanvas,\n            preserveWhiteSpace,\n            onSerialize,\n            onIframeLoad,\n            iframeLoadTimeout,\n            keepIframeSrcFn,\n        };\n        for (const childN of Array.from(n.childNodes)) {\n            const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n            if (serializedChildNode) {\n                serializedNode.childNodes.push(serializedChildNode);\n            }\n        }\n        if (isElement(n) && n.shadowRoot) {\n            for (const childN of Array.from(n.shadowRoot.childNodes)) {\n                const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n                if (serializedChildNode) {\n                    serializedChildNode.isShadow = true;\n                    serializedNode.childNodes.push(serializedChildNode);\n                }\n            }\n        }\n    }\n    if (n.parentNode && isShadowRoot(n.parentNode)) {\n        serializedNode.isShadow = true;\n    }\n    if (serializedNode.type === NodeType.Element &&\n        serializedNode.tagName === 'iframe') {\n        onceIframeLoaded(n, () => {\n            const iframeDoc = n.contentDocument;\n            if (iframeDoc && onIframeLoad) {\n                const serializedIframeNode = serializeNodeWithId(iframeDoc, {\n                    doc: iframeDoc,\n                    map,\n                    blockClass,\n                    blockSelector,\n                    unblockSelector,\n                    maskTextClass,\n                    maskTextSelector,\n                    unmaskTextSelector,\n                    skipChild: false,\n                    inlineStylesheet,\n                    maskInputSelector,\n                    unmaskInputSelector,\n                    maskAllText,\n                    maskInputOptions,\n                    maskTextFn,\n                    maskInputFn,\n                    slimDOMOptions,\n                    dataURLOptions,\n                    inlineImages,\n                    recordCanvas,\n                    preserveWhiteSpace,\n                    onSerialize,\n                    onIframeLoad,\n                    iframeLoadTimeout,\n                    keepIframeSrcFn,\n                });\n                if (serializedIframeNode) {\n                    onIframeLoad(n, serializedIframeNode);\n                }\n            }\n        }, iframeLoadTimeout);\n    }\n    return serializedNode;\n}\nfunction snapshot(n, options) {\n    const { blockClass = 'rr-block', blockSelector = null, unblockSelector = null, maskTextClass = 'rr-mask', maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, inlineImages = false, recordCanvas = false, maskInputSelector = null, unmaskInputSelector = null, maskAllText = false, maskAllInputs = false, maskTextFn, maskInputFn, slimDOM = false, dataURLOptions, preserveWhiteSpace, onSerialize, onIframeLoad, iframeLoadTimeout, keepIframeSrcFn = () => false, } = options || {};\n    const idNodeMap = {};\n    const maskInputOptions = maskAllInputs === true\n        ? {\n            color: true,\n            date: true,\n            'datetime-local': true,\n            email: true,\n            month: true,\n            number: true,\n            range: true,\n            search: true,\n            tel: true,\n            text: true,\n            time: true,\n            url: true,\n            week: true,\n            textarea: true,\n            select: true,\n            password: true,\n        }\n        : maskAllInputs === false\n            ? {\n                password: true,\n            }\n            : maskAllInputs;\n    const slimDOMOptions = slimDOM === true || slimDOM === 'all'\n        ?\n            {\n                script: true,\n                comment: true,\n                headFavicon: true,\n                headWhitespace: true,\n                headMetaDescKeywords: slimDOM === 'all',\n                headMetaSocial: true,\n                headMetaRobots: true,\n                headMetaHttpEquiv: true,\n                headMetaAuthorship: true,\n                headMetaVerification: true,\n            }\n        : slimDOM === false\n            ? {}\n            : slimDOM;\n    return [\n        serializeNodeWithId(n, {\n            doc: n,\n            map: idNodeMap,\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            skipChild: false,\n            inlineStylesheet,\n            maskInputSelector,\n            unmaskInputSelector,\n            maskAllText,\n            maskInputOptions,\n            maskTextFn,\n            maskInputFn,\n            slimDOMOptions,\n            dataURLOptions,\n            inlineImages,\n            recordCanvas,\n            preserveWhiteSpace,\n            onSerialize,\n            onIframeLoad,\n            iframeLoadTimeout,\n            keepIframeSrcFn,\n        }),\n        idNodeMap,\n    ];\n}\nfunction skipAttribute(tagName, attributeName, value) {\n    return ((tagName === 'video' || tagName === 'audio') && attributeName === 'autoplay');\n}\n\nconst commentre = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\nfunction parse(css, options = {}) {\n    let lineno = 1;\n    let column = 1;\n    function updatePosition(str) {\n        const lines = str.match(/\\n/g);\n        if (lines) {\n            lineno += lines.length;\n        }\n        let i = str.lastIndexOf('\\n');\n        column = i === -1 ? column + str.length : str.length - i;\n    }\n    function position() {\n        const start = { line: lineno, column };\n        return (node) => {\n            node.position = new Position(start);\n            whitespace();\n            return node;\n        };\n    }\n    class Position {\n        constructor(start) {\n            this.start = start;\n            this.end = { line: lineno, column };\n            this.source = options.source;\n        }\n    }\n    Position.prototype.content = css;\n    const errorsList = [];\n    function error(msg) {\n        const err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);\n        err.reason = msg;\n        err.filename = options.source;\n        err.line = lineno;\n        err.column = column;\n        err.source = css;\n        if (options.silent) {\n            errorsList.push(err);\n        }\n        else {\n            throw err;\n        }\n    }\n    function stylesheet() {\n        const rulesList = rules();\n        return {\n            type: 'stylesheet',\n            stylesheet: {\n                source: options.source,\n                rules: rulesList,\n                parsingErrors: errorsList,\n            },\n        };\n    }\n    function open() {\n        return match(/^{\\s*/);\n    }\n    function close() {\n        return match(/^}/);\n    }\n    function rules() {\n        let node;\n        const rules = [];\n        whitespace();\n        comments(rules);\n        while (css.length && css.charAt(0) !== '}' && (node = atrule() || rule())) {\n            if (node !== false) {\n                rules.push(node);\n                comments(rules);\n            }\n        }\n        return rules;\n    }\n    function match(re) {\n        const m = re.exec(css);\n        if (!m) {\n            return;\n        }\n        const str = m[0];\n        updatePosition(str);\n        css = css.slice(str.length);\n        return m;\n    }\n    function whitespace() {\n        match(/^\\s*/);\n    }\n    function comments(rules = []) {\n        let c;\n        while ((c = comment())) {\n            if (c !== false) {\n                rules.push(c);\n            }\n            c = comment();\n        }\n        return rules;\n    }\n    function comment() {\n        const pos = position();\n        if ('/' !== css.charAt(0) || '*' !== css.charAt(1)) {\n            return;\n        }\n        let i = 2;\n        while ('' !== css.charAt(i) &&\n            ('*' !== css.charAt(i) || '/' !== css.charAt(i + 1))) {\n            ++i;\n        }\n        i += 2;\n        if ('' === css.charAt(i - 1)) {\n            return error('End of comment missing');\n        }\n        const str = css.slice(2, i - 2);\n        column += 2;\n        updatePosition(str);\n        css = css.slice(i);\n        column += 2;\n        return pos({\n            type: 'comment',\n            comment: str,\n        });\n    }\n    function selector() {\n        const m = match(/^([^{]+)/);\n        if (!m) {\n            return;\n        }\n        return trim(m[0])\n            .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n            .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, (m) => {\n            return m.replace(/,/g, '\\u200C');\n        })\n            .split(/\\s*(?![^(]*\\)),\\s*/)\n            .map((s) => {\n            return s.replace(/\\u200C/g, ',');\n        });\n    }\n    function declaration() {\n        const pos = position();\n        let propMatch = match(/^(\\*?[-#\\/\\*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n        if (!propMatch) {\n            return;\n        }\n        const prop = trim(propMatch[0]);\n        if (!match(/^:\\s*/)) {\n            return error(`property missing ':'`);\n        }\n        const val = match(/^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+)/);\n        const ret = pos({\n            type: 'declaration',\n            property: prop.replace(commentre, ''),\n            value: val ? trim(val[0]).replace(commentre, '') : '',\n        });\n        match(/^[;\\s]*/);\n        return ret;\n    }\n    function declarations() {\n        const decls = [];\n        if (!open()) {\n            return error(`missing '{'`);\n        }\n        comments(decls);\n        let decl;\n        while ((decl = declaration())) {\n            if (decl !== false) {\n                decls.push(decl);\n                comments(decls);\n            }\n            decl = declaration();\n        }\n        if (!close()) {\n            return error(`missing '}'`);\n        }\n        return decls;\n    }\n    function keyframe() {\n        let m;\n        const vals = [];\n        const pos = position();\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n        if (!vals.length) {\n            return;\n        }\n        return pos({\n            type: 'keyframe',\n            values: vals,\n            declarations: declarations(),\n        });\n    }\n    function atkeyframes() {\n        const pos = position();\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n        if (!m) {\n            return;\n        }\n        const vendor = m[1];\n        m = match(/^([-\\w]+)\\s*/);\n        if (!m) {\n            return error('@keyframes missing name');\n        }\n        const name = m[1];\n        if (!open()) {\n            return error(`@keyframes missing '{'`);\n        }\n        let frame;\n        let frames = comments();\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n        if (!close()) {\n            return error(`@keyframes missing '}'`);\n        }\n        return pos({\n            type: 'keyframes',\n            name,\n            vendor,\n            keyframes: frames,\n        });\n    }\n    function atsupports() {\n        const pos = position();\n        const m = match(/^@supports *([^{]+)/);\n        if (!m) {\n            return;\n        }\n        const supports = trim(m[1]);\n        if (!open()) {\n            return error(`@supports missing '{'`);\n        }\n        const style = comments().concat(rules());\n        if (!close()) {\n            return error(`@supports missing '}'`);\n        }\n        return pos({\n            type: 'supports',\n            supports,\n            rules: style,\n        });\n    }\n    function athost() {\n        const pos = position();\n        const m = match(/^@host\\s*/);\n        if (!m) {\n            return;\n        }\n        if (!open()) {\n            return error(`@host missing '{'`);\n        }\n        const style = comments().concat(rules());\n        if (!close()) {\n            return error(`@host missing '}'`);\n        }\n        return pos({\n            type: 'host',\n            rules: style,\n        });\n    }\n    function atmedia() {\n        const pos = position();\n        const m = match(/^@media *([^{]+)/);\n        if (!m) {\n            return;\n        }\n        const media = trim(m[1]);\n        if (!open()) {\n            return error(`@media missing '{'`);\n        }\n        const style = comments().concat(rules());\n        if (!close()) {\n            return error(`@media missing '}'`);\n        }\n        return pos({\n            type: 'media',\n            media,\n            rules: style,\n        });\n    }\n    function atcustommedia() {\n        const pos = position();\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (!m) {\n            return;\n        }\n        return pos({\n            type: 'custom-media',\n            name: trim(m[1]),\n            media: trim(m[2]),\n        });\n    }\n    function atpage() {\n        const pos = position();\n        const m = match(/^@page */);\n        if (!m) {\n            return;\n        }\n        const sel = selector() || [];\n        if (!open()) {\n            return error(`@page missing '{'`);\n        }\n        let decls = comments();\n        let decl;\n        while ((decl = declaration())) {\n            decls.push(decl);\n            decls = decls.concat(comments());\n        }\n        if (!close()) {\n            return error(`@page missing '}'`);\n        }\n        return pos({\n            type: 'page',\n            selectors: sel,\n            declarations: decls,\n        });\n    }\n    function atdocument() {\n        const pos = position();\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        if (!m) {\n            return;\n        }\n        const vendor = trim(m[1]);\n        const doc = trim(m[2]);\n        if (!open()) {\n            return error(`@document missing '{'`);\n        }\n        const style = comments().concat(rules());\n        if (!close()) {\n            return error(`@document missing '}'`);\n        }\n        return pos({\n            type: 'document',\n            document: doc,\n            vendor,\n            rules: style,\n        });\n    }\n    function atfontface() {\n        const pos = position();\n        const m = match(/^@font-face\\s*/);\n        if (!m) {\n            return;\n        }\n        if (!open()) {\n            return error(`@font-face missing '{'`);\n        }\n        let decls = comments();\n        let decl;\n        while ((decl = declaration())) {\n            decls.push(decl);\n            decls = decls.concat(comments());\n        }\n        if (!close()) {\n            return error(`@font-face missing '}'`);\n        }\n        return pos({\n            type: 'font-face',\n            declarations: decls,\n        });\n    }\n    const atimport = _compileAtrule('import');\n    const atcharset = _compileAtrule('charset');\n    const atnamespace = _compileAtrule('namespace');\n    function _compileAtrule(name) {\n        const re = new RegExp('^@' + name + '\\\\s*([^;]+);');\n        return () => {\n            const pos = position();\n            const m = match(re);\n            if (!m) {\n                return;\n            }\n            const ret = { type: name };\n            ret[name] = m[1].trim();\n            return pos(ret);\n        };\n    }\n    function atrule() {\n        if (css[0] !== '@') {\n            return;\n        }\n        return (atkeyframes() ||\n            atmedia() ||\n            atcustommedia() ||\n            atsupports() ||\n            atimport() ||\n            atcharset() ||\n            atnamespace() ||\n            atdocument() ||\n            atpage() ||\n            athost() ||\n            atfontface());\n    }\n    function rule() {\n        const pos = position();\n        const sel = selector();\n        if (!sel) {\n            return error('selector missing');\n        }\n        comments();\n        return pos({\n            type: 'rule',\n            selectors: sel,\n            declarations: declarations(),\n        });\n    }\n    return addParent(stylesheet());\n}\nfunction trim(str) {\n    return str ? str.replace(/^\\s+|\\s+$/g, '') : '';\n}\nfunction addParent(obj, parent) {\n    const isNode = obj && typeof obj.type === 'string';\n    const childParent = isNode ? obj : parent;\n    for (const k of Object.keys(obj)) {\n        const value = obj[k];\n        if (Array.isArray(value)) {\n            value.forEach((v) => {\n                addParent(v, childParent);\n            });\n        }\n        else if (value && typeof value === 'object') {\n            addParent(value, childParent);\n        }\n    }\n    if (isNode) {\n        Object.defineProperty(obj, 'parent', {\n            configurable: true,\n            writable: true,\n            enumerable: false,\n            value: parent || null,\n        });\n    }\n    return obj;\n}\n\nconst tagMap = {\n    script: 'noscript',\n    altglyph: 'altGlyph',\n    altglyphdef: 'altGlyphDef',\n    altglyphitem: 'altGlyphItem',\n    animatecolor: 'animateColor',\n    animatemotion: 'animateMotion',\n    animatetransform: 'animateTransform',\n    clippath: 'clipPath',\n    feblend: 'feBlend',\n    fecolormatrix: 'feColorMatrix',\n    fecomponenttransfer: 'feComponentTransfer',\n    fecomposite: 'feComposite',\n    feconvolvematrix: 'feConvolveMatrix',\n    fediffuselighting: 'feDiffuseLighting',\n    fedisplacementmap: 'feDisplacementMap',\n    fedistantlight: 'feDistantLight',\n    fedropshadow: 'feDropShadow',\n    feflood: 'feFlood',\n    fefunca: 'feFuncA',\n    fefuncb: 'feFuncB',\n    fefuncg: 'feFuncG',\n    fefuncr: 'feFuncR',\n    fegaussianblur: 'feGaussianBlur',\n    feimage: 'feImage',\n    femerge: 'feMerge',\n    femergenode: 'feMergeNode',\n    femorphology: 'feMorphology',\n    feoffset: 'feOffset',\n    fepointlight: 'fePointLight',\n    fespecularlighting: 'feSpecularLighting',\n    fespotlight: 'feSpotLight',\n    fetile: 'feTile',\n    feturbulence: 'feTurbulence',\n    foreignobject: 'foreignObject',\n    glyphref: 'glyphRef',\n    lineargradient: 'linearGradient',\n    radialgradient: 'radialGradient',\n};\nfunction getTagName(n) {\n    let tagName = tagMap[n.tagName] ? tagMap[n.tagName] : n.tagName;\n    if (tagName === 'link' && n.attributes._cssText) {\n        tagName = 'style';\n    }\n    return tagName;\n}\nfunction escapeRegExp(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nconst HOVER_SELECTOR = /([^\\\\]):hover/;\nconst HOVER_SELECTOR_GLOBAL = new RegExp(HOVER_SELECTOR.source, 'g');\nfunction addHoverClass(cssText, cache) {\n    const cachedStyle = cache === null || cache === void 0 ? void 0 : cache.stylesWithHoverClass.get(cssText);\n    if (cachedStyle)\n        return cachedStyle;\n    const ast = parse(cssText, {\n        silent: true,\n    });\n    if (!ast.stylesheet) {\n        return cssText;\n    }\n    const selectors = [];\n    ast.stylesheet.rules.forEach((rule) => {\n        if ('selectors' in rule) {\n            (rule.selectors || []).forEach((selector) => {\n                if (HOVER_SELECTOR.test(selector)) {\n                    selectors.push(selector);\n                }\n            });\n        }\n    });\n    if (selectors.length === 0) {\n        return cssText;\n    }\n    const selectorMatcher = new RegExp(selectors\n        .filter((selector, index) => selectors.indexOf(selector) === index)\n        .sort((a, b) => b.length - a.length)\n        .map((selector) => {\n        return escapeRegExp(selector);\n    })\n        .join('|'), 'g');\n    const result = cssText.replace(selectorMatcher, (selector) => {\n        const newSelector = selector.replace(HOVER_SELECTOR_GLOBAL, '$1.\\\\:hover');\n        return `${selector}, ${newSelector}`;\n    });\n    cache === null || cache === void 0 ? void 0 : cache.stylesWithHoverClass.set(cssText, result);\n    return result;\n}\nfunction createCache() {\n    const stylesWithHoverClass = new Map();\n    return {\n        stylesWithHoverClass,\n    };\n}\nfunction buildNode(n, options) {\n    const { doc, hackCss, cache } = options;\n    switch (n.type) {\n        case NodeType.Document:\n            return doc.implementation.createDocument(null, '', null);\n        case NodeType.DocumentType:\n            return doc.implementation.createDocumentType(n.name || 'html', n.publicId, n.systemId);\n        case NodeType.Element:\n            const tagName = getTagName(n);\n            let node;\n            if (n.isSVG) {\n                node = doc.createElementNS('http://www.w3.org/2000/svg', tagName);\n            }\n            else {\n                node = doc.createElement(tagName);\n            }\n            for (const name in n.attributes) {\n                if (!n.attributes.hasOwnProperty(name)) {\n                    continue;\n                }\n                let value = n.attributes[name];\n                if (tagName === 'option' && name === 'selected' && value === false) {\n                    continue;\n                }\n                value =\n                    typeof value === 'boolean' || typeof value === 'number' || value === null ? '' : value;\n                if (!name.startsWith('rr_')) {\n                    const isTextarea = tagName === 'textarea' && name === 'value';\n                    const isRemoteOrDynamicCss = tagName === 'style' && name === '_cssText';\n                    if (isRemoteOrDynamicCss && hackCss) {\n                        value = addHoverClass(value, cache);\n                    }\n                    if (isTextarea || isRemoteOrDynamicCss) {\n                        const child = doc.createTextNode(value);\n                        for (const c of Array.from(node.childNodes)) {\n                            if (c.nodeType === node.TEXT_NODE) {\n                                node.removeChild(c);\n                            }\n                        }\n                        node.appendChild(child);\n                        continue;\n                    }\n                    try {\n                        if (n.isSVG && name === 'xlink:href') {\n                            node.setAttributeNS('http://www.w3.org/1999/xlink', name, value);\n                        }\n                        else if (name === 'onload' ||\n                            name === 'onclick' ||\n                            name.substring(0, 7) === 'onmouse') {\n                            node.setAttribute('_' + name, value);\n                        }\n                        else if (tagName === 'meta' &&\n                            n.attributes['http-equiv'] === 'Content-Security-Policy' &&\n                            name === 'content') {\n                            node.setAttribute('csp-content', value);\n                            continue;\n                        }\n                        else if (tagName === 'link' &&\n                            (n.attributes.rel === 'preload' || n.attributes.rel === 'modulepreload') &&\n                            n.attributes.as === 'script') {\n                        }\n                        else if (tagName === 'link' &&\n                            n.attributes.rel === 'prefetch' &&\n                            typeof n.attributes.href === 'string' &&\n                            n.attributes.href.endsWith('.js')) {\n                        }\n                        else if (tagName === 'img' &&\n                            n.attributes.srcset &&\n                            n.attributes.rr_dataURL) {\n                            node.setAttribute('rrweb-original-srcset', n.attributes.srcset);\n                        }\n                        else {\n                            node.setAttribute(name, value);\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else {\n                    if (tagName === 'canvas' && name === 'rr_dataURL') {\n                        const image = document.createElement('img');\n                        image.src = value;\n                        image.onload = () => {\n                            const ctx = node.getContext('2d');\n                            if (ctx) {\n                                ctx.drawImage(image, 0, 0, image.width, image.height);\n                            }\n                        };\n                    }\n                    else if (tagName === 'img' && name === 'rr_dataURL') {\n                        const image = node;\n                        if (!image.currentSrc.startsWith('data:')) {\n                            image.setAttribute('rrweb-original-src', n.attributes.src);\n                            image.src = value;\n                        }\n                    }\n                    if (name === 'rr_width') {\n                        node.style.width = value;\n                    }\n                    else if (name === 'rr_height') {\n                        node.style.height = value;\n                    }\n                    else if (name === 'rr_mediaCurrentTime') {\n                        node.currentTime = n.attributes\n                            .rr_mediaCurrentTime;\n                    }\n                    else if (name === 'rr_mediaState') {\n                        switch (value) {\n                            case 'played':\n                                node\n                                    .play()\n                                    .catch((e) => console.warn('media playback error', e));\n                                break;\n                            case 'paused':\n                                node.pause();\n                                break;\n                        }\n                    }\n                }\n            }\n            if (n.isShadowHost) {\n                if (!node.shadowRoot) {\n                    node.attachShadow({ mode: 'open' });\n                }\n                else {\n                    while (node.shadowRoot.firstChild) {\n                        node.shadowRoot.removeChild(node.shadowRoot.firstChild);\n                    }\n                }\n            }\n            return node;\n        case NodeType.Text:\n            return doc.createTextNode(n.isStyle && hackCss\n                ? addHoverClass(n.textContent, cache)\n                : n.textContent);\n        case NodeType.CDATA:\n            return doc.createCDATASection(n.textContent);\n        case NodeType.Comment:\n            return doc.createComment(n.textContent);\n        default:\n            return null;\n    }\n}\nfunction buildNodeWithSN(n, options) {\n    const { doc, map, skipChild = false, hackCss = true, afterAppend, cache, } = options;\n    let node = buildNode(n, { doc, hackCss, cache });\n    if (!node) {\n        return null;\n    }\n    if (n.rootId) {\n        console.assert(map[n.rootId] === doc, 'Target document should has the same root id.');\n    }\n    if (n.type === NodeType.Document) {\n        doc.close();\n        doc.open();\n        if (n.compatMode === 'BackCompat' &&\n            n.childNodes &&\n            n.childNodes[0].type !== NodeType.DocumentType) {\n            if (n.childNodes[0].type === NodeType.Element &&\n                'xmlns' in n.childNodes[0].attributes &&\n                n.childNodes[0].attributes.xmlns === 'http://www.w3.org/1999/xhtml') {\n                doc.write('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"\">');\n            }\n            else {\n                doc.write('<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"\">');\n            }\n        }\n        node = doc;\n    }\n    node.__sn = n;\n    map[n.id] = node;\n    if ((n.type === NodeType.Document || n.type === NodeType.Element) &&\n        !skipChild) {\n        for (const childN of n.childNodes) {\n            const childNode = buildNodeWithSN(childN, {\n                doc,\n                map,\n                skipChild: false,\n                hackCss,\n                afterAppend,\n                cache,\n            });\n            if (!childNode) {\n                console.warn('Failed to rebuild', childN);\n                continue;\n            }\n            if (childN.isShadow && isElement(node) && node.shadowRoot) {\n                node.shadowRoot.appendChild(childNode);\n            }\n            else {\n                node.appendChild(childNode);\n            }\n            if (afterAppend) {\n                afterAppend(childNode);\n            }\n        }\n    }\n    return node;\n}\nfunction visit(idNodeMap, onVisit) {\n    function walk(node) {\n        onVisit(node);\n    }\n    for (const key in idNodeMap) {\n        if (idNodeMap[key]) {\n            walk(idNodeMap[key]);\n        }\n    }\n}\nfunction handleScroll(node) {\n    const n = node.__sn;\n    if (n.type !== NodeType.Element) {\n        return;\n    }\n    const el = node;\n    for (const name in n.attributes) {\n        if (!(n.attributes.hasOwnProperty(name) && name.startsWith('rr_'))) {\n            continue;\n        }\n        const value = n.attributes[name];\n        if (name === 'rr_scrollLeft') {\n            el.scrollLeft = value;\n        }\n        if (name === 'rr_scrollTop') {\n            el.scrollTop = value;\n        }\n    }\n}\nfunction rebuild(n, options) {\n    const { doc, onVisit, hackCss = true, afterAppend, cache } = options;\n    const idNodeMap = {};\n    const node = buildNodeWithSN(n, {\n        doc,\n        map: idNodeMap,\n        skipChild: false,\n        hackCss,\n        afterAppend,\n        cache,\n    });\n    visit(idNodeMap, (visitedNode) => {\n        if (onVisit) {\n            onVisit(visitedNode);\n        }\n        handleScroll(visitedNode);\n    });\n    return [node, idNodeMap];\n}\n\nexport { IGNORED_NODE, NodeType, addHoverClass, buildNodeWithSN, createCache, hasInputMaskOptions, is2DCanvasBlank, isElement, isShadowRoot, maskInputValue, needMaskingText, rebuild, serializeNodeWithId, snapshot, transformAttribute };\n", "var EventType;\n(function (EventType) {\n    EventType[EventType[\"DomContentLoaded\"] = 0] = \"DomContentLoaded\";\n    EventType[EventType[\"Load\"] = 1] = \"Load\";\n    EventType[EventType[\"FullSnapshot\"] = 2] = \"FullSnapshot\";\n    EventType[EventType[\"IncrementalSnapshot\"] = 3] = \"IncrementalSnapshot\";\n    EventType[EventType[\"Meta\"] = 4] = \"Meta\";\n    EventType[EventType[\"Custom\"] = 5] = \"Custom\";\n    EventType[EventType[\"Plugin\"] = 6] = \"Plugin\";\n})(EventType || (EventType = {}));\nvar IncrementalSource;\n(function (IncrementalSource) {\n    IncrementalSource[IncrementalSource[\"Mutation\"] = 0] = \"Mutation\";\n    IncrementalSource[IncrementalSource[\"MouseMove\"] = 1] = \"MouseMove\";\n    IncrementalSource[IncrementalSource[\"MouseInteraction\"] = 2] = \"MouseInteraction\";\n    IncrementalSource[IncrementalSource[\"Scroll\"] = 3] = \"Scroll\";\n    IncrementalSource[IncrementalSource[\"ViewportResize\"] = 4] = \"ViewportResize\";\n    IncrementalSource[IncrementalSource[\"Input\"] = 5] = \"Input\";\n    IncrementalSource[IncrementalSource[\"TouchMove\"] = 6] = \"TouchMove\";\n    IncrementalSource[IncrementalSource[\"MediaInteraction\"] = 7] = \"MediaInteraction\";\n    IncrementalSource[IncrementalSource[\"StyleSheetRule\"] = 8] = \"StyleSheetRule\";\n    IncrementalSource[IncrementalSource[\"CanvasMutation\"] = 9] = \"CanvasMutation\";\n    IncrementalSource[IncrementalSource[\"Font\"] = 10] = \"Font\";\n    IncrementalSource[IncrementalSource[\"Log\"] = 11] = \"Log\";\n    IncrementalSource[IncrementalSource[\"Drag\"] = 12] = \"Drag\";\n    IncrementalSource[IncrementalSource[\"StyleDeclaration\"] = 13] = \"StyleDeclaration\";\n})(IncrementalSource || (IncrementalSource = {}));\nvar MouseInteractions;\n(function (MouseInteractions) {\n    MouseInteractions[MouseInteractions[\"MouseUp\"] = 0] = \"MouseUp\";\n    MouseInteractions[MouseInteractions[\"MouseDown\"] = 1] = \"MouseDown\";\n    MouseInteractions[MouseInteractions[\"Click\"] = 2] = \"Click\";\n    MouseInteractions[MouseInteractions[\"ContextMenu\"] = 3] = \"ContextMenu\";\n    MouseInteractions[MouseInteractions[\"DblClick\"] = 4] = \"DblClick\";\n    MouseInteractions[MouseInteractions[\"Focus\"] = 5] = \"Focus\";\n    MouseInteractions[MouseInteractions[\"Blur\"] = 6] = \"Blur\";\n    MouseInteractions[MouseInteractions[\"TouchStart\"] = 7] = \"TouchStart\";\n    MouseInteractions[MouseInteractions[\"TouchMove_Departed\"] = 8] = \"TouchMove_Departed\";\n    MouseInteractions[MouseInteractions[\"TouchEnd\"] = 9] = \"TouchEnd\";\n    MouseInteractions[MouseInteractions[\"TouchCancel\"] = 10] = \"TouchCancel\";\n})(MouseInteractions || (MouseInteractions = {}));\nvar CanvasContext;\n(function (CanvasContext) {\n    CanvasContext[CanvasContext[\"2D\"] = 0] = \"2D\";\n    CanvasContext[CanvasContext[\"WebGL\"] = 1] = \"WebGL\";\n    CanvasContext[CanvasContext[\"WebGL2\"] = 2] = \"WebGL2\";\n})(CanvasContext || (CanvasContext = {}));\nvar MediaInteractions;\n(function (MediaInteractions) {\n    MediaInteractions[MediaInteractions[\"Play\"] = 0] = \"Play\";\n    MediaInteractions[MediaInteractions[\"Pause\"] = 1] = \"Pause\";\n    MediaInteractions[MediaInteractions[\"Seeked\"] = 2] = \"Seeked\";\n    MediaInteractions[MediaInteractions[\"VolumeChange\"] = 3] = \"VolumeChange\";\n})(MediaInteractions || (MediaInteractions = {}));\nvar ReplayerEvents;\n(function (ReplayerEvents) {\n    ReplayerEvents[\"Start\"] = \"start\";\n    ReplayerEvents[\"Pause\"] = \"pause\";\n    ReplayerEvents[\"Resume\"] = \"resume\";\n    ReplayerEvents[\"Resize\"] = \"resize\";\n    ReplayerEvents[\"Finish\"] = \"finish\";\n    ReplayerEvents[\"FullsnapshotRebuilded\"] = \"fullsnapshot-rebuilded\";\n    ReplayerEvents[\"LoadStylesheetStart\"] = \"load-stylesheet-start\";\n    ReplayerEvents[\"LoadStylesheetEnd\"] = \"load-stylesheet-end\";\n    ReplayerEvents[\"SkipStart\"] = \"skip-start\";\n    ReplayerEvents[\"SkipEnd\"] = \"skip-end\";\n    ReplayerEvents[\"MouseInteraction\"] = \"mouse-interaction\";\n    ReplayerEvents[\"EventCast\"] = \"event-cast\";\n    ReplayerEvents[\"CustomEvent\"] = \"custom-event\";\n    ReplayerEvents[\"Flush\"] = \"flush\";\n    ReplayerEvents[\"StateChange\"] = \"state-change\";\n    ReplayerEvents[\"PlayBack\"] = \"play-back\";\n})(ReplayerEvents || (ReplayerEvents = {}));\n\nexport { CanvasContext, EventType, IncrementalSource, MediaInteractions, MouseInteractions, ReplayerEvents };\n", "import { IncrementalSource } from './types.js';\nimport { IGNORED_NODE, isShadowRoot, NodeType } from '../../rrweb-snapshot/es/rrweb-snapshot.js';\n\nfunction on(type, fn, target = document) {\n    const options = { capture: true, passive: true };\n    target.addEventListener(type, fn, options);\n    return () => target.removeEventListener(type, fn, options);\n}\nfunction createMirror() {\n    return {\n        map: {},\n        getId(n) {\n            if (!n || !n.__sn) {\n                return -1;\n            }\n            return n.__sn.id;\n        },\n        getNode(id) {\n            return this.map[id] || null;\n        },\n        removeNodeFromMap(n) {\n            const id = n.__sn && n.__sn.id;\n            delete this.map[id];\n            if (n.childNodes) {\n                n.childNodes.forEach((child) => this.removeNodeFromMap(child));\n            }\n        },\n        has(id) {\n            return this.map.hasOwnProperty(id);\n        },\n        reset() {\n            this.map = {};\n        },\n    };\n}\nconst DEPARTED_MIRROR_ACCESS_WARNING = 'Please stop import mirror directly. Instead of that,' +\n    '\\r\\n' +\n    'now you can use replayer.getMirror() to access the mirror instance of a replayer,' +\n    '\\r\\n' +\n    'or you can use record.mirror to access the mirror instance during recording.';\nlet _mirror = {\n    map: {},\n    getId() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return -1;\n    },\n    getNode() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return null;\n    },\n    removeNodeFromMap() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n    has() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return false;\n    },\n    reset() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n};\nif (typeof window !== 'undefined' && window.Proxy && window.Reflect) {\n    _mirror = new Proxy(_mirror, {\n        get(target, prop, receiver) {\n            if (prop === 'map') {\n                console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n            }\n            return Reflect.get(target, prop, receiver);\n        },\n    });\n}\nfunction throttle(func, wait, options = {}) {\n    let timeout = null;\n    let previous = 0;\n    return function (arg) {\n        let now = Date.now();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        let remaining = wait - (now - previous);\n        let context = this;\n        let args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = now;\n            func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(() => {\n                previous = options.leading === false ? 0 : Date.now();\n                timeout = null;\n                func.apply(context, args);\n            }, remaining);\n        }\n    };\n}\nfunction hookSetter(target, key, d, isRevoked, win = window) {\n    const original = win.Object.getOwnPropertyDescriptor(target, key);\n    win.Object.defineProperty(target, key, isRevoked\n        ? d\n        : {\n            set(value) {\n                setTimeout(() => {\n                    d.set.call(this, value);\n                }, 0);\n                if (original && original.set) {\n                    original.set.call(this, value);\n                }\n            },\n        });\n    return () => hookSetter(target, key, original || {}, true);\n}\nfunction patch(source, name, replacement) {\n    try {\n        if (!(name in source)) {\n            return () => { };\n        }\n        const original = source[name];\n        const wrapped = replacement(original);\n        if (typeof wrapped === 'function') {\n            wrapped.prototype = wrapped.prototype || {};\n            Object.defineProperties(wrapped, {\n                __rrweb_original__: {\n                    enumerable: false,\n                    value: original,\n                },\n            });\n        }\n        source[name] = wrapped;\n        return () => {\n            source[name] = original;\n        };\n    }\n    catch (_a) {\n        return () => { };\n    }\n}\nfunction getWindowHeight() {\n    return (window.innerHeight ||\n        (document.documentElement && document.documentElement.clientHeight) ||\n        (document.body && document.body.clientHeight));\n}\nfunction getWindowWidth() {\n    return (window.innerWidth ||\n        (document.documentElement && document.documentElement.clientWidth) ||\n        (document.body && document.body.clientWidth));\n}\nfunction isBlocked(node, blockClass, blockSelector, unblockSelector) {\n    if (!node) {\n        return false;\n    }\n    if (node.nodeType === node.ELEMENT_NODE) {\n        let needBlock = false;\n        const needUnblock = unblockSelector && node.matches(unblockSelector);\n        if (typeof blockClass === 'string') {\n            if (node.closest !== undefined) {\n                needBlock =\n                    !needUnblock &&\n                        node.closest('.' + blockClass) !== null;\n            }\n            else {\n                needBlock =\n                    !needUnblock && node.classList.contains(blockClass);\n            }\n        }\n        else {\n            !needUnblock &&\n                node.classList.forEach((className) => {\n                    if (blockClass.test(className)) {\n                        needBlock = true;\n                    }\n                });\n        }\n        if (!needBlock && blockSelector) {\n            needBlock = node.matches(blockSelector);\n        }\n        return ((!needUnblock && needBlock) ||\n            isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector));\n    }\n    if (node.nodeType === node.TEXT_NODE) {\n        return isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector);\n    }\n    return isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector);\n}\nfunction isIgnored(n) {\n    if ('__sn' in n) {\n        return n.__sn.id === IGNORED_NODE;\n    }\n    return false;\n}\nfunction isAncestorRemoved(target, mirror) {\n    if (isShadowRoot(target)) {\n        return false;\n    }\n    const id = mirror.getId(target);\n    if (!mirror.has(id)) {\n        return true;\n    }\n    if (target.parentNode &&\n        target.parentNode.nodeType === target.DOCUMENT_NODE) {\n        return false;\n    }\n    if (!target.parentNode) {\n        return true;\n    }\n    return isAncestorRemoved(target.parentNode, mirror);\n}\nfunction isTouchEvent(event) {\n    return Boolean(event.changedTouches);\n}\nfunction polyfill(win = window) {\n    if ('NodeList' in win && !win.NodeList.prototype.forEach) {\n        win.NodeList.prototype.forEach = Array.prototype\n            .forEach;\n    }\n    if ('DOMTokenList' in win && !win.DOMTokenList.prototype.forEach) {\n        win.DOMTokenList.prototype.forEach = Array.prototype\n            .forEach;\n    }\n    if (!Node.prototype.contains) {\n        Node.prototype.contains = function contains(node) {\n            if (!(0 in arguments)) {\n                throw new TypeError('1 argument is required');\n            }\n            do {\n                if (this === node) {\n                    return true;\n                }\n            } while ((node = node && node.parentNode));\n            return false;\n        };\n    }\n}\nclass TreeIndex {\n    constructor() {\n        this.reset();\n    }\n    add(mutation) {\n        const parentTreeNode = this.indexes.get(mutation.parentId);\n        const treeNode = {\n            id: mutation.node.id,\n            mutation,\n            children: [],\n            texts: [],\n            attributes: [],\n        };\n        if (!parentTreeNode) {\n            this.tree[treeNode.id] = treeNode;\n        }\n        else {\n            treeNode.parent = parentTreeNode;\n            parentTreeNode.children[treeNode.id] = treeNode;\n        }\n        this.indexes.set(treeNode.id, treeNode);\n    }\n    remove(mutation, mirror) {\n        const parentTreeNode = this.indexes.get(mutation.parentId);\n        const treeNode = this.indexes.get(mutation.id);\n        const deepRemoveFromMirror = (id) => {\n            this.removeIdSet.add(id);\n            const node = mirror.getNode(id);\n            node === null || node === void 0 ? void 0 : node.childNodes.forEach((childNode) => {\n                if ('__sn' in childNode) {\n                    deepRemoveFromMirror(childNode.__sn.id);\n                }\n            });\n        };\n        const deepRemoveFromTreeIndex = (node) => {\n            this.removeIdSet.add(node.id);\n            Object.values(node.children).forEach((n) => deepRemoveFromTreeIndex(n));\n            const _treeNode = this.indexes.get(node.id);\n            if (_treeNode) {\n                const _parentTreeNode = _treeNode.parent;\n                if (_parentTreeNode) {\n                    delete _treeNode.parent;\n                    delete _parentTreeNode.children[_treeNode.id];\n                    this.indexes.delete(mutation.id);\n                }\n            }\n        };\n        if (!treeNode) {\n            this.removeNodeMutations.push(mutation);\n            deepRemoveFromMirror(mutation.id);\n        }\n        else if (!parentTreeNode) {\n            delete this.tree[treeNode.id];\n            this.indexes.delete(treeNode.id);\n            deepRemoveFromTreeIndex(treeNode);\n        }\n        else {\n            delete treeNode.parent;\n            delete parentTreeNode.children[treeNode.id];\n            this.indexes.delete(mutation.id);\n            deepRemoveFromTreeIndex(treeNode);\n        }\n    }\n    text(mutation) {\n        const treeNode = this.indexes.get(mutation.id);\n        if (treeNode) {\n            treeNode.texts.push(mutation);\n        }\n        else {\n            this.textMutations.push(mutation);\n        }\n    }\n    attribute(mutation) {\n        const treeNode = this.indexes.get(mutation.id);\n        if (treeNode) {\n            treeNode.attributes.push(mutation);\n        }\n        else {\n            this.attributeMutations.push(mutation);\n        }\n    }\n    scroll(d) {\n        this.scrollMap.set(d.id, d);\n    }\n    input(d) {\n        this.inputMap.set(d.id, d);\n    }\n    flush() {\n        const { tree, removeNodeMutations, textMutations, attributeMutations, } = this;\n        const batchMutationData = {\n            source: IncrementalSource.Mutation,\n            removes: removeNodeMutations,\n            texts: textMutations,\n            attributes: attributeMutations,\n            adds: [],\n        };\n        const walk = (treeNode, removed) => {\n            if (removed) {\n                this.removeIdSet.add(treeNode.id);\n            }\n            batchMutationData.texts = batchMutationData.texts\n                .concat(removed ? [] : treeNode.texts)\n                .filter((m) => !this.removeIdSet.has(m.id));\n            batchMutationData.attributes = batchMutationData.attributes\n                .concat(removed ? [] : treeNode.attributes)\n                .filter((m) => !this.removeIdSet.has(m.id));\n            if (!this.removeIdSet.has(treeNode.id) &&\n                !this.removeIdSet.has(treeNode.mutation.parentId) &&\n                !removed) {\n                batchMutationData.adds.push(treeNode.mutation);\n                if (treeNode.children) {\n                    Object.values(treeNode.children).forEach((n) => walk(n, false));\n                }\n            }\n            else {\n                Object.values(treeNode.children).forEach((n) => walk(n, true));\n            }\n        };\n        Object.values(tree).forEach((n) => walk(n, false));\n        for (const id of this.scrollMap.keys()) {\n            if (this.removeIdSet.has(id)) {\n                this.scrollMap.delete(id);\n            }\n        }\n        for (const id of this.inputMap.keys()) {\n            if (this.removeIdSet.has(id)) {\n                this.inputMap.delete(id);\n            }\n        }\n        const scrollMap = new Map(this.scrollMap);\n        const inputMap = new Map(this.inputMap);\n        this.reset();\n        return {\n            mutationData: batchMutationData,\n            scrollMap,\n            inputMap,\n        };\n    }\n    reset() {\n        this.tree = [];\n        this.indexes = new Map();\n        this.removeNodeMutations = [];\n        this.textMutations = [];\n        this.attributeMutations = [];\n        this.removeIdSet = new Set();\n        this.scrollMap = new Map();\n        this.inputMap = new Map();\n    }\n    idRemoved(id) {\n        return this.removeIdSet.has(id);\n    }\n}\nfunction queueToResolveTrees(queue) {\n    const queueNodeMap = {};\n    const putIntoMap = (m, parent) => {\n        const nodeInTree = {\n            value: m,\n            parent,\n            children: [],\n        };\n        queueNodeMap[m.node.id] = nodeInTree;\n        return nodeInTree;\n    };\n    const queueNodeTrees = [];\n    for (const mutation of queue) {\n        const { nextId, parentId } = mutation;\n        if (nextId && nextId in queueNodeMap) {\n            const nextInTree = queueNodeMap[nextId];\n            if (nextInTree.parent) {\n                const idx = nextInTree.parent.children.indexOf(nextInTree);\n                nextInTree.parent.children.splice(idx, 0, putIntoMap(mutation, nextInTree.parent));\n            }\n            else {\n                const idx = queueNodeTrees.indexOf(nextInTree);\n                queueNodeTrees.splice(idx, 0, putIntoMap(mutation, null));\n            }\n            continue;\n        }\n        if (parentId in queueNodeMap) {\n            const parentInTree = queueNodeMap[parentId];\n            parentInTree.children.push(putIntoMap(mutation, parentInTree));\n            continue;\n        }\n        queueNodeTrees.push(putIntoMap(mutation, null));\n    }\n    return queueNodeTrees;\n}\nfunction iterateResolveTree(tree, cb) {\n    cb(tree.value);\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        iterateResolveTree(tree.children[i], cb);\n    }\n}\nfunction isIframeINode(node) {\n    if ('__sn' in node) {\n        return (node.__sn.type === NodeType.Element && node.__sn.tagName === 'iframe');\n    }\n    return false;\n}\nfunction getBaseDimension(node, rootIframe) {\n    var _a, _b;\n    const frameElement = (_b = (_a = node.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView) === null || _b === void 0 ? void 0 : _b.frameElement;\n    if (!frameElement || frameElement === rootIframe) {\n        return {\n            x: 0,\n            y: 0,\n            relativeScale: 1,\n            absoluteScale: 1,\n        };\n    }\n    const frameDimension = frameElement.getBoundingClientRect();\n    const frameBaseDimension = getBaseDimension(frameElement, rootIframe);\n    const relativeScale = frameDimension.height / frameElement.clientHeight;\n    return {\n        x: frameDimension.x * frameBaseDimension.relativeScale +\n            frameBaseDimension.x,\n        y: frameDimension.y * frameBaseDimension.relativeScale +\n            frameBaseDimension.y,\n        relativeScale,\n        absoluteScale: frameBaseDimension.absoluteScale * relativeScale,\n    };\n}\nfunction hasShadowRoot(n) {\n    return Boolean(n === null || n === void 0 ? void 0 : n.shadowRoot);\n}\n\nexport { TreeIndex, _mirror, createMirror, getBaseDimension, getWindowHeight, getWindowWidth, hasShadowRoot, hookSetter, isAncestorRemoved, isBlocked, isIframeINode, isIgnored, isTouchEvent, iterateResolveTree, on, patch, polyfill, queueToResolveTrees, throttle };\n", "import { isShadowRoot, maskInputValue, transformAttribute, needMaskingText, IGNORED_NODE, serializeNodeWithId } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport { isIgnored, isBlocked, isAncestorRemoved, isIframeINode, hasShadowRoot } from '../utils.js';\n\nfunction isNodeInLinkedList(n) {\n    return '__ln' in n;\n}\nclass DoubleLinkedList {\n    constructor() {\n        this.length = 0;\n        this.head = null;\n    }\n    get(position) {\n        if (position >= this.length) {\n            throw new Error('Position outside of list range');\n        }\n        let current = this.head;\n        for (let index = 0; index < position; index++) {\n            current = (current === null || current === void 0 ? void 0 : current.next) || null;\n        }\n        return current;\n    }\n    addNode(n) {\n        const node = {\n            value: n,\n            previous: null,\n            next: null,\n        };\n        n.__ln = node;\n        if (n.previousSibling && isNodeInLinkedList(n.previousSibling)) {\n            const current = n.previousSibling.__ln.next;\n            node.next = current;\n            node.previous = n.previousSibling.__ln;\n            n.previousSibling.__ln.next = node;\n            if (current) {\n                current.previous = node;\n            }\n        }\n        else if (n.nextSibling &&\n            isNodeInLinkedList(n.nextSibling) &&\n            n.nextSibling.__ln.previous) {\n            const current = n.nextSibling.__ln.previous;\n            node.previous = current;\n            node.next = n.nextSibling.__ln;\n            n.nextSibling.__ln.previous = node;\n            if (current) {\n                current.next = node;\n            }\n        }\n        else {\n            if (this.head) {\n                this.head.previous = node;\n            }\n            node.next = this.head;\n            this.head = node;\n        }\n        this.length++;\n    }\n    removeNode(n) {\n        const current = n.__ln;\n        if (!this.head) {\n            return;\n        }\n        if (!current.previous) {\n            this.head = current.next;\n            if (this.head) {\n                this.head.previous = null;\n            }\n        }\n        else {\n            current.previous.next = current.next;\n            if (current.next) {\n                current.next.previous = current.previous;\n            }\n        }\n        if (n.__ln) {\n            delete n.__ln;\n        }\n        this.length--;\n    }\n}\nconst moveKey = (id, parentId) => `${id}@${parentId}`;\nfunction isINode(n) {\n    return '__sn' in n;\n}\nclass MutationBuffer {\n    constructor() {\n        this.frozen = false;\n        this.locked = false;\n        this.texts = [];\n        this.attributes = [];\n        this.removes = [];\n        this.mapRemoves = [];\n        this.movedMap = {};\n        this.addedSet = new Set();\n        this.movedSet = new Set();\n        this.droppedSet = new Set();\n        this.processMutations = (mutations) => {\n            mutations.forEach(this.processMutation);\n            this.emit();\n        };\n        this.emit = () => {\n            if (this.frozen || this.locked) {\n                return;\n            }\n            const adds = [];\n            const addList = new DoubleLinkedList();\n            const getNextId = (n) => {\n                let ns = n;\n                let nextId = IGNORED_NODE;\n                while (nextId === IGNORED_NODE) {\n                    ns = ns && ns.nextSibling;\n                    nextId = ns && this.mirror.getId(ns);\n                }\n                return nextId;\n            };\n            const pushAdd = (n) => {\n                var _a, _b, _c, _d, _e;\n                const shadowHost = n.getRootNode\n                    ? (_a = n.getRootNode()) === null || _a === void 0 ? void 0 : _a.host\n                    : null;\n                let rootShadowHost = shadowHost;\n                while ((_c = (_b = rootShadowHost === null || rootShadowHost === void 0 ? void 0 : rootShadowHost.getRootNode) === null || _b === void 0 ? void 0 : _b.call(rootShadowHost)) === null || _c === void 0 ? void 0 : _c.host)\n                    rootShadowHost =\n                        ((_e = (_d = rootShadowHost === null || rootShadowHost === void 0 ? void 0 : rootShadowHost.getRootNode) === null || _d === void 0 ? void 0 : _d.call(rootShadowHost)) === null || _e === void 0 ? void 0 : _e.host) ||\n                            null;\n                const notInDoc = !this.doc.contains(n) &&\n                    (!rootShadowHost || !this.doc.contains(rootShadowHost));\n                if (!n.parentNode || notInDoc) {\n                    return;\n                }\n                const parentId = isShadowRoot(n.parentNode)\n                    ? this.mirror.getId(shadowHost)\n                    : this.mirror.getId(n.parentNode);\n                const nextId = getNextId(n);\n                if (parentId === -1 || nextId === -1) {\n                    return addList.addNode(n);\n                }\n                let sn = serializeNodeWithId(n, {\n                    doc: this.doc,\n                    map: this.mirror.map,\n                    blockClass: this.blockClass,\n                    blockSelector: this.blockSelector,\n                    unblockSelector: this.unblockSelector,\n                    maskTextClass: this.maskTextClass,\n                    maskTextSelector: this.maskTextSelector,\n                    unmaskTextSelector: this.unmaskTextSelector,\n                    maskInputSelector: this.maskInputSelector,\n                    unmaskInputSelector: this.unmaskInputSelector,\n                    skipChild: true,\n                    inlineStylesheet: this.inlineStylesheet,\n                    maskAllText: this.maskAllText,\n                    maskInputOptions: this.maskInputOptions,\n                    maskTextFn: this.maskTextFn,\n                    maskInputFn: this.maskInputFn,\n                    slimDOMOptions: this.slimDOMOptions,\n                    recordCanvas: this.recordCanvas,\n                    inlineImages: this.inlineImages,\n                    onSerialize: (currentN) => {\n                        if (isIframeINode(currentN)) {\n                            this.iframeManager.addIframe(currentN);\n                        }\n                        if (hasShadowRoot(n)) {\n                            this.shadowDomManager.addShadowRoot(n.shadowRoot, document);\n                        }\n                    },\n                    onIframeLoad: (iframe, childSn) => {\n                        this.iframeManager.attachIframe(iframe, childSn);\n                        this.shadowDomManager.observeAttachShadow(iframe);\n                    },\n                });\n                if (sn) {\n                    adds.push({\n                        parentId,\n                        nextId,\n                        node: sn,\n                    });\n                }\n            };\n            while (this.mapRemoves.length) {\n                this.mirror.removeNodeFromMap(this.mapRemoves.shift());\n            }\n            for (const n of this.movedSet) {\n                if (isParentRemoved(this.removes, n, this.mirror) &&\n                    !this.movedSet.has(n.parentNode)) {\n                    continue;\n                }\n                pushAdd(n);\n            }\n            for (const n of this.addedSet) {\n                if (!isAncestorInSet(this.droppedSet, n) &&\n                    !isParentRemoved(this.removes, n, this.mirror)) {\n                    pushAdd(n);\n                }\n                else if (isAncestorInSet(this.movedSet, n)) {\n                    pushAdd(n);\n                }\n                else {\n                    this.droppedSet.add(n);\n                }\n            }\n            let candidate = null;\n            while (addList.length) {\n                let node = null;\n                if (candidate) {\n                    const parentId = this.mirror.getId(candidate.value.parentNode);\n                    const nextId = getNextId(candidate.value);\n                    if (parentId !== -1 && nextId !== -1) {\n                        node = candidate;\n                    }\n                }\n                if (!node) {\n                    for (let index = addList.length - 1; index >= 0; index--) {\n                        const _node = addList.get(index);\n                        if (_node) {\n                            const parentId = this.mirror.getId(_node.value.parentNode);\n                            const nextId = getNextId(_node.value);\n                            if (parentId !== -1 && nextId !== -1) {\n                                node = _node;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (!node) {\n                    while (addList.head) {\n                        addList.removeNode(addList.head.value);\n                    }\n                    break;\n                }\n                candidate = node.previous;\n                addList.removeNode(node.value);\n                pushAdd(node.value);\n            }\n            const payload = {\n                texts: this.texts\n                    .map((text) => ({\n                    id: this.mirror.getId(text.node),\n                    value: text.value,\n                }))\n                    .filter((text) => this.mirror.has(text.id)),\n                attributes: this.attributes\n                    .map((attribute) => ({\n                    id: this.mirror.getId(attribute.node),\n                    attributes: attribute.attributes,\n                }))\n                    .filter((attribute) => this.mirror.has(attribute.id)),\n                removes: this.removes,\n                adds,\n            };\n            if (!payload.texts.length &&\n                !payload.attributes.length &&\n                !payload.removes.length &&\n                !payload.adds.length) {\n                return;\n            }\n            this.texts = [];\n            this.attributes = [];\n            this.removes = [];\n            this.addedSet = new Set();\n            this.movedSet = new Set();\n            this.droppedSet = new Set();\n            this.movedMap = {};\n            this.mutationCb(payload);\n        };\n        this.processMutation = (m) => {\n            if (isIgnored(m.target)) {\n                return;\n            }\n            switch (m.type) {\n                case 'characterData': {\n                    const value = m.target.textContent;\n                    if (!isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector) && value !== m.oldValue) {\n                        this.texts.push({\n                            value: needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextSelector, this.maskAllText) && value\n                                ? this.maskTextFn\n                                    ? this.maskTextFn(value)\n                                    : value.replace(/[\\S]/g, '*')\n                                : value,\n                            node: m.target,\n                        });\n                    }\n                    break;\n                }\n                case 'attributes': {\n                    const target = m.target;\n                    let value = m.target.getAttribute(m.attributeName);\n                    if (m.attributeName === 'value') {\n                        value = maskInputValue({\n                            input: target,\n                            maskInputSelector: this.maskInputSelector,\n                            unmaskInputSelector: this.unmaskInputSelector,\n                            maskInputOptions: this.maskInputOptions,\n                            tagName: m.target.tagName,\n                            type: m.target.getAttribute('type'),\n                            value,\n                            maskInputFn: this.maskInputFn,\n                        });\n                    }\n                    if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector) || value === m.oldValue) {\n                        return;\n                    }\n                    let item = this.attributes.find((a) => a.node === m.target);\n                    if (!item) {\n                        item = {\n                            node: m.target,\n                            attributes: {},\n                        };\n                        this.attributes.push(item);\n                    }\n                    if (m.attributeName === 'style') {\n                        const old = this.doc.createElement('span');\n                        if (m.oldValue) {\n                            old.setAttribute('style', m.oldValue);\n                        }\n                        if (item.attributes.style === undefined ||\n                            item.attributes.style === null) {\n                            item.attributes.style = {};\n                        }\n                        try {\n                            const styleObj = item.attributes.style;\n                            for (const pname of Array.from(target.style)) {\n                                const newValue = target.style.getPropertyValue(pname);\n                                const newPriority = target.style.getPropertyPriority(pname);\n                                if (newValue !== old.style.getPropertyValue(pname) ||\n                                    newPriority !== old.style.getPropertyPriority(pname)) {\n                                    if (newPriority === '') {\n                                        styleObj[pname] = newValue;\n                                    }\n                                    else {\n                                        styleObj[pname] = [newValue, newPriority];\n                                    }\n                                }\n                            }\n                            for (const pname of Array.from(old.style)) {\n                                if (target.style.getPropertyValue(pname) === '') {\n                                    styleObj[pname] = false;\n                                }\n                            }\n                        }\n                        catch (error) {\n                            console.warn('[rrweb] Error when parsing update to style attribute:', error);\n                        }\n                    }\n                    else {\n                        item.attributes[m.attributeName] = transformAttribute(this.doc, m.target.tagName, m.attributeName, value, this.maskAllText, this.maskTextFn);\n                    }\n                    break;\n                }\n                case 'childList': {\n                    m.addedNodes.forEach((n) => this.genAdds(n, m.target));\n                    m.removedNodes.forEach((n) => {\n                        const nodeId = this.mirror.getId(n);\n                        const parentId = isShadowRoot(m.target)\n                            ? this.mirror.getId(m.target.host)\n                            : this.mirror.getId(m.target);\n                        if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector) || isIgnored(n)) {\n                            return;\n                        }\n                        if (this.addedSet.has(n)) {\n                            deepDelete(this.addedSet, n);\n                            this.droppedSet.add(n);\n                        }\n                        else if (this.addedSet.has(m.target) && nodeId === -1) ;\n                        else if (isAncestorRemoved(m.target, this.mirror)) ;\n                        else if (this.movedSet.has(n) &&\n                            this.movedMap[moveKey(nodeId, parentId)]) {\n                            deepDelete(this.movedSet, n);\n                        }\n                        else {\n                            this.removes.push({\n                                parentId,\n                                id: nodeId,\n                                isShadow: isShadowRoot(m.target) ? true : undefined,\n                            });\n                        }\n                        this.mapRemoves.push(n);\n                    });\n                    break;\n                }\n            }\n        };\n        this.genAdds = (n, target) => {\n            if (target && isBlocked(target, this.blockClass, this.blockSelector, this.unblockSelector)) {\n                return;\n            }\n            if (isINode(n)) {\n                if (isIgnored(n)) {\n                    return;\n                }\n                this.movedSet.add(n);\n                let targetId = null;\n                if (target && isINode(target)) {\n                    targetId = target.__sn.id;\n                }\n                if (targetId) {\n                    this.movedMap[moveKey(n.__sn.id, targetId)] = true;\n                }\n            }\n            else {\n                this.addedSet.add(n);\n                this.droppedSet.delete(n);\n            }\n            if (!isBlocked(n, this.blockClass, this.blockSelector, this.unblockSelector))\n                n.childNodes.forEach((childN) => this.genAdds(childN));\n        };\n    }\n    init(options) {\n        [\n            'mutationCb',\n            'blockClass',\n            'blockSelector',\n            'unblockSelector',\n            'maskTextClass',\n            'maskTextSelector',\n            'unmaskTextSelector',\n            'maskInputSelector',\n            'unmaskInputSelector',\n            'inlineStylesheet',\n            'maskAllText',\n            'maskInputOptions',\n            'maskTextFn',\n            'maskInputFn',\n            'recordCanvas',\n            'inlineImages',\n            'slimDOMOptions',\n            'doc',\n            'mirror',\n            'iframeManager',\n            'shadowDomManager',\n            'canvasManager',\n        ].forEach((key) => {\n            this[key] = options[key];\n        });\n    }\n    freeze() {\n        this.frozen = true;\n        this.canvasManager.freeze();\n    }\n    unfreeze() {\n        this.frozen = false;\n        this.canvasManager.unfreeze();\n        this.emit();\n    }\n    isFrozen() {\n        return this.frozen;\n    }\n    lock() {\n        this.locked = true;\n        this.canvasManager.lock();\n    }\n    unlock() {\n        this.locked = false;\n        this.canvasManager.unlock();\n        this.emit();\n    }\n    reset() {\n        this.shadowDomManager.reset();\n        this.canvasManager.reset();\n    }\n}\nfunction deepDelete(addsSet, n) {\n    addsSet.delete(n);\n    n.childNodes.forEach((childN) => deepDelete(addsSet, childN));\n}\nfunction isParentRemoved(removes, n, mirror) {\n    const { parentNode } = n;\n    if (!parentNode) {\n        return false;\n    }\n    const parentId = mirror.getId(parentNode);\n    if (removes.some((r) => r.id === parentId)) {\n        return true;\n    }\n    return isParentRemoved(removes, parentNode, mirror);\n}\nfunction isAncestorInSet(set, n) {\n    const { parentNode } = n;\n    if (!parentNode) {\n        return false;\n    }\n    if (set.has(parentNode)) {\n        return true;\n    }\n    return isAncestorInSet(set, parentNode);\n}\n\nexport { MutationBuffer as default };\n", "const callbackWrapper = (cb) => {\n    const rrwebWrapped = (...rest) => {\n        try {\n            return cb(...rest);\n        }\n        catch (error) {\n            try {\n                error.__rrweb__ = true;\n            }\n            catch (_a) {\n            }\n            throw error;\n        }\n    };\n    return rrwebWrapped;\n};\n\nexport { callbackWrapper };\n", "import { hasInputMaskOptions, maskInputValue } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport { on, throttle, isBlocked, hookSetter, patch, isTouchEvent, getWindowHeight, getWindowWidth } from '../utils.js';\nimport { MouseInteractions, IncrementalSource } from '../types.js';\nimport MutationBuffer from './mutation.js';\nimport { callbackWrapper } from '../sentry/callbackWrapper.js';\n\nconst mutationBuffers = [];\nfunction getEventTarget(event) {\n    try {\n        if ('composedPath' in event) {\n            const path = event.composedPath();\n            if (path.length) {\n                return path[0];\n            }\n        }\n        else if ('path' in event && event.path.length) {\n            return event.path[0];\n        }\n    }\n    catch (_a) { }\n    return event && event.target;\n}\nfunction initMutationObserver(options, rootEl) {\n    var _a, _b;\n    const mutationBuffer = new MutationBuffer();\n    mutationBuffers.push(mutationBuffer);\n    mutationBuffer.init(options);\n    let mutationObserverCtor = window.MutationObserver ||\n        window.__rrMutationObserver;\n    const angularZoneSymbol = (_b = (_a = window === null || window === void 0 ? void 0 : window.Zone) === null || _a === void 0 ? void 0 : _a.__symbol__) === null || _b === void 0 ? void 0 : _b.call(_a, 'MutationObserver');\n    if (angularZoneSymbol &&\n        window[angularZoneSymbol]) {\n        mutationObserverCtor = window[angularZoneSymbol];\n    }\n    const observer = new mutationObserverCtor(callbackWrapper(mutationBuffer.processMutations.bind(mutationBuffer)));\n    observer.observe(rootEl, {\n        attributes: true,\n        attributeOldValue: true,\n        characterData: true,\n        characterDataOldValue: true,\n        childList: true,\n        subtree: true,\n    });\n    return observer;\n}\nfunction initMoveObserver({ mousemoveCb, sampling, doc, mirror, }) {\n    if (sampling.mousemove === false) {\n        return () => { };\n    }\n    const threshold = typeof sampling.mousemove === 'number' ? sampling.mousemove : 50;\n    const callbackThreshold = typeof sampling.mousemoveCallback === 'number'\n        ? sampling.mousemoveCallback\n        : 500;\n    let positions = [];\n    let timeBaseline;\n    const wrappedCb = throttle((source) => {\n        const totalOffset = Date.now() - timeBaseline;\n        callbackWrapper(mousemoveCb)(positions.map((p) => {\n            p.timeOffset -= totalOffset;\n            return p;\n        }), source);\n        positions = [];\n        timeBaseline = null;\n    }, callbackThreshold);\n    const updatePosition = throttle((evt) => {\n        const target = getEventTarget(evt);\n        const { clientX, clientY } = isTouchEvent(evt)\n            ? evt.changedTouches[0]\n            : evt;\n        if (!timeBaseline) {\n            timeBaseline = Date.now();\n        }\n        positions.push({\n            x: clientX,\n            y: clientY,\n            id: mirror.getId(target),\n            timeOffset: Date.now() - timeBaseline,\n        });\n        wrappedCb(typeof DragEvent !== 'undefined' && evt instanceof DragEvent\n            ? IncrementalSource.Drag\n            : evt instanceof MouseEvent\n                ? IncrementalSource.MouseMove\n                : IncrementalSource.TouchMove);\n    }, threshold, {\n        trailing: false,\n    });\n    const handlers = [\n        on('mousemove', callbackWrapper(updatePosition), doc),\n        on('touchmove', callbackWrapper(updatePosition), doc),\n        on('drag', callbackWrapper(updatePosition), doc),\n    ];\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initMouseInteractionObserver({ mouseInteractionCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {\n    if (sampling.mouseInteraction === false) {\n        return () => { };\n    }\n    const disableMap = sampling.mouseInteraction === true ||\n        sampling.mouseInteraction === undefined\n        ? {}\n        : sampling.mouseInteraction;\n    const handlers = [];\n    const getHandler = (eventKey) => {\n        return (event) => {\n            const target = getEventTarget(event);\n            if (isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n                return;\n            }\n            const e = isTouchEvent(event) ? event.changedTouches[0] : event;\n            if (!e) {\n                return;\n            }\n            const id = mirror.getId(target);\n            const { clientX, clientY } = e;\n            callbackWrapper(mouseInteractionCb)({\n                type: MouseInteractions[eventKey],\n                id,\n                x: clientX,\n                y: clientY,\n            });\n        };\n    };\n    Object.keys(MouseInteractions)\n        .filter((key) => Number.isNaN(Number(key)) &&\n        !key.endsWith('_Departed') &&\n        disableMap[key] !== false)\n        .forEach((eventKey) => {\n        const eventName = eventKey.toLowerCase();\n        const handler = callbackWrapper(getHandler(eventKey));\n        handlers.push(on(eventName, handler, doc));\n    });\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initScrollObserver({ scrollCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {\n    const updatePosition = throttle((evt) => {\n        const target = getEventTarget(evt);\n        if (!target || isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n            return;\n        }\n        const id = mirror.getId(target);\n        if (target === doc) {\n            const scrollEl = (doc.scrollingElement || doc.documentElement);\n            callbackWrapper(scrollCb)({\n                id,\n                x: scrollEl.scrollLeft,\n                y: scrollEl.scrollTop,\n            });\n        }\n        else {\n            callbackWrapper(scrollCb)({\n                id,\n                x: target.scrollLeft,\n                y: target.scrollTop,\n            });\n        }\n    }, sampling.scroll || 100);\n    return on('scroll', callbackWrapper(updatePosition), doc);\n}\nfunction initViewportResizeObserver({ viewportResizeCb, }) {\n    let lastH = -1;\n    let lastW = -1;\n    const updateDimension = throttle(() => {\n        const height = getWindowHeight();\n        const width = getWindowWidth();\n        if (lastH !== height || lastW !== width) {\n            callbackWrapper(viewportResizeCb)({\n                width: Number(width),\n                height: Number(height),\n            });\n            lastH = height;\n            lastW = width;\n        }\n    }, 200);\n    return on('resize', callbackWrapper(updateDimension), window);\n}\nfunction wrapEventWithUserTriggeredFlag(v, enable) {\n    const value = Object.assign({}, v);\n    if (!enable)\n        delete value.userTriggered;\n    return value;\n}\nconst INPUT_TAGS = ['INPUT', 'TEXTAREA', 'SELECT'];\nconst lastInputValueMap = new WeakMap();\nfunction initInputObserver({ inputCb, doc, mirror, blockClass, blockSelector, unblockSelector, ignoreClass, ignoreSelector, maskInputSelector, unmaskInputSelector, maskInputOptions, maskInputFn, sampling, userTriggeredOnInput, }) {\n    function eventHandler(event) {\n        let target = getEventTarget(event);\n        const userTriggered = event.isTrusted;\n        if (target && target.tagName === 'OPTION')\n            target = target.parentElement;\n        if (!target ||\n            !target.tagName ||\n            INPUT_TAGS.indexOf(target.tagName) < 0 ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n            return;\n        }\n        const type = target.type;\n        if (target.classList.contains(ignoreClass) ||\n            (ignoreSelector && target.matches(ignoreSelector))) {\n            return;\n        }\n        let text = target.value;\n        let isChecked = false;\n        if (type === 'radio' || type === 'checkbox') {\n            isChecked = target.checked;\n        }\n        else if (hasInputMaskOptions({\n            maskInputOptions,\n            maskInputSelector,\n            tagName: target.tagName,\n            type,\n        })) {\n            text = maskInputValue({\n                input: target,\n                maskInputOptions,\n                maskInputSelector,\n                unmaskInputSelector,\n                tagName: target.tagName,\n                type,\n                value: text,\n                maskInputFn,\n            });\n        }\n        cbWithDedup(target, callbackWrapper(wrapEventWithUserTriggeredFlag)({ text, isChecked, userTriggered }, userTriggeredOnInput));\n        const name = target.name;\n        if (type === 'radio' && name && isChecked) {\n            doc\n                .querySelectorAll(`input[type=\"radio\"][name=\"${name}\"]`)\n                .forEach((el) => {\n                if (el !== target) {\n                    cbWithDedup(el, callbackWrapper(wrapEventWithUserTriggeredFlag)({\n                        text: el.value,\n                        isChecked: !isChecked,\n                        userTriggered: false,\n                    }, userTriggeredOnInput));\n                }\n            });\n        }\n    }\n    function cbWithDedup(target, v) {\n        const lastInputValue = lastInputValueMap.get(target);\n        if (!lastInputValue ||\n            lastInputValue.text !== v.text ||\n            lastInputValue.isChecked !== v.isChecked) {\n            lastInputValueMap.set(target, v);\n            const id = mirror.getId(target);\n            inputCb(Object.assign(Object.assign({}, v), { id }));\n        }\n    }\n    const events = sampling.input === 'last' ? ['change'] : ['input', 'change'];\n    const handlers = events.map((eventName) => on(eventName, callbackWrapper(eventHandler), doc));\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');\n    const hookProperties = [\n        [HTMLInputElement.prototype, 'value'],\n        [HTMLInputElement.prototype, 'checked'],\n        [HTMLSelectElement.prototype, 'value'],\n        [HTMLTextAreaElement.prototype, 'value'],\n        [HTMLSelectElement.prototype, 'selectedIndex'],\n        [HTMLOptionElement.prototype, 'selected'],\n    ];\n    if (propertyDescriptor && propertyDescriptor.set) {\n        handlers.push(...hookProperties.map((p) => hookSetter(p[0], p[1], {\n            set() {\n                callbackWrapper(eventHandler)({ target: this });\n            },\n        })));\n    }\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction getNestedCSSRulePositions(rule) {\n    const positions = [];\n    function recurse(childRule, pos) {\n        if ((hasNestedCSSRule('CSSGroupingRule') &&\n            childRule.parentRule instanceof CSSGroupingRule) ||\n            (hasNestedCSSRule('CSSMediaRule') &&\n                childRule.parentRule instanceof CSSMediaRule) ||\n            (hasNestedCSSRule('CSSSupportsRule') &&\n                childRule.parentRule instanceof CSSSupportsRule) ||\n            (hasNestedCSSRule('CSSConditionRule') &&\n                childRule.parentRule instanceof CSSConditionRule)) {\n            const rules = Array.from(childRule.parentRule.cssRules);\n            const index = rules.indexOf(childRule);\n            pos.unshift(index);\n        }\n        else {\n            const rules = Array.from(childRule.parentStyleSheet.cssRules);\n            const index = rules.indexOf(childRule);\n            pos.unshift(index);\n        }\n        return pos;\n    }\n    return recurse(rule, positions);\n}\nfunction initStyleSheetObserver({ styleSheetRuleCb, mirror }, { win }) {\n    if (!win.CSSStyleSheet || !win.CSSStyleSheet.prototype) {\n        return () => { };\n    }\n    const insertRule = win.CSSStyleSheet.prototype.insertRule;\n    win.CSSStyleSheet.prototype.insertRule = new Proxy(insertRule, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [rule, index] = argumentsList;\n            const id = mirror.getId(thisArg.ownerNode);\n            if (id !== -1) {\n                styleSheetRuleCb({\n                    id,\n                    adds: [{ rule, index }],\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    const deleteRule = win.CSSStyleSheet.prototype.deleteRule;\n    win.CSSStyleSheet.prototype.deleteRule = new Proxy(deleteRule, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [index] = argumentsList;\n            const id = mirror.getId(thisArg.ownerNode);\n            if (id !== -1) {\n                styleSheetRuleCb({\n                    id,\n                    removes: [{ index }],\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    const supportedNestedCSSRuleTypes = {};\n    if (canMonkeyPatchNestedCSSRule('CSSGroupingRule')) {\n        supportedNestedCSSRuleTypes.CSSGroupingRule = win.CSSGroupingRule;\n    }\n    else {\n        if (canMonkeyPatchNestedCSSRule('CSSMediaRule')) {\n            supportedNestedCSSRuleTypes.CSSMediaRule = win.CSSMediaRule;\n        }\n        if (canMonkeyPatchNestedCSSRule('CSSConditionRule')) {\n            supportedNestedCSSRuleTypes.CSSConditionRule = win.CSSConditionRule;\n        }\n        if (canMonkeyPatchNestedCSSRule('CSSSupportsRule')) {\n            supportedNestedCSSRuleTypes.CSSSupportsRule = win.CSSSupportsRule;\n        }\n    }\n    const unmodifiedFunctions = {};\n    Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\n        unmodifiedFunctions[typeKey] = {\n            insertRule: type.prototype.insertRule,\n            deleteRule: type.prototype.deleteRule,\n        };\n        type.prototype.insertRule = new Proxy(unmodifiedFunctions[typeKey].insertRule, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [rule, index] = argumentsList;\n                const id = mirror.getId(thisArg.parentStyleSheet.ownerNode);\n                if (id !== -1) {\n                    styleSheetRuleCb({\n                        id,\n                        adds: [\n                            {\n                                rule,\n                                index: [\n                                    ...getNestedCSSRulePositions(thisArg),\n                                    index || 0,\n                                ],\n                            },\n                        ],\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n        type.prototype.deleteRule = new Proxy(unmodifiedFunctions[typeKey].deleteRule, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [index] = argumentsList;\n                const id = mirror.getId(thisArg.parentStyleSheet.ownerNode);\n                if (id !== -1) {\n                    styleSheetRuleCb({\n                        id,\n                        removes: [\n                            { index: [...getNestedCSSRulePositions(thisArg), index] },\n                        ],\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n    });\n    return callbackWrapper(() => {\n        win.CSSStyleSheet.prototype.insertRule = insertRule;\n        win.CSSStyleSheet.prototype.deleteRule = deleteRule;\n        Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\n            type.prototype.insertRule = unmodifiedFunctions[typeKey].insertRule;\n            type.prototype.deleteRule = unmodifiedFunctions[typeKey].deleteRule;\n        });\n    });\n}\nfunction initStyleDeclarationObserver({ styleDeclarationCb, mirror }, { win }) {\n    const setProperty = win.CSSStyleDeclaration.prototype.setProperty;\n    win.CSSStyleDeclaration.prototype.setProperty = new Proxy(setProperty, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            var _a, _b;\n            const [property, value, priority] = argumentsList;\n            const id = mirror.getId((_b = (_a = thisArg.parentRule) === null || _a === void 0 ? void 0 : _a.parentStyleSheet) === null || _b === void 0 ? void 0 : _b.ownerNode);\n            if (id !== -1) {\n                styleDeclarationCb({\n                    id,\n                    set: {\n                        property,\n                        value,\n                        priority,\n                    },\n                    index: getNestedCSSRulePositions(thisArg.parentRule),\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    const removeProperty = win.CSSStyleDeclaration.prototype.removeProperty;\n    win.CSSStyleDeclaration.prototype.removeProperty = new Proxy(removeProperty, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            var _a, _b;\n            const [property] = argumentsList;\n            const id = mirror.getId((_b = (_a = thisArg.parentRule) === null || _a === void 0 ? void 0 : _a.parentStyleSheet) === null || _b === void 0 ? void 0 : _b.ownerNode);\n            if (id !== -1) {\n                styleDeclarationCb({\n                    id,\n                    remove: {\n                        property,\n                    },\n                    index: getNestedCSSRulePositions(thisArg.parentRule),\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    return callbackWrapper(() => {\n        win.CSSStyleDeclaration.prototype.setProperty = setProperty;\n        win.CSSStyleDeclaration.prototype.removeProperty = removeProperty;\n    });\n}\nfunction initMediaInteractionObserver({ mediaInteractionCb, blockClass, blockSelector, unblockSelector, mirror, sampling, }) {\n    const handler = (type) => throttle(callbackWrapper((event) => {\n        const target = getEventTarget(event);\n        if (!target || isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n            return;\n        }\n        const { currentTime, volume, muted } = target;\n        mediaInteractionCb({\n            type,\n            id: mirror.getId(target),\n            currentTime,\n            volume,\n            muted,\n        });\n    }), sampling.media || 500);\n    const handlers = [\n        on('play', handler(0)),\n        on('pause', handler(1)),\n        on('seeked', handler(2)),\n        on('volumechange', handler(3)),\n    ];\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initFontObserver({ fontCb, doc }) {\n    const win = doc.defaultView;\n    if (!win) {\n        return () => { };\n    }\n    const handlers = [];\n    const fontMap = new WeakMap();\n    const originalFontFace = win.FontFace;\n    win.FontFace = function FontFace(family, source, descriptors) {\n        const fontFace = new originalFontFace(family, source, descriptors);\n        fontMap.set(fontFace, {\n            family,\n            buffer: typeof source !== 'string',\n            descriptors,\n            fontSource: typeof source === 'string'\n                ? source\n                :\n                    JSON.stringify(Array.from(new Uint8Array(source))),\n        });\n        return fontFace;\n    };\n    const restoreHandler = patch(doc.fonts, 'add', function (original) {\n        return function (fontFace) {\n            setTimeout(() => {\n                const p = fontMap.get(fontFace);\n                if (p) {\n                    fontCb(p);\n                    fontMap.delete(fontFace);\n                }\n            }, 0);\n            return original.apply(this, [fontFace]);\n        };\n    });\n    handlers.push(() => {\n        win.FontFace = originalFontFace;\n    });\n    handlers.push(restoreHandler);\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction mergeHooks(o, hooks) {\n    const { mutationCb, mousemoveCb, mouseInteractionCb, scrollCb, viewportResizeCb, inputCb, mediaInteractionCb, styleSheetRuleCb, styleDeclarationCb, canvasMutationCb, fontCb, } = o;\n    o.mutationCb = (...p) => {\n        if (hooks.mutation) {\n            hooks.mutation(...p);\n        }\n        mutationCb(...p);\n    };\n    o.mousemoveCb = (...p) => {\n        if (hooks.mousemove) {\n            hooks.mousemove(...p);\n        }\n        mousemoveCb(...p);\n    };\n    o.mouseInteractionCb = (...p) => {\n        if (hooks.mouseInteraction) {\n            hooks.mouseInteraction(...p);\n        }\n        mouseInteractionCb(...p);\n    };\n    o.scrollCb = (...p) => {\n        if (hooks.scroll) {\n            hooks.scroll(...p);\n        }\n        scrollCb(...p);\n    };\n    o.viewportResizeCb = (...p) => {\n        if (hooks.viewportResize) {\n            hooks.viewportResize(...p);\n        }\n        viewportResizeCb(...p);\n    };\n    o.inputCb = (...p) => {\n        if (hooks.input) {\n            hooks.input(...p);\n        }\n        inputCb(...p);\n    };\n    o.mediaInteractionCb = (...p) => {\n        if (hooks.mediaInteaction) {\n            hooks.mediaInteaction(...p);\n        }\n        mediaInteractionCb(...p);\n    };\n    o.styleSheetRuleCb = (...p) => {\n        if (hooks.styleSheetRule) {\n            hooks.styleSheetRule(...p);\n        }\n        styleSheetRuleCb(...p);\n    };\n    o.styleDeclarationCb = (...p) => {\n        if (hooks.styleDeclaration) {\n            hooks.styleDeclaration(...p);\n        }\n        styleDeclarationCb(...p);\n    };\n    o.canvasMutationCb = (...p) => {\n        if (hooks.canvasMutation) {\n            hooks.canvasMutation(...p);\n        }\n        canvasMutationCb(...p);\n    };\n    o.fontCb = (...p) => {\n        if (hooks.font) {\n            hooks.font(...p);\n        }\n        fontCb(...p);\n    };\n}\nfunction initObservers(o, hooks = {}) {\n    const currentWindow = o.doc.defaultView;\n    if (!currentWindow) {\n        return () => { };\n    }\n    mergeHooks(o, hooks);\n    const mutationObserver = initMutationObserver(o, o.doc);\n    const mousemoveHandler = initMoveObserver(o);\n    const mouseInteractionHandler = initMouseInteractionObserver(o);\n    const scrollHandler = initScrollObserver(o);\n    const viewportResizeHandler = initViewportResizeObserver(o);\n    const inputHandler = initInputObserver(o);\n    const mediaInteractionHandler = initMediaInteractionObserver(o);\n    const styleSheetObserver = initStyleSheetObserver(o, { win: currentWindow });\n    const styleDeclarationObserver = initStyleDeclarationObserver(o, {\n        win: currentWindow,\n    });\n    const fontObserver = o.collectFonts ? initFontObserver(o) : () => { };\n    const pluginHandlers = [];\n    for (const plugin of o.plugins) {\n        pluginHandlers.push(plugin.observer(plugin.callback, currentWindow, plugin.options));\n    }\n    return callbackWrapper(() => {\n        mutationBuffers.forEach((b) => b.reset());\n        mutationObserver.disconnect();\n        mousemoveHandler();\n        mouseInteractionHandler();\n        scrollHandler();\n        viewportResizeHandler();\n        inputHandler();\n        mediaInteractionHandler();\n        try {\n            styleSheetObserver();\n            styleDeclarationObserver();\n        }\n        catch (e) {\n        }\n        fontObserver();\n        pluginHandlers.forEach((h) => h());\n    });\n}\nfunction hasNestedCSSRule(prop) {\n    return typeof window[prop] !== 'undefined';\n}\nfunction canMonkeyPatchNestedCSSRule(prop) {\n    return Boolean(typeof window[prop] !== 'undefined' &&\n        window[prop].prototype &&\n        'insertRule' in window[prop].prototype &&\n        'deleteRule' in window[prop].prototype);\n}\n\nexport { INPUT_TAGS, initMutationObserver, initObservers, initScrollObserver, mutationBuffers };\n", "class IframeManager {\n    constructor(options) {\n        this.iframes = new WeakMap();\n        this.mutationCb = options.mutationCb;\n    }\n    addIframe(iframeEl) {\n        this.iframes.set(iframeEl, true);\n    }\n    addLoadListener(cb) {\n        this.loadListener = cb;\n    }\n    attachIframe(iframeEl, childSn) {\n        var _a;\n        this.mutationCb({\n            adds: [\n                {\n                    parentId: iframeEl.__sn.id,\n                    nextId: null,\n                    node: childSn,\n                },\n            ],\n            removes: [],\n            texts: [],\n            attributes: [],\n            isAttachIframe: true,\n        });\n        (_a = this.loadListener) === null || _a === void 0 ? void 0 : _a.call(this, iframeEl);\n    }\n}\n\nexport { IframeManager };\n", "import { initMutationObserver, initScrollObserver } from './observer.js';\nimport { patch } from '../utils.js';\n\nclass ShadowDomManager {\n    constructor(options) {\n        this.restorePatches = [];\n        this.mutationCb = options.mutationCb;\n        this.scrollCb = options.scrollCb;\n        this.bypassOptions = options.bypassOptions;\n        this.mirror = options.mirror;\n        const manager = this;\n        this.restorePatches.push(patch(HTMLElement.prototype, 'attachShadow', function (original) {\n            return function () {\n                const shadowRoot = original.apply(this, arguments);\n                if (this.shadowRoot)\n                    manager.addShadowRoot(this.shadowRoot, this.ownerDocument);\n                return shadowRoot;\n            };\n        }));\n    }\n    addShadowRoot(shadowRoot, doc) {\n        initMutationObserver(Object.assign(Object.assign({}, this.bypassOptions), { doc, mutationCb: this.mutationCb, mirror: this.mirror, shadowDomManager: this }), shadowRoot);\n        initScrollObserver(Object.assign(Object.assign({}, this.bypassOptions), { scrollCb: this.scrollCb, doc: shadowRoot, mirror: this.mirror }));\n    }\n    observeAttachShadow(iframeElement) {\n        if (iframeElement.contentWindow) {\n            const manager = this;\n            this.restorePatches.push(patch(iframeElement.contentWindow.HTMLElement.prototype, 'attachShadow', function (original) {\n                return function () {\n                    const shadowRoot = original.apply(this, arguments);\n                    if (this.shadowRoot)\n                        manager.addShadowRoot(this.shadowRoot, iframeElement.contentDocument);\n                    return shadowRoot;\n                };\n            }));\n        }\n    }\n    reset() {\n        this.restorePatches.forEach((restorePatch) => restorePatch());\n    }\n}\n\nexport { ShadowDomManager };\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nexport { __rest };\n", "import { CanvasContext } from '../../../types.js';\nimport { patch, isBlocked, hookSetter } from '../../../utils.js';\n\nfunction initCanvas2DMutationObserver(cb, win, blockClass, unblockSelector, blockSelector, mirror) {\n    const handlers = [];\n    const props2D = Object.getOwnPropertyNames(win.CanvasRenderingContext2D.prototype);\n    for (const prop of props2D) {\n        try {\n            if (typeof win.CanvasRenderingContext2D.prototype[prop] !== 'function') {\n                continue;\n            }\n            const restoreHandler = patch(win.CanvasRenderingContext2D.prototype, prop, function (original) {\n                return function (...args) {\n                    if (!isBlocked(this.canvas, blockClass, blockSelector, unblockSelector)) {\n                        setTimeout(() => {\n                            const recordArgs = [...args];\n                            if (prop === 'drawImage') {\n                                if (recordArgs[0] &&\n                                    recordArgs[0] instanceof HTMLCanvasElement) {\n                                    const canvas = recordArgs[0];\n                                    const ctx = canvas.getContext('2d');\n                                    let imgd = ctx === null || ctx === void 0 ? void 0 : ctx.getImageData(0, 0, canvas.width, canvas.height);\n                                    let pix = imgd === null || imgd === void 0 ? void 0 : imgd.data;\n                                    recordArgs[0] = JSON.stringify(pix);\n                                }\n                            }\n                            cb(this.canvas, {\n                                type: CanvasContext['2D'],\n                                property: prop,\n                                args: recordArgs,\n                            });\n                        }, 0);\n                    }\n                    return original.apply(this, args);\n                };\n            });\n            handlers.push(restoreHandler);\n        }\n        catch (_a) {\n            const hookHandler = hookSetter(win.CanvasRenderingContext2D.prototype, prop, {\n                set(v) {\n                    cb(this.canvas, {\n                        type: CanvasContext['2D'],\n                        property: prop,\n                        args: [v],\n                        setter: true,\n                    });\n                },\n            });\n            handlers.push(hookHandler);\n        }\n    }\n    return () => {\n        handlers.forEach((h) => h());\n    };\n}\n\nexport { initCanvas2DMutationObserver as default };\n", "import { patch, isBlocked } from '../../../utils.js';\n\nfunction initCanvasContextObserver(win, blockClass, blockSelector, unblockSelector) {\n    const handlers = [];\n    try {\n        const restoreHandler = patch(win.HTMLCanvasElement.prototype, 'getContext', function (original) {\n            return function (contextType, ...args) {\n                if (!isBlocked(this, blockClass, blockSelector, unblockSelector)) {\n                    if (!('__context' in this))\n                        this.__context = contextType;\n                }\n                return original.apply(this, [contextType, ...args]);\n            };\n        });\n        handlers.push(restoreHandler);\n    }\n    catch (_a) {\n        console.error('failed to patch HTMLCanvasElement.prototype.getContext');\n    }\n    return () => {\n        handlers.forEach((h) => h());\n    };\n}\n\nexport { initCanvasContextObserver as default };\n", "/*\n * base64-arraybuffer 1.0.2 <https://github.com/niklasvh/base64-arraybuffer>\n * Copyright (c) 2022 Niklas von Hertzen <https://hertzen.com>\n * Released under MIT License\n */\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nvar lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nvar encode = function (arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nvar decode = function (base64) {\n    var bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n\nexport { decode, encode };\n", "import { encode } from './../../../../../../ext/base64-arraybuffer/dist/base64-arraybuffer.es5.js';\n\nconst webGLVarMap = new Map();\nfunction variableListFor(ctx, ctor) {\n    let contextMap = webGLVarMap.get(ctx);\n    if (!contextMap) {\n        contextMap = new Map();\n        webGLVarMap.set(ctx, contextMap);\n    }\n    if (!contextMap.has(ctor)) {\n        contextMap.set(ctor, []);\n    }\n    return contextMap.get(ctor);\n}\nconst saveWebGLVar = (value, win, ctx) => {\n    if (!value ||\n        !(isInstanceOfWebGLObject(value, win) || typeof value === 'object'))\n        return;\n    const name = value.constructor.name;\n    const list = variableListFor(ctx, name);\n    let index = list.indexOf(value);\n    if (index === -1) {\n        index = list.length;\n        list.push(value);\n    }\n    return index;\n};\nfunction serializeArg(value, win, ctx) {\n    if (value instanceof Array) {\n        return value.map((arg) => serializeArg(arg, win, ctx));\n    }\n    else if (value === null) {\n        return value;\n    }\n    else if (value instanceof Float32Array ||\n        value instanceof Float64Array ||\n        value instanceof Int32Array ||\n        value instanceof Uint32Array ||\n        value instanceof Uint8Array ||\n        value instanceof Uint16Array ||\n        value instanceof Int16Array ||\n        value instanceof Int8Array ||\n        value instanceof Uint8ClampedArray) {\n        const name = value.constructor.name;\n        return {\n            rr_type: name,\n            args: [Object.values(value)],\n        };\n    }\n    else if (value instanceof ArrayBuffer) {\n        const name = value.constructor.name;\n        const base64 = encode(value);\n        return {\n            rr_type: name,\n            base64,\n        };\n    }\n    else if (value instanceof DataView) {\n        const name = value.constructor.name;\n        return {\n            rr_type: name,\n            args: [\n                serializeArg(value.buffer, win, ctx),\n                value.byteOffset,\n                value.byteLength,\n            ],\n        };\n    }\n    else if (value instanceof HTMLImageElement) {\n        const name = value.constructor.name;\n        const { src } = value;\n        return {\n            rr_type: name,\n            src,\n        };\n    }\n    else if (value instanceof ImageData) {\n        const name = value.constructor.name;\n        return {\n            rr_type: name,\n            args: [serializeArg(value.data, win, ctx), value.width, value.height],\n        };\n    }\n    else if (isInstanceOfWebGLObject(value, win) || typeof value === 'object') {\n        const name = value.constructor.name;\n        const index = saveWebGLVar(value, win, ctx);\n        return {\n            rr_type: name,\n            index: index,\n        };\n    }\n    return value;\n}\nconst serializeArgs = (args, win, ctx) => {\n    return [...args].map((arg) => serializeArg(arg, win, ctx));\n};\nconst isInstanceOfWebGLObject = (value, win) => {\n    const webGLConstructorNames = [\n        'WebGLActiveInfo',\n        'WebGLBuffer',\n        'WebGLFramebuffer',\n        'WebGLProgram',\n        'WebGLRenderbuffer',\n        'WebGLShader',\n        'WebGLShaderPrecisionFormat',\n        'WebGLTexture',\n        'WebGLUniformLocation',\n        'WebGLVertexArrayObject',\n        'WebGLVertexArrayObjectOES',\n    ];\n    const supportedWebGLConstructorNames = webGLConstructorNames.filter((name) => typeof win[name] === 'function');\n    return Boolean(supportedWebGLConstructorNames.find((name) => value instanceof win[name]));\n};\n\nexport { isInstanceOfWebGLObject, saveWebGLVar, serializeArg, serializeArgs, variableListFor };\n", "import { CanvasContext } from '../../../types.js';\nimport { patch, isBlocked, hookSetter } from '../../../utils.js';\nimport { saveWebGLVar, serializeArgs } from './serialize-args.js';\n\nfunction patchGLPrototype(prototype, type, cb, blockClass, unblockSelector, blockSelector, mirror, win) {\n    const handlers = [];\n    const props = Object.getOwnPropertyNames(prototype);\n    for (const prop of props) {\n        try {\n            if (typeof prototype[prop] !== 'function') {\n                continue;\n            }\n            const restoreHandler = patch(prototype, prop, function (original) {\n                return function (...args) {\n                    const result = original.apply(this, args);\n                    saveWebGLVar(result, win, prototype);\n                    if (!isBlocked(this.canvas, blockClass, blockSelector, unblockSelector)) {\n                        const id = mirror.getId(this.canvas);\n                        const recordArgs = serializeArgs([...args], win, prototype);\n                        const mutation = {\n                            type,\n                            property: prop,\n                            args: recordArgs,\n                        };\n                        cb(this.canvas, mutation);\n                    }\n                    return result;\n                };\n            });\n            handlers.push(restoreHandler);\n        }\n        catch (_a) {\n            const hookHandler = hookSetter(prototype, prop, {\n                set(v) {\n                    cb(this.canvas, {\n                        type,\n                        property: prop,\n                        args: [v],\n                        setter: true,\n                    });\n                },\n            });\n            handlers.push(hookHandler);\n        }\n    }\n    return handlers;\n}\nfunction initCanvasWebGLMutationObserver(cb, win, blockClass, blockSelector, unblockSelector, mirror) {\n    const handlers = [];\n    handlers.push(...patchGLPrototype(win.WebGLRenderingContext.prototype, CanvasContext.WebGL, cb, blockClass, blockSelector, unblockSelector, mirror, win));\n    if (typeof win.WebGL2RenderingContext !== 'undefined') {\n        handlers.push(...patchGLPrototype(win.WebGL2RenderingContext.prototype, CanvasContext.WebGL2, cb, blockClass, blockSelector, unblockSelector, mirror, win));\n    }\n    return () => {\n        handlers.forEach((h) => h());\n    };\n}\n\nexport { initCanvasWebGLMutationObserver as default };\n", "import { __rest } from './../../../../../../ext/tslib/tslib.es6.js';\nimport initCanvas2DMutationObserver from './2d.js';\nimport initCanvasContextObserver from './canvas.js';\nimport initCanvasWebGLMutationObserver from './webgl.js';\n\nclass CanvasManager {\n    reset() {\n        this.pendingCanvasMutations.clear();\n        this.resetObservers && this.resetObservers();\n    }\n    freeze() {\n        this.frozen = true;\n    }\n    unfreeze() {\n        this.frozen = false;\n    }\n    lock() {\n        this.locked = true;\n    }\n    unlock() {\n        this.locked = false;\n    }\n    constructor(options) {\n        this.pendingCanvasMutations = new Map();\n        this.rafStamps = { latestId: 0, invokeId: null };\n        this.frozen = false;\n        this.locked = false;\n        this.processMutation = function (target, mutation) {\n            const newFrame = this.rafStamps.invokeId &&\n                this.rafStamps.latestId !== this.rafStamps.invokeId;\n            if (newFrame || !this.rafStamps.invokeId)\n                this.rafStamps.invokeId = this.rafStamps.latestId;\n            if (!this.pendingCanvasMutations.has(target)) {\n                this.pendingCanvasMutations.set(target, []);\n            }\n            this.pendingCanvasMutations.get(target).push(mutation);\n        };\n        this.mutationCb = options.mutationCb;\n        this.mirror = options.mirror;\n        if (options.recordCanvas === true)\n            this.initCanvasMutationObserver(options.win, options.blockClass, options.blockSelector, options.unblockSelector);\n    }\n    initCanvasMutationObserver(win, blockClass, unblockSelector, blockSelector) {\n        this.startRAFTimestamping();\n        this.startPendingCanvasMutationFlusher();\n        const canvasContextReset = initCanvasContextObserver(win, blockClass, blockSelector, unblockSelector);\n        const canvas2DReset = initCanvas2DMutationObserver(this.processMutation.bind(this), win, blockClass, blockSelector, unblockSelector, this.mirror);\n        const canvasWebGL1and2Reset = initCanvasWebGLMutationObserver(this.processMutation.bind(this), win, blockClass, blockSelector, unblockSelector, this.mirror);\n        this.resetObservers = () => {\n            canvasContextReset();\n            canvas2DReset();\n            canvasWebGL1and2Reset();\n        };\n    }\n    startPendingCanvasMutationFlusher() {\n        requestAnimationFrame(() => this.flushPendingCanvasMutations());\n    }\n    startRAFTimestamping() {\n        const setLatestRAFTimestamp = (timestamp) => {\n            this.rafStamps.latestId = timestamp;\n            requestAnimationFrame(setLatestRAFTimestamp);\n        };\n        requestAnimationFrame(setLatestRAFTimestamp);\n    }\n    flushPendingCanvasMutations() {\n        this.pendingCanvasMutations.forEach((values, canvas) => {\n            const id = this.mirror.getId(canvas);\n            this.flushPendingCanvasMutationFor(canvas, id);\n        });\n        requestAnimationFrame(() => this.flushPendingCanvasMutations());\n    }\n    flushPendingCanvasMutationFor(canvas, id) {\n        if (this.frozen || this.locked) {\n            return;\n        }\n        const valuesWithType = this.pendingCanvasMutations.get(canvas);\n        if (!valuesWithType || id === -1)\n            return;\n        const values = valuesWithType.map((value) => {\n            const rest = __rest(value, [\"type\"]);\n            return rest;\n        });\n        const { type } = valuesWithType[0];\n        this.mutationCb({ id, type, commands: values });\n        this.pendingCanvasMutations.delete(canvas);\n    }\n}\n\nexport { CanvasManager };\n", "import { snapshot } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport { initObservers, mutationBuffers } from './observer.js';\nimport { polyfill, on, createMirror, getWindowWidth, getWindowHeight, isIframeINode, hasShadowRoot } from '../utils.js';\nimport { EventType, IncrementalSource } from '../types.js';\nimport { IframeManager } from './iframe-manager.js';\nimport { ShadowDomManager } from './shadow-dom-manager.js';\nimport { CanvasManager } from './observers/canvas/canvas-manager.js';\nimport { callbackWrapper } from '../sentry/callbackWrapper.js';\n\nfunction wrapEvent(e) {\n    return Object.assign(Object.assign({}, e), { timestamp: Date.now() });\n}\nlet wrappedEmit;\nlet takeFullSnapshot;\nconst mirror = createMirror();\nfunction record(options = {}) {\n    const { emit, checkoutEveryNms, checkoutEveryNth, blockClass = 'rr-block', blockSelector = null, unblockSelector = null, ignoreClass = 'rr-ignore', ignoreSelector = null, maskTextClass = 'rr-mask', maskTextSelector = null, maskInputSelector = null, unmaskTextSelector = null, unmaskInputSelector = null, inlineStylesheet = true, maskAllText = false, maskAllInputs, maskInputOptions: _maskInputOptions, slimDOMOptions: _slimDOMOptions, maskInputFn, maskTextFn, hooks, packFn, sampling = {}, mousemoveWait, recordCanvas = false, userTriggeredOnInput = false, collectFonts = false, inlineImages = false, plugins, keepIframeSrcFn = () => false, } = options;\n    if (!emit) {\n        throw new Error('emit function is required');\n    }\n    if (mousemoveWait !== undefined && sampling.mousemove === undefined) {\n        sampling.mousemove = mousemoveWait;\n    }\n    const maskInputOptions = maskAllInputs === true\n        ? {\n            color: true,\n            date: true,\n            'datetime-local': true,\n            email: true,\n            month: true,\n            number: true,\n            range: true,\n            search: true,\n            tel: true,\n            text: true,\n            time: true,\n            url: true,\n            week: true,\n            textarea: true,\n            select: true,\n            password: true,\n        }\n        : _maskInputOptions !== undefined\n            ? _maskInputOptions\n            : { password: true };\n    const slimDOMOptions = _slimDOMOptions === true || _slimDOMOptions === 'all'\n        ? {\n            script: true,\n            comment: true,\n            headFavicon: true,\n            headWhitespace: true,\n            headMetaSocial: true,\n            headMetaRobots: true,\n            headMetaHttpEquiv: true,\n            headMetaVerification: true,\n            headMetaAuthorship: _slimDOMOptions === 'all',\n            headMetaDescKeywords: _slimDOMOptions === 'all',\n        }\n        : _slimDOMOptions\n            ? _slimDOMOptions\n            : {};\n    polyfill();\n    let lastFullSnapshotEvent;\n    let incrementalSnapshotCount = 0;\n    const eventProcessor = (e) => {\n        for (const plugin of plugins || []) {\n            if (plugin.eventProcessor) {\n                e = plugin.eventProcessor(e);\n            }\n        }\n        if (packFn) {\n            e = packFn(e);\n        }\n        return e;\n    };\n    wrappedEmit = (e, isCheckout) => {\n        var _a;\n        if (((_a = mutationBuffers[0]) === null || _a === void 0 ? void 0 : _a.isFrozen()) &&\n            e.type !== EventType.FullSnapshot &&\n            !(e.type === EventType.IncrementalSnapshot &&\n                e.data.source === IncrementalSource.Mutation)) {\n            mutationBuffers.forEach((buf) => buf.unfreeze());\n        }\n        emit(eventProcessor(e), isCheckout);\n        if (e.type === EventType.FullSnapshot) {\n            lastFullSnapshotEvent = e;\n            incrementalSnapshotCount = 0;\n        }\n        else if (e.type === EventType.IncrementalSnapshot) {\n            if (e.data.source === IncrementalSource.Mutation &&\n                e.data.isAttachIframe) {\n                return;\n            }\n            incrementalSnapshotCount++;\n            const exceedCount = checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;\n            const exceedTime = checkoutEveryNms &&\n                e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;\n            if (exceedCount || exceedTime) {\n                takeFullSnapshot(true);\n            }\n        }\n    };\n    const wrappedMutationEmit = (m) => {\n        wrappedEmit(wrapEvent({\n            type: EventType.IncrementalSnapshot,\n            data: Object.assign({ source: IncrementalSource.Mutation }, m),\n        }));\n    };\n    const wrappedScrollEmit = (p) => wrappedEmit(wrapEvent({\n        type: EventType.IncrementalSnapshot,\n        data: Object.assign({ source: IncrementalSource.Scroll }, p),\n    }));\n    const wrappedCanvasMutationEmit = (p) => wrappedEmit(wrapEvent({\n        type: EventType.IncrementalSnapshot,\n        data: Object.assign({ source: IncrementalSource.CanvasMutation }, p),\n    }));\n    const iframeManager = new IframeManager({\n        mutationCb: wrappedMutationEmit,\n    });\n    const canvasManager = new CanvasManager({\n        recordCanvas,\n        mutationCb: wrappedCanvasMutationEmit,\n        win: window,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        mirror,\n    });\n    const shadowDomManager = new ShadowDomManager({\n        mutationCb: wrappedMutationEmit,\n        scrollCb: wrappedScrollEmit,\n        bypassOptions: {\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            maskInputSelector,\n            unmaskInputSelector,\n            inlineStylesheet,\n            maskAllText,\n            maskInputOptions,\n            maskTextFn,\n            maskInputFn,\n            recordCanvas,\n            inlineImages,\n            sampling,\n            slimDOMOptions,\n            iframeManager,\n            canvasManager,\n        },\n        mirror,\n    });\n    takeFullSnapshot = (isCheckout = false) => {\n        var _a, _b, _c, _d;\n        wrappedEmit(wrapEvent({\n            type: EventType.Meta,\n            data: {\n                href: window.location.href,\n                width: getWindowWidth(),\n                height: getWindowHeight(),\n            },\n        }), isCheckout);\n        mutationBuffers.forEach((buf) => buf.lock());\n        const [node, idNodeMap] = snapshot(document, {\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            maskInputSelector,\n            unmaskInputSelector,\n            inlineStylesheet,\n            maskAllText,\n            maskAllInputs: maskInputOptions,\n            maskTextFn,\n            slimDOM: slimDOMOptions,\n            recordCanvas,\n            inlineImages,\n            onSerialize: (n) => {\n                if (isIframeINode(n)) {\n                    iframeManager.addIframe(n);\n                }\n                if (hasShadowRoot(n)) {\n                    shadowDomManager.addShadowRoot(n.shadowRoot, document);\n                }\n            },\n            onIframeLoad: (iframe, childSn) => {\n                iframeManager.attachIframe(iframe, childSn);\n                shadowDomManager.observeAttachShadow(iframe);\n            },\n            keepIframeSrcFn,\n        });\n        if (!node) {\n            return console.warn('Failed to snapshot the document');\n        }\n        mirror.map = idNodeMap;\n        wrappedEmit(wrapEvent({\n            type: EventType.FullSnapshot,\n            data: {\n                node,\n                initialOffset: {\n                    left: window.pageXOffset !== undefined\n                        ? window.pageXOffset\n                        : (document === null || document === void 0 ? void 0 : document.documentElement.scrollLeft) ||\n                            ((_b = (_a = document === null || document === void 0 ? void 0 : document.body) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.scrollLeft) ||\n                            (document === null || document === void 0 ? void 0 : document.body.scrollLeft) ||\n                            0,\n                    top: window.pageYOffset !== undefined\n                        ? window.pageYOffset\n                        : (document === null || document === void 0 ? void 0 : document.documentElement.scrollTop) ||\n                            ((_d = (_c = document === null || document === void 0 ? void 0 : document.body) === null || _c === void 0 ? void 0 : _c.parentElement) === null || _d === void 0 ? void 0 : _d.scrollTop) ||\n                            (document === null || document === void 0 ? void 0 : document.body.scrollTop) ||\n                            0,\n                },\n            },\n        }));\n        mutationBuffers.forEach((buf) => buf.unlock());\n    };\n    try {\n        const handlers = [];\n        handlers.push(on('DOMContentLoaded', () => {\n            wrappedEmit(wrapEvent({\n                type: EventType.DomContentLoaded,\n                data: {},\n            }));\n        }));\n        const observe = (doc) => {\n            var _a;\n            return callbackWrapper(initObservers)({\n                mutationCb: wrappedMutationEmit,\n                mousemoveCb: (positions, source) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source,\n                        positions,\n                    },\n                })),\n                mouseInteractionCb: (d) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.MouseInteraction }, d),\n                })),\n                scrollCb: wrappedScrollEmit,\n                viewportResizeCb: (d) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.ViewportResize }, d),\n                })),\n                inputCb: (v) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.Input }, v),\n                })),\n                mediaInteractionCb: (p) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.MediaInteraction }, p),\n                })),\n                styleSheetRuleCb: (r) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.StyleSheetRule }, r),\n                })),\n                styleDeclarationCb: (r) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.StyleDeclaration }, r),\n                })),\n                canvasMutationCb: wrappedCanvasMutationEmit,\n                fontCb: (p) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.Font }, p),\n                })),\n                blockClass,\n                ignoreClass,\n                ignoreSelector,\n                maskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n                maskInputSelector,\n                unmaskInputSelector,\n                maskInputOptions,\n                inlineStylesheet,\n                sampling,\n                recordCanvas,\n                inlineImages,\n                userTriggeredOnInput,\n                collectFonts,\n                doc,\n                maskAllText,\n                maskInputFn,\n                maskTextFn,\n                blockSelector,\n                unblockSelector,\n                slimDOMOptions,\n                mirror,\n                iframeManager,\n                shadowDomManager,\n                canvasManager,\n                plugins: ((_a = plugins === null || plugins === void 0 ? void 0 : plugins.filter((p) => p.observer)) === null || _a === void 0 ? void 0 : _a.map((p) => ({\n                    observer: p.observer,\n                    options: p.options,\n                    callback: (payload) => wrappedEmit(wrapEvent({\n                        type: EventType.Plugin,\n                        data: {\n                            plugin: p.name,\n                            payload,\n                        },\n                    })),\n                }))) || [],\n            }, hooks);\n        };\n        iframeManager.addLoadListener((iframeEl) => {\n            try {\n                handlers.push(observe(iframeEl.contentDocument));\n            }\n            catch (error) {\n                console.warn(error);\n            }\n        });\n        const init = () => {\n            takeFullSnapshot();\n            handlers.push(observe(document));\n        };\n        if (document.readyState === 'interactive' ||\n            document.readyState === 'complete') {\n            init();\n        }\n        else {\n            handlers.push(on('load', () => {\n                wrappedEmit(wrapEvent({\n                    type: EventType.Load,\n                    data: {},\n                }));\n                init();\n            }, window));\n        }\n        return () => {\n            handlers.forEach((h) => h());\n        };\n    }\n    catch (error) {\n        console.warn(error);\n    }\n}\nrecord.addCustomEvent = (tag, payload) => {\n    if (!wrappedEmit) {\n        throw new Error('please add custom event after start recording');\n    }\n    wrappedEmit(wrapEvent({\n        type: EventType.Custom,\n        data: {\n            tag,\n            payload,\n        },\n    }));\n};\nrecord.freezePage = () => {\n    mutationBuffers.forEach((buf) => buf.freeze());\n};\nrecord.takeFullSnapshot = (isCheckout) => {\n    if (!takeFullSnapshot) {\n        throw new Error('please take full snapshot after start recording');\n    }\n    takeFullSnapshot(isCheckout);\n};\nrecord.mirror = mirror;\n\nexport { record as default };\n", "import type { PerformanceNavigationTiming, PerformancePaintTiming } from '../types';\n\nconst NAVIGATION_ENTRY_KEYS: Array<keyof PerformanceNavigationTiming> = [\n  'name',\n  'type',\n  'startTime',\n  'transferSize',\n  'duration',\n];\n\nfunction isNavigationEntryEqual(a: PerformanceNavigationTiming) {\n  return function (b: PerformanceNavigationTiming) {\n    return NAVIGATION_ENTRY_KEYS.every(key => a[key] === b[key]);\n  };\n}\n\n/**\n * There are some difficulties diagnosing why there are duplicate navigation\n * entries. We've witnessed several intermittent results:\n * - duplicate entries have duration = 0\n * - duplicate entries are the same object reference\n * - none of the above\n *\n * Compare the values of several keys to determine if the entries are duplicates or not.\n */\n// TODO (high-prio): Figure out wth is returned here\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function dedupePerformanceEntries(\n  currentList: PerformanceEntryList,\n  newList: PerformanceEntryList,\n): PerformanceEntryList {\n  // Partition `currentList` into 3 different lists based on entryType\n  const [existingNavigationEntries, existingLcpEntries, existingEntries] = currentList.reduce(\n    (acc: [PerformanceNavigationTiming[], PerformancePaintTiming[], PerformanceEntryList], entry) => {\n      if (entry.entryType === 'navigation') {\n        acc[0].push(entry as PerformanceNavigationTiming);\n      } else if (entry.entryType === 'largest-contentful-paint') {\n        acc[1].push(entry as PerformancePaintTiming);\n      } else {\n        acc[2].push(entry);\n      }\n      return acc;\n    },\n    [[], [], []],\n  );\n\n  const newEntries: PerformanceEntryList = [];\n  const newNavigationEntries: PerformanceNavigationTiming[] = [];\n  let newLcpEntry: PerformancePaintTiming | undefined = existingLcpEntries.length\n    ? existingLcpEntries[existingLcpEntries.length - 1] // Take the last element as list is sorted\n    : undefined;\n\n  newList.forEach(entry => {\n    if (entry.entryType === 'largest-contentful-paint') {\n      // We want the latest LCP event only\n      if (!newLcpEntry || newLcpEntry.startTime < entry.startTime) {\n        newLcpEntry = entry;\n      }\n      return;\n    }\n\n    if (entry.entryType === 'navigation') {\n      const navigationEntry = entry as PerformanceNavigationTiming;\n\n      // Check if the navigation entry is contained in currentList or newList\n      if (\n        // Ignore any navigation entries with duration 0, as they are likely duplicates\n        entry.duration > 0 &&\n        // Ensure new entry does not already exist in existing entries\n        !existingNavigationEntries.find(isNavigationEntryEqual(navigationEntry)) &&\n        // Ensure new entry does not already exist in new list of navigation entries\n        !newNavigationEntries.find(isNavigationEntryEqual(navigationEntry))\n      ) {\n        newNavigationEntries.push(navigationEntry);\n      }\n\n      // Otherwise this navigation entry is considered a duplicate and is thrown away\n      return;\n    }\n\n    newEntries.push(entry);\n  });\n\n  // Re-combine and sort by startTime\n  return [\n    ...(newLcpEntry ? [newLcpEntry] : []),\n    ...existingNavigationEntries,\n    ...existingEntries,\n    ...newEntries,\n    ...newNavigationEntries,\n  ].sort((a, b) => a.startTime - b.startTime);\n}\n", "import type { AllPerformanceEntry, ReplayContainer } from '../types';\nimport { dedupePerformanceEntries } from '../util/dedupePerformanceEntries';\n\n/**\n * Sets up a PerformanceObserver to listen to all performance entry types.\n */\nexport function setupPerformanceObserver(replay: ReplayContainer): PerformanceObserver {\n  const performanceObserverHandler = (list: PerformanceObserverEntryList): void => {\n    // For whatever reason the observer was returning duplicate navigation\n    // entries (the other entry types were not duplicated).\n    const newPerformanceEntries = dedupePerformanceEntries(\n      replay.performanceEvents,\n      list.getEntries() as AllPerformanceEntry[],\n    );\n    replay.performanceEvents = newPerformanceEntries;\n  };\n\n  const performanceObserver = new PerformanceObserver(performanceObserverHandler);\n\n  [\n    'element',\n    'event',\n    'first-input',\n    'largest-contentful-paint',\n    'layout-shift',\n    'longtask',\n    'navigation',\n    'paint',\n    'resource',\n  ].forEach(type => {\n    try {\n      performanceObserver.observe({\n        type,\n        buffered: true,\n      });\n    } catch {\n      // This can throw if an entry type is not supported in the browser.\n      // Ignore these errors.\n    }\n  });\n\n  return performanceObserver;\n}\n", "export default `/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\nfunction t(t){let e=t.length;for(;--e>=0;)t[e]=0}const e=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),a=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),n=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),s=new Array(576);t(s);const r=new Array(60);t(r);const o=new Array(512);t(o);const l=new Array(256);t(l);const h=new Array(29);t(h);const d=new Array(30);function _(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}let f,c,u;function w(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}t(d);const m=t=>t<256?o[t]:o[256+(t>>>7)],b=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},g=(t,e,a)=>{t.bi_valid>16-a?(t.bi_buf|=e<<t.bi_valid&65535,b(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=a-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)},p=(t,e,a)=>{g(t,a[2*e],a[2*e+1])},k=(t,e)=>{let a=0;do{a|=1&t,t>>>=1,a<<=1}while(--e>0);return a>>>1},v=(t,e,a)=>{const i=new Array(16);let n,s,r=0;for(n=1;n<=15;n++)r=r+a[n-1]<<1,i[n]=r;for(s=0;s<=e;s++){let e=t[2*s+1];0!==e&&(t[2*s]=k(i[e]++,e))}},y=t=>{let e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},x=t=>{t.bi_valid>8?b(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},z=(t,e,a,i)=>{const n=2*e,s=2*a;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[a]},A=(t,e,a)=>{const i=t.heap[a];let n=a<<1;for(;n<=t.heap_len&&(n<t.heap_len&&z(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!z(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i},E=(t,i,n)=>{let s,r,o,_,f=0;if(0!==t.sym_next)do{s=255&t.pending_buf[t.sym_buf+f++],s+=(255&t.pending_buf[t.sym_buf+f++])<<8,r=t.pending_buf[t.sym_buf+f++],0===s?p(t,r,i):(o=l[r],p(t,o+256+1,i),_=e[o],0!==_&&(r-=h[o],g(t,r,_)),s--,o=m(s),p(t,o,n),_=a[o],0!==_&&(s-=d[o],g(t,s,_)))}while(f<t.sym_next);p(t,256,i)},R=(t,e)=>{const a=e.dyn_tree,i=e.stat_desc.static_tree,n=e.stat_desc.has_stree,s=e.stat_desc.elems;let r,o,l,h=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<s;r++)0!==a[2*r]?(t.heap[++t.heap_len]=h=r,t.depth[r]=0):a[2*r+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=h<2?++h:0,a[2*l]=1,t.depth[l]=0,t.opt_len--,n&&(t.static_len-=i[2*l+1]);for(e.max_code=h,r=t.heap_len>>1;r>=1;r--)A(t,a,r);l=s;do{r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],A(t,a,1),o=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=o,a[2*l]=a[2*r]+a[2*o],t.depth[l]=(t.depth[r]>=t.depth[o]?t.depth[r]:t.depth[o])+1,a[2*r+1]=a[2*o+1]=l,t.heap[1]=l++,A(t,a,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const a=e.dyn_tree,i=e.max_code,n=e.stat_desc.static_tree,s=e.stat_desc.has_stree,r=e.stat_desc.extra_bits,o=e.stat_desc.extra_base,l=e.stat_desc.max_length;let h,d,_,f,c,u,w=0;for(f=0;f<=15;f++)t.bl_count[f]=0;for(a[2*t.heap[t.heap_max]+1]=0,h=t.heap_max+1;h<573;h++)d=t.heap[h],f=a[2*a[2*d+1]+1]+1,f>l&&(f=l,w++),a[2*d+1]=f,d>i||(t.bl_count[f]++,c=0,d>=o&&(c=r[d-o]),u=a[2*d],t.opt_len+=u*(f+c),s&&(t.static_len+=u*(n[2*d+1]+c)));if(0!==w){do{for(f=l-1;0===t.bl_count[f];)f--;t.bl_count[f]--,t.bl_count[f+1]+=2,t.bl_count[l]--,w-=2}while(w>0);for(f=l;0!==f;f--)for(d=t.bl_count[f];0!==d;)_=t.heap[--h],_>i||(a[2*_+1]!==f&&(t.opt_len+=(f-a[2*_+1])*a[2*_],a[2*_+1]=f),d--)}})(t,e),v(a,h,t.bl_count)},Z=(t,e,a)=>{let i,n,s=-1,r=e[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=r,r=e[2*(i+1)+1],++o<l&&n===r||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[32]++):o<=10?t.bl_tree[34]++:t.bl_tree[36]++,o=0,s=n,0===r?(l=138,h=3):n===r?(l=6,h=3):(l=7,h=4))},U=(t,e,a)=>{let i,n,s=-1,r=e[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),i=0;i<=a;i++)if(n=r,r=e[2*(i+1)+1],!(++o<l&&n===r)){if(o<h)do{p(t,n,t.bl_tree)}while(0!=--o);else 0!==n?(n!==s&&(p(t,n,t.bl_tree),o--),p(t,16,t.bl_tree),g(t,o-3,2)):o<=10?(p(t,17,t.bl_tree),g(t,o-3,3)):(p(t,18,t.bl_tree),g(t,o-11,7));o=0,s=n,0===r?(l=138,h=3):n===r?(l=6,h=3):(l=7,h=4)}};let S=!1;const D=(t,e,a,i)=>{g(t,0+(i?1:0),3),x(t),b(t,a),b(t,~a),a&&t.pending_buf.set(t.window.subarray(e,e+a),t.pending),t.pending+=a};var T=(t,e,a,i)=>{let o,l,h=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),R(t,t.l_desc),R(t,t.d_desc),h=(t=>{let e;for(Z(t,t.dyn_ltree,t.l_desc.max_code),Z(t,t.dyn_dtree,t.d_desc.max_code),R(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*n[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),o=t.opt_len+3+7>>>3,l=t.static_len+3+7>>>3,l<=o&&(o=l)):o=l=a+5,a+4<=o&&-1!==e?D(t,e,a,i):4===t.strategy||l===o?(g(t,2+(i?1:0),3),E(t,s,r)):(g(t,4+(i?1:0),3),((t,e,a,i)=>{let s;for(g(t,e-257,5),g(t,a-1,5),g(t,i-4,4),s=0;s<i;s++)g(t,t.bl_tree[2*n[s]+1],3);U(t,t.dyn_ltree,e-1),U(t,t.dyn_dtree,a-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,h+1),E(t,t.dyn_ltree,t.dyn_dtree)),y(t),i&&x(t)},O={_tr_init:t=>{S||((()=>{let t,n,w,m,b;const g=new Array(16);for(w=0,m=0;m<28;m++)for(h[m]=w,t=0;t<1<<e[m];t++)l[w++]=m;for(l[w-1]=m,b=0,m=0;m<16;m++)for(d[m]=b,t=0;t<1<<a[m];t++)o[b++]=m;for(b>>=7;m<30;m++)for(d[m]=b<<7,t=0;t<1<<a[m]-7;t++)o[256+b++]=m;for(n=0;n<=15;n++)g[n]=0;for(t=0;t<=143;)s[2*t+1]=8,t++,g[8]++;for(;t<=255;)s[2*t+1]=9,t++,g[9]++;for(;t<=279;)s[2*t+1]=7,t++,g[7]++;for(;t<=287;)s[2*t+1]=8,t++,g[8]++;for(v(s,287,g),t=0;t<30;t++)r[2*t+1]=5,r[2*t]=k(t,5);f=new _(s,e,257,286,15),c=new _(r,a,0,30,15),u=new _(new Array(0),i,0,19,7)})(),S=!0),t.l_desc=new w(t.dyn_ltree,f),t.d_desc=new w(t.dyn_dtree,c),t.bl_desc=new w(t.bl_tree,u),t.bi_buf=0,t.bi_valid=0,y(t)},_tr_stored_block:D,_tr_flush_block:T,_tr_tally:(t,e,a)=>(t.pending_buf[t.sym_buf+t.sym_next++]=e,t.pending_buf[t.sym_buf+t.sym_next++]=e>>8,t.pending_buf[t.sym_buf+t.sym_next++]=a,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(l[a]+256+1)]++,t.dyn_dtree[2*m(e)]++),t.sym_next===t.sym_end),_tr_align:t=>{g(t,2,3),p(t,256,s),(t=>{16===t.bi_valid?(b(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}};var F=(t,e,a,i)=>{let n=65535&t|0,s=t>>>16&65535|0,r=0;for(;0!==a;){r=a>2e3?2e3:a,a-=r;do{n=n+e[i++]|0,s=s+n|0}while(--r);n%=65521,s%=65521}return n|s<<16|0};const L=new Uint32Array((()=>{let t,e=[];for(var a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e})());var N=(t,e,a,i)=>{const n=L,s=i+a;t^=-1;for(let a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t},I={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"},B={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:C,_tr_stored_block:H,_tr_flush_block:M,_tr_tally:j,_tr_align:K}=O,{Z_NO_FLUSH:P,Z_PARTIAL_FLUSH:Y,Z_FULL_FLUSH:G,Z_FINISH:X,Z_BLOCK:W,Z_OK:q,Z_STREAM_END:J,Z_STREAM_ERROR:Q,Z_DATA_ERROR:V,Z_BUF_ERROR:$,Z_DEFAULT_COMPRESSION:tt,Z_FILTERED:et,Z_HUFFMAN_ONLY:at,Z_RLE:it,Z_FIXED:nt,Z_DEFAULT_STRATEGY:st,Z_UNKNOWN:rt,Z_DEFLATED:ot}=B,lt=(t,e)=>(t.msg=I[e],e),ht=t=>2*t-(t>4?9:0),dt=t=>{let e=t.length;for(;--e>=0;)t[e]=0},_t=t=>{let e,a,i,n=t.w_size;e=t.hash_size,i=e;do{a=t.head[--i],t.head[i]=a>=n?a-n:0}while(--e);e=n,i=e;do{a=t.prev[--i],t.prev[i]=a>=n?a-n:0}while(--e)};let ft=(t,e,a)=>(e<<t.hash_shift^a)&t.hash_mask;const ct=t=>{const e=t.state;let a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+a),t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))},ut=(t,e)=>{M(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,ct(t.strm)},wt=(t,e)=>{t.pending_buf[t.pending++]=e},mt=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},bt=(t,e,a,i)=>{let n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,e.set(t.input.subarray(t.next_in,t.next_in+n),a),1===t.state.wrap?t.adler=F(t.adler,e,n,a):2===t.state.wrap&&(t.adler=N(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)},gt=(t,e)=>{let a,i,n=t.max_chain_length,s=t.strstart,r=t.prev_length,o=t.nice_match;const l=t.strstart>t.w_size-262?t.strstart-(t.w_size-262):0,h=t.window,d=t.w_mask,_=t.prev,f=t.strstart+258;let c=h[s+r-1],u=h[s+r];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(a=e,h[a+r]===u&&h[a+r-1]===c&&h[a]===h[s]&&h[++a]===h[s+1]){s+=2,a++;do{}while(h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&s<f);if(i=258-(f-s),s=f-258,i>r){if(t.match_start=e,r=i,i>=o)break;c=h[s+r-1],u=h[s+r]}}}while((e=_[e&d])>l&&0!=--n);return r<=t.lookahead?r:t.lookahead},pt=t=>{const e=t.w_size;let a,i,n;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-262)&&(t.window.set(t.window.subarray(e,e+e-i),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,t.insert>t.strstart&&(t.insert=t.strstart),_t(t),i+=e),0===t.strm.avail_in)break;if(a=bt(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=a,t.lookahead+t.insert>=3)for(n=t.strstart-t.insert,t.ins_h=t.window[n],t.ins_h=ft(t,t.ins_h,t.window[n+1]);t.insert&&(t.ins_h=ft(t,t.ins_h,t.window[n+3-1]),t.prev[n&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=n,n++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<262&&0!==t.strm.avail_in)},kt=(t,e)=>{let a,i,n,s=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,r=0,o=t.strm.avail_in;do{if(a=65535,n=t.bi_valid+42>>3,t.strm.avail_out<n)break;if(n=t.strm.avail_out-n,i=t.strstart-t.block_start,a>i+t.strm.avail_in&&(a=i+t.strm.avail_in),a>n&&(a=n),a<s&&(0===a&&e!==X||e===P||a!==i+t.strm.avail_in))break;r=e===X&&a===i+t.strm.avail_in?1:0,H(t,0,0,r),t.pending_buf[t.pending-4]=a,t.pending_buf[t.pending-3]=a>>8,t.pending_buf[t.pending-2]=~a,t.pending_buf[t.pending-1]=~a>>8,ct(t.strm),i&&(i>a&&(i=a),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+i),t.strm.next_out),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i,t.block_start+=i,a-=i),a&&(bt(t.strm,t.strm.output,t.strm.next_out,a),t.strm.next_out+=a,t.strm.avail_out-=a,t.strm.total_out+=a)}while(0===r);return o-=t.strm.avail_in,o&&(o>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=o&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-o,t.strm.next_in),t.strstart),t.strstart+=o,t.insert+=o>t.w_size-t.insert?t.w_size-t.insert:o),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),r?4:e!==P&&e!==X&&0===t.strm.avail_in&&t.strstart===t.block_start?2:(n=t.window_size-t.strstart,t.strm.avail_in>n&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,n+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),n>t.strm.avail_in&&(n=t.strm.avail_in),n&&(bt(t.strm,t.window,t.strstart,n),t.strstart+=n,t.insert+=n>t.w_size-t.insert?t.w_size-t.insert:n),t.high_water<t.strstart&&(t.high_water=t.strstart),n=t.bi_valid+42>>3,n=t.pending_buf_size-n>65535?65535:t.pending_buf_size-n,s=n>t.w_size?t.w_size:n,i=t.strstart-t.block_start,(i>=s||(i||e===X)&&e!==P&&0===t.strm.avail_in&&i<=n)&&(a=i>n?n:i,r=e===X&&0===t.strm.avail_in&&a===i?1:0,H(t,t.block_start,a,r),t.block_start+=a,ct(t.strm)),r?3:1)},vt=(t,e)=>{let a,i;for(;;){if(t.lookahead<262){if(pt(t),t.lookahead<262&&e===P)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-262&&(t.match_length=gt(t,a)),t.match_length>=3)if(i=j(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=ft(t,t.ins_h,t.window[t.strstart+1]);else i=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2},yt=(t,e)=>{let a,i,n;for(;;){if(t.lookahead<262){if(pt(t),t.lookahead<262&&e===P)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-262&&(t.match_length=gt(t,a),t.match_length<=5&&(t.strategy===et||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-3,i=j(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=n&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,i&&(ut(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(i=j(t,0,t.window[t.strstart-1]),i&&ut(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=j(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2};function xt(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}const zt=[new xt(0,0,0,0,kt),new xt(4,4,8,4,vt),new xt(4,5,16,8,vt),new xt(4,6,32,32,vt),new xt(4,4,16,16,yt),new xt(8,16,32,32,yt),new xt(8,16,128,128,yt),new xt(8,32,128,256,yt),new xt(32,128,258,1024,yt),new xt(32,258,258,4096,yt)];function At(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ot,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),dt(this.dyn_ltree),dt(this.dyn_dtree),dt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),dt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),dt(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Et=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||42!==e.status&&57!==e.status&&69!==e.status&&73!==e.status&&91!==e.status&&103!==e.status&&113!==e.status&&666!==e.status?1:0},Rt=t=>{if(Et(t))return lt(t,Q);t.total_in=t.total_out=0,t.data_type=rt;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=2===e.wrap?57:e.wrap?42:113,t.adler=2===e.wrap?0:1,e.last_flush=-2,C(e),q},Zt=t=>{const e=Rt(t);var a;return e===q&&((a=t.state).window_size=2*a.w_size,dt(a.head),a.max_lazy_match=zt[a.level].max_lazy,a.good_match=zt[a.level].good_length,a.nice_match=zt[a.level].nice_length,a.max_chain_length=zt[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=2,a.match_available=0,a.ins_h=0),e},Ut=(t,e,a,i,n,s)=>{if(!t)return Q;let r=1;if(e===tt&&(e=6),i<0?(r=0,i=-i):i>15&&(r=2,i-=16),n<1||n>9||a!==ot||i<8||i>15||e<0||e>9||s<0||s>nt||8===i&&1!==r)return lt(t,Q);8===i&&(i=9);const o=new At;return t.state=o,o.strm=t,o.status=42,o.wrap=r,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=n+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+3-1)/3),o.window=new Uint8Array(2*o.w_size),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<n+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=3*(o.lit_bufsize-1),o.level=e,o.strategy=s,o.method=a,Zt(t)};var St={deflateInit:(t,e)=>Ut(t,e,ot,15,8,st),deflateInit2:Ut,deflateReset:Zt,deflateResetKeep:Rt,deflateSetHeader:(t,e)=>Et(t)||2!==t.state.wrap?Q:(t.state.gzhead=e,q),deflate:(t,e)=>{if(Et(t)||e>W||e<0)return t?lt(t,Q):Q;const a=t.state;if(!t.output||0!==t.avail_in&&!t.input||666===a.status&&e!==X)return lt(t,0===t.avail_out?$:Q);const i=a.last_flush;if(a.last_flush=e,0!==a.pending){if(ct(t),0===t.avail_out)return a.last_flush=-1,q}else if(0===t.avail_in&&ht(e)<=ht(i)&&e!==X)return lt(t,$);if(666===a.status&&0!==t.avail_in)return lt(t,$);if(42===a.status&&0===a.wrap&&(a.status=113),42===a.status){let e=ot+(a.w_bits-8<<4)<<8,i=-1;if(i=a.strategy>=at||a.level<2?0:a.level<6?1:6===a.level?2:3,e|=i<<6,0!==a.strstart&&(e|=32),e+=31-e%31,mt(a,e),0!==a.strstart&&(mt(a,t.adler>>>16),mt(a,65535&t.adler)),t.adler=1,a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q}if(57===a.status)if(t.adler=0,wt(a,31),wt(a,139),wt(a,8),a.gzhead)wt(a,(a.gzhead.text?1:0)+(a.gzhead.hcrc?2:0)+(a.gzhead.extra?4:0)+(a.gzhead.name?8:0)+(a.gzhead.comment?16:0)),wt(a,255&a.gzhead.time),wt(a,a.gzhead.time>>8&255),wt(a,a.gzhead.time>>16&255),wt(a,a.gzhead.time>>24&255),wt(a,9===a.level?2:a.strategy>=at||a.level<2?4:0),wt(a,255&a.gzhead.os),a.gzhead.extra&&a.gzhead.extra.length&&(wt(a,255&a.gzhead.extra.length),wt(a,a.gzhead.extra.length>>8&255)),a.gzhead.hcrc&&(t.adler=N(t.adler,a.pending_buf,a.pending,0)),a.gzindex=0,a.status=69;else if(wt(a,0),wt(a,0),wt(a,0),wt(a,0),wt(a,0),wt(a,9===a.level?2:a.strategy>=at||a.level<2?4:0),wt(a,3),a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q;if(69===a.status){if(a.gzhead.extra){let e=a.pending,i=(65535&a.gzhead.extra.length)-a.gzindex;for(;a.pending+i>a.pending_buf_size;){let n=a.pending_buf_size-a.pending;if(a.pending_buf.set(a.gzhead.extra.subarray(a.gzindex,a.gzindex+n),a.pending),a.pending=a.pending_buf_size,a.gzhead.hcrc&&a.pending>e&&(t.adler=N(t.adler,a.pending_buf,a.pending-e,e)),a.gzindex+=n,ct(t),0!==a.pending)return a.last_flush=-1,q;e=0,i-=n}let n=new Uint8Array(a.gzhead.extra);a.pending_buf.set(n.subarray(a.gzindex,a.gzindex+i),a.pending),a.pending+=i,a.gzhead.hcrc&&a.pending>e&&(t.adler=N(t.adler,a.pending_buf,a.pending-e,e)),a.gzindex=0}a.status=73}if(73===a.status){if(a.gzhead.name){let e,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),ct(t),0!==a.pending)return a.last_flush=-1,q;i=0}e=a.gzindex<a.gzhead.name.length?255&a.gzhead.name.charCodeAt(a.gzindex++):0,wt(a,e)}while(0!==e);a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),a.gzindex=0}a.status=91}if(91===a.status){if(a.gzhead.comment){let e,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),ct(t),0!==a.pending)return a.last_flush=-1,q;i=0}e=a.gzindex<a.gzhead.comment.length?255&a.gzhead.comment.charCodeAt(a.gzindex++):0,wt(a,e)}while(0!==e);a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i))}a.status=103}if(103===a.status){if(a.gzhead.hcrc){if(a.pending+2>a.pending_buf_size&&(ct(t),0!==a.pending))return a.last_flush=-1,q;wt(a,255&t.adler),wt(a,t.adler>>8&255),t.adler=0}if(a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q}if(0!==t.avail_in||0!==a.lookahead||e!==P&&666!==a.status){let i=0===a.level?kt(a,e):a.strategy===at?((t,e)=>{let a;for(;;){if(0===t.lookahead&&(pt(t),0===t.lookahead)){if(e===P)return 1;break}if(t.match_length=0,a=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2})(a,e):a.strategy===it?((t,e)=>{let a,i,n,s;const r=t.window;for(;;){if(t.lookahead<=258){if(pt(t),t.lookahead<=258&&e===P)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(n=t.strstart-1,i=r[n],i===r[++n]&&i===r[++n]&&i===r[++n])){s=t.strstart+258;do{}while(i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&n<s);t.match_length=258-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(a=j(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2})(a,e):zt[a.level].func(a,e);if(3!==i&&4!==i||(a.status=666),1===i||3===i)return 0===t.avail_out&&(a.last_flush=-1),q;if(2===i&&(e===Y?K(a):e!==W&&(H(a,0,0,!1),e===G&&(dt(a.head),0===a.lookahead&&(a.strstart=0,a.block_start=0,a.insert=0))),ct(t),0===t.avail_out))return a.last_flush=-1,q}return e!==X?q:a.wrap<=0?J:(2===a.wrap?(wt(a,255&t.adler),wt(a,t.adler>>8&255),wt(a,t.adler>>16&255),wt(a,t.adler>>24&255),wt(a,255&t.total_in),wt(a,t.total_in>>8&255),wt(a,t.total_in>>16&255),wt(a,t.total_in>>24&255)):(mt(a,t.adler>>>16),mt(a,65535&t.adler)),ct(t),a.wrap>0&&(a.wrap=-a.wrap),0!==a.pending?q:J)},deflateEnd:t=>{if(Et(t))return Q;const e=t.state.status;return t.state=null,113===e?lt(t,V):q},deflateSetDictionary:(t,e)=>{let a=e.length;if(Et(t))return Q;const i=t.state,n=i.wrap;if(2===n||1===n&&42!==i.status||i.lookahead)return Q;if(1===n&&(t.adler=F(t.adler,e,a,0)),i.wrap=0,a>=i.w_size){0===n&&(dt(i.head),i.strstart=0,i.block_start=0,i.insert=0);let t=new Uint8Array(i.w_size);t.set(e.subarray(a-i.w_size,a),0),e=t,a=i.w_size}const s=t.avail_in,r=t.next_in,o=t.input;for(t.avail_in=a,t.next_in=0,t.input=e,pt(i);i.lookahead>=3;){let t=i.strstart,e=i.lookahead-2;do{i.ins_h=ft(i,i.ins_h,i.window[t+3-1]),i.prev[t&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=t,t++}while(--e);i.strstart=t,i.lookahead=2,pt(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,t.next_in=r,t.input=o,t.avail_in=s,i.wrap=n,q},deflateInfo:\"pako deflate (from Nodeca project)\"};const Dt=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var Tt=function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const a=e.shift();if(a){if(\"object\"!=typeof a)throw new TypeError(a+\"must be non-object\");for(const e in a)Dt(a,e)&&(t[e]=a[e])}}return t},Ot=t=>{let e=0;for(let a=0,i=t.length;a<i;a++)e+=t[a].length;const a=new Uint8Array(e);for(let e=0,i=0,n=t.length;e<n;e++){let n=t[e];a.set(n,i),i+=n.length}return a};let Ft=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){Ft=!1}const Lt=new Uint8Array(256);for(let t=0;t<256;t++)Lt[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;Lt[254]=Lt[254]=1;var Nt=t=>{if(\"function\"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,a,i,n,s,r=t.length,o=0;for(n=0;n<r;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),o+=a<128?1:a<2048?2:a<65536?3:4;for(e=new Uint8Array(o),s=0,n=0;s<o;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},It=(t,e)=>{const a=e||t.length;if(\"function\"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let i,n;const s=new Array(2*a);for(n=0,i=0;i<a;){let e=t[i++];if(e<128){s[n++]=e;continue}let r=Lt[e];if(r>4)s[n++]=65533,i+=r-1;else{for(e&=2===r?31:3===r?15:7;r>1&&i<a;)e=e<<6|63&t[i++],r--;r>1?s[n++]=65533:e<65536?s[n++]=e:(e-=65536,s[n++]=55296|e>>10&1023,s[n++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&Ft)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let a=\"\";for(let i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a})(s,n)},Bt=(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let a=e-1;for(;a>=0&&128==(192&t[a]);)a--;return a<0||0===a?e:a+Lt[t[a]]>e?a:e};var Ct=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0};const Ht=Object.prototype.toString,{Z_NO_FLUSH:Mt,Z_SYNC_FLUSH:jt,Z_FULL_FLUSH:Kt,Z_FINISH:Pt,Z_OK:Yt,Z_STREAM_END:Gt,Z_DEFAULT_COMPRESSION:Xt,Z_DEFAULT_STRATEGY:Wt,Z_DEFLATED:qt}=B;function Jt(t){this.options=Tt({level:Xt,method:qt,chunkSize:16384,windowBits:15,memLevel:8,strategy:Wt},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new Ct,this.strm.avail_out=0;let a=St.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==Yt)throw new Error(I[a]);if(e.header&&St.deflateSetHeader(this.strm,e.header),e.dictionary){let t;if(t=\"string\"==typeof e.dictionary?Nt(e.dictionary):\"[object ArrayBuffer]\"===Ht.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=St.deflateSetDictionary(this.strm,t),a!==Yt)throw new Error(I[a]);this._dict_set=!0}}function Qt(t,e){const a=new Jt(e);if(a.push(t,!0),a.err)throw a.msg||I[a.err];return a.result}Jt.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize;let n,s;if(this.ended)return!1;for(s=e===~~e?e:!0===e?Pt:Mt,\"string\"==typeof t?a.input=Nt(t):\"[object ArrayBuffer]\"===Ht.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;)if(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),(s===jt||s===Kt)&&a.avail_out<=6)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else{if(n=St.deflate(a,s),n===Gt)return a.next_out>0&&this.onData(a.output.subarray(0,a.next_out)),n=St.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===Yt;if(0!==a.avail_out){if(s>0&&a.next_out>0)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else if(0===a.avail_in)break}else this.onData(a.output)}return!0},Jt.prototype.onData=function(t){this.chunks.push(t)},Jt.prototype.onEnd=function(t){t===Yt&&(this.result=Ot(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var Vt={Deflate:Jt,deflate:Qt,deflateRaw:function(t,e){return(e=e||{}).raw=!0,Qt(t,e)},gzip:function(t,e){return(e=e||{}).gzip=!0,Qt(t,e)},constants:B};var $t=function(t,e){let a,i,n,s,r,o,l,h,d,_,f,c,u,w,m,b,g,p,k,v,y,x,z,A;const E=t.state;a=t.next_in,z=t.input,i=a+(t.avail_in-5),n=t.next_out,A=t.output,s=n-(e-t.avail_out),r=n+(t.avail_out-257),o=E.dmax,l=E.wsize,h=E.whave,d=E.wnext,_=E.window,f=E.hold,c=E.bits,u=E.lencode,w=E.distcode,m=(1<<E.lenbits)-1,b=(1<<E.distbits)-1;t:do{c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),g=u[f&m];e:for(;;){if(p=g>>>24,f>>>=p,c-=p,p=g>>>16&255,0===p)A[n++]=65535&g;else{if(!(16&p)){if(0==(64&p)){g=u[(65535&g)+(f&(1<<p)-1)];continue e}if(32&p){E.mode=16191;break t}t.msg=\"invalid literal/length code\",E.mode=16209;break t}k=65535&g,p&=15,p&&(c<p&&(f+=z[a++]<<c,c+=8),k+=f&(1<<p)-1,f>>>=p,c-=p),c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),g=w[f&b];a:for(;;){if(p=g>>>24,f>>>=p,c-=p,p=g>>>16&255,!(16&p)){if(0==(64&p)){g=w[(65535&g)+(f&(1<<p)-1)];continue a}t.msg=\"invalid distance code\",E.mode=16209;break t}if(v=65535&g,p&=15,c<p&&(f+=z[a++]<<c,c+=8,c<p&&(f+=z[a++]<<c,c+=8)),v+=f&(1<<p)-1,v>o){t.msg=\"invalid distance too far back\",E.mode=16209;break t}if(f>>>=p,c-=p,p=n-s,v>p){if(p=v-p,p>h&&E.sane){t.msg=\"invalid distance too far back\",E.mode=16209;break t}if(y=0,x=_,0===d){if(y+=l-p,p<k){k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}}else if(d<p){if(y+=l+d-p,p-=d,p<k){k-=p;do{A[n++]=_[y++]}while(--p);if(y=0,d<k){p=d,k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}}}else if(y+=d-p,p<k){k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}for(;k>2;)A[n++]=x[y++],A[n++]=x[y++],A[n++]=x[y++],k-=3;k&&(A[n++]=x[y++],k>1&&(A[n++]=x[y++]))}else{y=n-v;do{A[n++]=A[y++],A[n++]=A[y++],A[n++]=A[y++],k-=3}while(k>2);k&&(A[n++]=A[y++],k>1&&(A[n++]=A[y++]))}break}}break}}while(a<i&&n<r);k=c>>3,a-=k,c-=k<<3,f&=(1<<c)-1,t.next_in=a,t.next_out=n,t.avail_in=a<i?i-a+5:5-(a-i),t.avail_out=n<r?r-n+257:257-(n-r),E.hold=f,E.bits=c};const te=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),ee=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),ae=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),ie=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var ne=(t,e,a,i,n,s,r,o)=>{const l=o.bits;let h,d,_,f,c,u,w=0,m=0,b=0,g=0,p=0,k=0,v=0,y=0,x=0,z=0,A=null;const E=new Uint16Array(16),R=new Uint16Array(16);let Z,U,S,D=null;for(w=0;w<=15;w++)E[w]=0;for(m=0;m<i;m++)E[e[a+m]]++;for(p=l,g=15;g>=1&&0===E[g];g--);if(p>g&&(p=g),0===g)return n[s++]=20971520,n[s++]=20971520,o.bits=1,0;for(b=1;b<g&&0===E[b];b++);for(p<b&&(p=b),y=1,w=1;w<=15;w++)if(y<<=1,y-=E[w],y<0)return-1;if(y>0&&(0===t||1!==g))return-1;for(R[1]=0,w=1;w<15;w++)R[w+1]=R[w]+E[w];for(m=0;m<i;m++)0!==e[a+m]&&(r[R[e[a+m]]++]=m);if(0===t?(A=D=r,u=20):1===t?(A=te,D=ee,u=257):(A=ae,D=ie,u=0),z=0,m=0,w=b,c=s,k=p,v=0,_=-1,x=1<<p,f=x-1,1===t&&x>852||2===t&&x>592)return 1;for(;;){Z=w-v,r[m]+1<u?(U=0,S=r[m]):r[m]>=u?(U=D[r[m]-u],S=A[r[m]-u]):(U=96,S=0),h=1<<w-v,d=1<<k,b=d;do{d-=h,n[c+(z>>v)+d]=Z<<24|U<<16|S|0}while(0!==d);for(h=1<<w-1;z&h;)h>>=1;if(0!==h?(z&=h-1,z+=h):z=0,m++,0==--E[w]){if(w===g)break;w=e[a+r[m]]}if(w>p&&(z&f)!==_){for(0===v&&(v=p),c+=b,k=w-v,y=1<<k;k+v<g&&(y-=E[k+v],!(y<=0));)k++,y<<=1;if(x+=1<<k,1===t&&x>852||2===t&&x>592)return 1;_=z&f,n[_]=p<<24|k<<16|c-s|0}}return 0!==z&&(n[c+z]=w-v<<24|64<<16|0),o.bits=p,0};const{Z_FINISH:se,Z_BLOCK:re,Z_TREES:oe,Z_OK:le,Z_STREAM_END:he,Z_NEED_DICT:de,Z_STREAM_ERROR:_e,Z_DATA_ERROR:fe,Z_MEM_ERROR:ce,Z_BUF_ERROR:ue,Z_DEFLATED:we}=B,me=16209,be=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function ge(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const pe=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||e.mode<16180||e.mode>16211?1:0},ke=t=>{if(pe(t))return _e;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg=\"\",e.wrap&&(t.adler=1&e.wrap),e.mode=16180,e.last=0,e.havedict=0,e.flags=-1,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,le},ve=t=>{if(pe(t))return _e;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,ke(t)},ye=(t,e)=>{let a;if(pe(t))return _e;const i=t.state;return e<0?(a=0,e=-e):(a=5+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?_e:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,ve(t))},xe=(t,e)=>{if(!t)return _e;const a=new ge;t.state=a,a.strm=t,a.window=null,a.mode=16180;const i=ye(t,e);return i!==le&&(t.state=null),i};let ze,Ae,Ee=!0;const Re=t=>{if(Ee){ze=new Int32Array(512),Ae=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(ne(1,t.lens,0,288,ze,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;ne(2,t.lens,0,32,Ae,0,t.work,{bits:5}),Ee=!1}t.lencode=ze,t.lenbits=9,t.distcode=Ae,t.distbits=5},Ze=(t,e,a,i)=>{let n;const s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(e.subarray(a-s.wsize,a),0),s.wnext=0,s.whave=s.wsize):(n=s.wsize-s.wnext,n>i&&(n=i),s.window.set(e.subarray(a-i,a-i+n),s.wnext),(i-=n)?(s.window.set(e.subarray(a-i,a),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0};var Ue={inflateReset:ve,inflateReset2:ye,inflateResetKeep:ke,inflateInit:t=>xe(t,15),inflateInit2:xe,inflate:(t,e)=>{let a,i,n,s,r,o,l,h,d,_,f,c,u,w,m,b,g,p,k,v,y,x,z=0;const A=new Uint8Array(4);let E,R;const Z=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(pe(t)||!t.output||!t.input&&0!==t.avail_in)return _e;a=t.state,16191===a.mode&&(a.mode=16192),r=t.next_out,n=t.output,l=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,h=a.hold,d=a.bits,_=o,f=l,x=le;t:for(;;)switch(a.mode){case 16180:if(0===a.wrap){a.mode=16192;break}for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(2&a.wrap&&35615===h){0===a.wbits&&(a.wbits=15),a.check=0,A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0),h=0,d=0,a.mode=16181;break}if(a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&h)<<8)+(h>>8))%31){t.msg=\"incorrect header check\",a.mode=me;break}if((15&h)!==we){t.msg=\"unknown compression method\",a.mode=me;break}if(h>>>=4,d-=4,y=8+(15&h),0===a.wbits&&(a.wbits=y),y>15||y>a.wbits){t.msg=\"invalid window size\",a.mode=me;break}a.dmax=1<<a.wbits,a.flags=0,t.adler=a.check=1,a.mode=512&h?16189:16191,h=0,d=0;break;case 16181:for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(a.flags=h,(255&a.flags)!==we){t.msg=\"unknown compression method\",a.mode=me;break}if(57344&a.flags){t.msg=\"unknown header flags set\",a.mode=me;break}a.head&&(a.head.text=h>>8&1),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0,a.mode=16182;case 16182:for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.head&&(a.head.time=h),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,A[2]=h>>>16&255,A[3]=h>>>24&255,a.check=N(a.check,A,4,0)),h=0,d=0,a.mode=16183;case 16183:for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.head&&(a.head.xflags=255&h,a.head.os=h>>8),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0,a.mode=16184;case 16184:if(1024&a.flags){for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.length=h,a.head&&(a.head.extra_len=h),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0}else a.head&&(a.head.extra=null);a.mode=16185;case 16185:if(1024&a.flags&&(c=a.length,c>o&&(c=o),c&&(a.head&&(y=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Uint8Array(a.head.extra_len)),a.head.extra.set(i.subarray(s,s+c),y)),512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,a.length-=c),a.length))break t;a.length=0,a.mode=16186;case 16186:if(2048&a.flags){if(0===o)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.name+=String.fromCharCode(y))}while(y&&c<o);if(512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,y)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=16187;case 16187:if(4096&a.flags){if(0===o)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.comment+=String.fromCharCode(y))}while(y&&c<o);if(512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,y)break t}else a.head&&(a.head.comment=null);a.mode=16188;case 16188:if(512&a.flags){for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(4&a.wrap&&h!==(65535&a.check)){t.msg=\"header crc mismatch\",a.mode=me;break}h=0,d=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=16191;break;case 16189:for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}t.adler=a.check=be(h),h=0,d=0,a.mode=16190;case 16190:if(0===a.havedict)return t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,de;t.adler=a.check=1,a.mode=16191;case 16191:if(e===re||e===oe)break t;case 16192:if(a.last){h>>>=7&d,d-=7&d,a.mode=16206;break}for(;d<3;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}switch(a.last=1&h,h>>>=1,d-=1,3&h){case 0:a.mode=16193;break;case 1:if(Re(a),a.mode=16199,e===oe){h>>>=2,d-=2;break t}break;case 2:a.mode=16196;break;case 3:t.msg=\"invalid block type\",a.mode=me}h>>>=2,d-=2;break;case 16193:for(h>>>=7&d,d-=7&d;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if((65535&h)!=(h>>>16^65535)){t.msg=\"invalid stored block lengths\",a.mode=me;break}if(a.length=65535&h,h=0,d=0,a.mode=16194,e===oe)break t;case 16194:a.mode=16195;case 16195:if(c=a.length,c){if(c>o&&(c=o),c>l&&(c=l),0===c)break t;n.set(i.subarray(s,s+c),r),o-=c,s+=c,l-=c,r+=c,a.length-=c;break}a.mode=16191;break;case 16196:for(;d<14;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(a.nlen=257+(31&h),h>>>=5,d-=5,a.ndist=1+(31&h),h>>>=5,d-=5,a.ncode=4+(15&h),h>>>=4,d-=4,a.nlen>286||a.ndist>30){t.msg=\"too many length or distance symbols\",a.mode=me;break}a.have=0,a.mode=16197;case 16197:for(;a.have<a.ncode;){for(;d<3;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.lens[Z[a.have++]]=7&h,h>>>=3,d-=3}for(;a.have<19;)a.lens[Z[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,E={bits:a.lenbits},x=ne(0,a.lens,0,19,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg=\"invalid code lengths set\",a.mode=me;break}a.have=0,a.mode=16198;case 16198:for(;a.have<a.nlen+a.ndist;){for(;z=a.lencode[h&(1<<a.lenbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(g<16)h>>>=m,d-=m,a.lens[a.have++]=g;else{if(16===g){for(R=m+2;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(h>>>=m,d-=m,0===a.have){t.msg=\"invalid bit length repeat\",a.mode=me;break}y=a.lens[a.have-1],c=3+(3&h),h>>>=2,d-=2}else if(17===g){for(R=m+3;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,y=0,c=3+(7&h),h>>>=3,d-=3}else{for(R=m+7;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,y=0,c=11+(127&h),h>>>=7,d-=7}if(a.have+c>a.nlen+a.ndist){t.msg=\"invalid bit length repeat\",a.mode=me;break}for(;c--;)a.lens[a.have++]=y}}if(a.mode===me)break;if(0===a.lens[256]){t.msg=\"invalid code -- missing end-of-block\",a.mode=me;break}if(a.lenbits=9,E={bits:a.lenbits},x=ne(1,a.lens,0,a.nlen,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg=\"invalid literal/lengths set\",a.mode=me;break}if(a.distbits=6,a.distcode=a.distdyn,E={bits:a.distbits},x=ne(2,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,E),a.distbits=E.bits,x){t.msg=\"invalid distances set\",a.mode=me;break}if(a.mode=16199,e===oe)break t;case 16199:a.mode=16200;case 16200:if(o>=6&&l>=258){t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,$t(t,f),r=t.next_out,n=t.output,l=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,h=a.hold,d=a.bits,16191===a.mode&&(a.back=-1);break}for(a.back=0;z=a.lencode[h&(1<<a.lenbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(b&&0==(240&b)){for(p=m,k=b,v=g;z=a.lencode[v+((h&(1<<p+k)-1)>>p)],m=z>>>24,b=z>>>16&255,g=65535&z,!(p+m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=p,d-=p,a.back+=p}if(h>>>=m,d-=m,a.back+=m,a.length=g,0===b){a.mode=16205;break}if(32&b){a.back=-1,a.mode=16191;break}if(64&b){t.msg=\"invalid literal/length code\",a.mode=me;break}a.extra=15&b,a.mode=16201;case 16201:if(a.extra){for(R=a.extra;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.length+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=16202;case 16202:for(;z=a.distcode[h&(1<<a.distbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(0==(240&b)){for(p=m,k=b,v=g;z=a.distcode[v+((h&(1<<p+k)-1)>>p)],m=z>>>24,b=z>>>16&255,g=65535&z,!(p+m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=p,d-=p,a.back+=p}if(h>>>=m,d-=m,a.back+=m,64&b){t.msg=\"invalid distance code\",a.mode=me;break}a.offset=g,a.extra=15&b,a.mode=16203;case 16203:if(a.extra){for(R=a.extra;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.offset+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg=\"invalid distance too far back\",a.mode=me;break}a.mode=16204;case 16204:if(0===l)break t;if(c=f-l,a.offset>c){if(c=a.offset-c,c>a.whave&&a.sane){t.msg=\"invalid distance too far back\",a.mode=me;break}c>a.wnext?(c-=a.wnext,u=a.wsize-c):u=a.wnext-c,c>a.length&&(c=a.length),w=a.window}else w=n,u=r-a.offset,c=a.length;c>l&&(c=l),l-=c,a.length-=c;do{n[r++]=w[u++]}while(--c);0===a.length&&(a.mode=16200);break;case 16205:if(0===l)break t;n[r++]=a.length,l--,a.mode=16200;break;case 16206:if(a.wrap){for(;d<32;){if(0===o)break t;o--,h|=i[s++]<<d,d+=8}if(f-=l,t.total_out+=f,a.total+=f,4&a.wrap&&f&&(t.adler=a.check=a.flags?N(a.check,n,f,r-f):F(a.check,n,f,r-f)),f=l,4&a.wrap&&(a.flags?h:be(h))!==a.check){t.msg=\"incorrect data check\",a.mode=me;break}h=0,d=0}a.mode=16207;case 16207:if(a.wrap&&a.flags){for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(4&a.wrap&&h!==(4294967295&a.total)){t.msg=\"incorrect length check\",a.mode=me;break}h=0,d=0}a.mode=16208;case 16208:x=he;break t;case me:x=fe;break t;case 16210:return ce;default:return _e}return t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,(a.wsize||f!==t.avail_out&&a.mode<me&&(a.mode<16206||e!==se))&&Ze(t,t.output,t.next_out,f-t.avail_out),_-=t.avail_in,f-=t.avail_out,t.total_in+=_,t.total_out+=f,a.total+=f,4&a.wrap&&f&&(t.adler=a.check=a.flags?N(a.check,n,f,t.next_out-f):F(a.check,n,f,t.next_out-f)),t.data_type=a.bits+(a.last?64:0)+(16191===a.mode?128:0)+(16199===a.mode||16194===a.mode?256:0),(0===_&&0===f||e===se)&&x===le&&(x=ue),x},inflateEnd:t=>{if(pe(t))return _e;let e=t.state;return e.window&&(e.window=null),t.state=null,le},inflateGetHeader:(t,e)=>{if(pe(t))return _e;const a=t.state;return 0==(2&a.wrap)?_e:(a.head=e,e.done=!1,le)},inflateSetDictionary:(t,e)=>{const a=e.length;let i,n,s;return pe(t)?_e:(i=t.state,0!==i.wrap&&16190!==i.mode?_e:16190===i.mode&&(n=1,n=F(n,e,a,0),n!==i.check)?fe:(s=Ze(t,e,a,a),s?(i.mode=16210,ce):(i.havedict=1,le)))},inflateInfo:\"pako inflate (from Nodeca project)\"};var Se=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1};const De=Object.prototype.toString,{Z_NO_FLUSH:Te,Z_FINISH:Oe,Z_OK:Fe,Z_STREAM_END:Le,Z_NEED_DICT:Ne,Z_STREAM_ERROR:Ie,Z_DATA_ERROR:Be,Z_MEM_ERROR:Ce}=B;function He(t){this.options=Tt({chunkSize:65536,windowBits:15,to:\"\"},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new Ct,this.strm.avail_out=0;let a=Ue.inflateInit2(this.strm,e.windowBits);if(a!==Fe)throw new Error(I[a]);if(this.header=new Se,Ue.inflateGetHeader(this.strm,this.header),e.dictionary&&(\"string\"==typeof e.dictionary?e.dictionary=Nt(e.dictionary):\"[object ArrayBuffer]\"===De.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(a=Ue.inflateSetDictionary(this.strm,e.dictionary),a!==Fe)))throw new Error(I[a])}He.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize,n=this.options.dictionary;let s,r,o;if(this.ended)return!1;for(r=e===~~e?e:!0===e?Oe:Te,\"[object ArrayBuffer]\"===De.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;){for(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),s=Ue.inflate(a,r),s===Ne&&n&&(s=Ue.inflateSetDictionary(a,n),s===Fe?s=Ue.inflate(a,r):s===Be&&(s=Ne));a.avail_in>0&&s===Le&&a.state.wrap>0&&0!==t[a.next_in];)Ue.inflateReset(a),s=Ue.inflate(a,r);switch(s){case Ie:case Be:case Ne:case Ce:return this.onEnd(s),this.ended=!0,!1}if(o=a.avail_out,a.next_out&&(0===a.avail_out||s===Le))if(\"string\"===this.options.to){let t=Bt(a.output,a.next_out),e=a.next_out-t,n=It(a.output,t);a.next_out=e,a.avail_out=i-e,e&&a.output.set(a.output.subarray(t,t+e),0),this.onData(n)}else this.onData(a.output.length===a.next_out?a.output:a.output.subarray(0,a.next_out));if(s!==Fe||0!==o){if(s===Le)return s=Ue.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===a.avail_in)break}}return!0},He.prototype.onData=function(t){this.chunks.push(t)},He.prototype.onEnd=function(t){t===Fe&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=Ot(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};const{Deflate:Me,deflate:je,deflateRaw:Ke,gzip:Pe}=Vt;var Ye=Me,Ge=je,Xe=B;const We=new class{constructor(){this._init()}clear(){this._init()}addEvent(t){if(!t)throw new Error(\"Adding invalid event\");const e=this._hasEvents?\",\":\"\";this.deflate.push(e+t,Xe.Z_SYNC_FLUSH),this._hasEvents=!0}finish(){if(this.deflate.push(\"]\",Xe.Z_FINISH),this.deflate.err)throw this.deflate.err;const t=this.deflate.result;return this._init(),t}_init(){this._hasEvents=!1,this.deflate=new Ye,this.deflate.push(\"[\",Xe.Z_NO_FLUSH)}},qe={clear:()=>{We.clear()},addEvent:t=>We.addEvent(t),finish:()=>We.finish(),compress:t=>function(t){return Ge(t)}(t)};addEventListener(\"message\",(function(t){const e=t.data.method,a=t.data.id,i=t.data.arg;if(e in qe&&\"function\"==typeof qe[e])try{const t=qe[e](i);postMessage({id:a,method:e,success:!0,response:t})}catch(t){postMessage({id:a,method:e,success:!1,response:t.message}),console.error(t)}})),postMessage({id:void 0,method:\"init\",success:!0,response:void 0});`;\n", "import r from\"./worker\";function e(){const e=new Blob([r]);return URL.createObjectURL(e)}export{e as getWorkerURL};\n", "import type { AddEventResult, EventBuffer, RecordingEvent } from '../types';\n\n/**\n * A basic event buffer that does not do any compression.\n * Used as fallback if the compression worker cannot be loaded or is disabled.\n */\nexport class EventBufferArray implements EventBuffer {\n  /** All the events that are buffered to be sent. */\n  public events: RecordingEvent[];\n\n  public constructor() {\n    this.events = [];\n  }\n\n  /** @inheritdoc */\n  public get hasEvents(): boolean {\n    return this.events.length > 0;\n  }\n\n  /** @inheritdoc */\n  public destroy(): void {\n    this.events = [];\n  }\n\n  /** @inheritdoc */\n  public async addEvent(event: RecordingEvent, isCheckout?: boolean): Promise<AddEventResult> {\n    if (isCheckout) {\n      this.events = [event];\n      return;\n    }\n\n    this.events.push(event);\n    return;\n  }\n\n  /** @inheritdoc */\n  public finish(): Promise<string> {\n    return new Promise<string>(resolve => {\n      // Make a copy of the events array reference and immediately clear the\n      // events member so that we do not lose new events while uploading\n      // attachment.\n      const eventsRet = this.events;\n      this.events = [];\n      resolve(JSON.stringify(eventsRet));\n    });\n  }\n}\n", "import { logger } from '@sentry/utils';\n\nimport type { WorkerRequest, WorkerResponse } from '../types';\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nexport class WorkerHandler {\n  private _worker: Worker;\n  private _id: number;\n  private _ensureReadyPromise?: Promise<void>;\n\n  public constructor(worker: Worker) {\n    this._worker = worker;\n    this._id = 0;\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n  public ensureReady(): Promise<void> {\n    // Ensure we only check once\n    if (this._ensureReadyPromise) {\n      return this._ensureReadyPromise;\n    }\n\n    this._ensureReadyPromise = new Promise((resolve, reject) => {\n      this._worker.addEventListener(\n        'message',\n        ({ data }: MessageEvent) => {\n          if ((data as WorkerResponse).success) {\n            resolve();\n          } else {\n            reject();\n          }\n        },\n        { once: true },\n      );\n\n      this._worker.addEventListener(\n        'error',\n        error => {\n          reject(error);\n        },\n        { once: true },\n      );\n    });\n\n    return this._ensureReadyPromise;\n  }\n\n  /**\n   * Destroy the worker.\n   */\n  public destroy(): void {\n    __DEBUG_BUILD__ && logger.log('[Replay] Destroying compression worker');\n    this._worker.terminate();\n  }\n\n  /**\n   * Post message to worker and wait for response before resolving promise.\n   */\n  public postMessage<T>(method: WorkerRequest['method'], arg?: WorkerRequest['arg']): Promise<T> {\n    const id = this._getAndIncrementId();\n\n    return new Promise((resolve, reject) => {\n      const listener = ({ data }: MessageEvent): void => {\n        const response = data as WorkerResponse;\n        if (response.method !== method) {\n          return;\n        }\n\n        // There can be multiple listeners for a single method, the id ensures\n        // that the response matches the caller.\n        if (response.id !== id) {\n          return;\n        }\n\n        // At this point, we'll always want to remove listener regardless of result status\n        this._worker.removeEventListener('message', listener);\n\n        if (!response.success) {\n          // TODO: Do some error handling, not sure what\n          __DEBUG_BUILD__ && logger.error('[Replay]', response.response);\n\n          reject(new Error('Error in compression worker'));\n          return;\n        }\n\n        resolve(response.response as T);\n      };\n\n      // Note: we can't use `once` option because it's possible it needs to\n      // listen to multiple messages\n      this._worker.addEventListener('message', listener);\n      this._worker.postMessage({ id, method, arg });\n    });\n  }\n\n  /** Get the current ID and increment it for the next call. */\n  private _getAndIncrementId(): number {\n    return this._id++;\n  }\n}\n", "import type { ReplayRecordingData } from '@sentry/types';\n\nimport type { AddEventResult, EventBuffer, RecordingEvent } from '../types';\nimport { WorkerHandler } from './WorkerHandler';\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nexport class EventBufferCompressionWorker implements EventBuffer {\n  /** @inheritdoc */\n  public hasEvents: boolean;\n\n  private _worker: WorkerHandler;\n\n  public constructor(worker: Worker) {\n    this._worker = new WorkerHandler(worker);\n    this.hasEvents = false;\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n  public ensureReady(): Promise<void> {\n    return this._worker.ensureReady();\n  }\n\n  /**\n   * Destroy the event buffer.\n   */\n  public destroy(): void {\n    this._worker.destroy();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfuly received and processed by worker.\n   */\n  public async addEvent(event: RecordingEvent, isCheckout?: boolean): Promise<AddEventResult> {\n    this.hasEvents = true;\n\n    if (isCheckout) {\n      // This event is a checkout, make sure worker buffer is cleared before\n      // proceeding.\n      await this._clear();\n    }\n\n    return this._sendEventToWorker(event);\n  }\n\n  /**\n   * Finish the event buffer and return the compressed data.\n   */\n  public finish(): Promise<ReplayRecordingData> {\n    return this._finishRequest();\n  }\n\n  /**\n   * Send the event to the worker.\n   */\n  private _sendEventToWorker(event: RecordingEvent): Promise<AddEventResult> {\n    return this._worker.postMessage<void>('addEvent', JSON.stringify(event));\n  }\n\n  /**\n   * Finish the request and return the compressed data from the worker.\n   */\n  private async _finishRequest(): Promise<Uint8Array> {\n    const response = await this._worker.postMessage<Uint8Array>('finish');\n\n    this.hasEvents = false;\n\n    return response;\n  }\n\n  /** Clear any pending events from the worker. */\n  private _clear(): Promise<void> {\n    return this._worker.postMessage('clear');\n  }\n}\n", "import type { ReplayRecordingData } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport type { AddEventResult, EventBuffer, RecordingEvent } from '../types';\nimport { EventBufferArray } from './EventBufferArray';\nimport { EventBufferCompressionWorker } from './EventBufferCompressionWorker';\n\n/**\n * This proxy will try to use the compression worker, and fall back to use the simple buffer if an error occurs there.\n * This can happen e.g. if the worker cannot be loaded.\n * Exported only for testing.\n */\nexport class EventBufferProxy implements EventBuffer {\n  private _fallback: EventBufferArray;\n  private _compression: EventBufferCompressionWorker;\n  private _used: EventBuffer;\n  private _ensureWorkerIsLoadedPromise: Promise<void>;\n\n  public constructor(worker: Worker) {\n    this._fallback = new EventBufferArray();\n    this._compression = new EventBufferCompressionWorker(worker);\n    this._used = this._fallback;\n\n    this._ensureWorkerIsLoadedPromise = this._ensureWorkerIsLoaded();\n  }\n\n  /** @inheritDoc */\n  public get hasEvents(): boolean {\n    return this._used.hasEvents;\n  }\n\n  /** @inheritDoc */\n  public destroy(): void {\n    this._fallback.destroy();\n    this._compression.destroy();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfully added.\n   */\n  public addEvent(event: RecordingEvent, isCheckout?: boolean): Promise<AddEventResult> {\n    return this._used.addEvent(event, isCheckout);\n  }\n\n  /** @inheritDoc */\n  public async finish(): Promise<ReplayRecordingData> {\n    // Ensure the worker is loaded, so the sent event is compressed\n    await this.ensureWorkerIsLoaded();\n\n    return this._used.finish();\n  }\n\n  /** Ensure the worker has loaded. */\n  public ensureWorkerIsLoaded(): Promise<void> {\n    return this._ensureWorkerIsLoadedPromise;\n  }\n\n  /** Actually check if the worker has been loaded. */\n  private async _ensureWorkerIsLoaded(): Promise<void> {\n    try {\n      await this._compression.ensureReady();\n    } catch (error) {\n      // If the worker fails to load, we fall back to the simple buffer.\n      // Nothing more to do from our side here\n      __DEBUG_BUILD__ && logger.log('[Replay] Failed to load the compression worker, falling back to simple buffer');\n      return;\n    }\n\n    // Now we need to switch over the array buffer to the compression worker\n    await this._switchToCompressionWorker();\n  }\n\n  /** Switch the used buffer to the compression worker. */\n  private async _switchToCompressionWorker(): Promise<void> {\n    const { events } = this._fallback;\n\n    const addEventPromises: Promise<void>[] = [];\n    for (const event of events) {\n      addEventPromises.push(this._compression.addEvent(event));\n    }\n\n    // We switch over to the new buffer immediately - any further events will be added\n    // after the previously buffered ones\n    this._used = this._compression;\n\n    // Wait for original events to be re-added before resolving\n    try {\n      await Promise.all(addEventPromises);\n    } catch (error) {\n      __DEBUG_BUILD__ && logger.warn('[Replay] Failed to add events when switching buffers.', error);\n    }\n  }\n}\n", "import { getWorkerURL } from '@sentry-internal/replay-worker';\nimport { logger } from '@sentry/utils';\n\nimport type { EventBuffer } from '../types';\nimport { EventBufferArray } from './EventBufferArray';\nimport { EventBufferProxy } from './EventBufferProxy';\n\ninterface CreateEventBufferParams {\n  useCompression: boolean;\n}\n\n/**\n * Create an event buffer for replays.\n */\nexport function createEventBuffer({ useCompression }: CreateEventBufferParams): EventBuffer {\n  // eslint-disable-next-line no-restricted-globals\n  if (useCompression && window.Worker) {\n    try {\n      const workerUrl = getWorkerURL();\n\n      __DEBUG_BUILD__ && logger.log('[Replay] Using compression worker');\n      const worker = new Worker(workerUrl);\n      return new EventBufferProxy(worker);\n    } catch (error) {\n      __DEBUG_BUILD__ && logger.log('[Replay] Failed to create compression worker');\n      // Fall back to use simple event buffer array\n    }\n  }\n\n  __DEBUG_BUILD__ && logger.log('[Replay] Using simple buffer');\n  return new EventBufferArray();\n}\n", "/**\n * Given an initial timestamp and an expiry duration, checks to see if current\n * time should be considered as expired.\n */\nexport function isExpired(\n  initialTime: null | number,\n  expiry: undefined | number,\n  targetTime: number = +new Date(),\n): boolean {\n  // Always expired if < 0\n  if (initialTime === null || expiry === undefined || expiry < 0) {\n    return true;\n  }\n\n  // Never expires if == 0\n  if (expiry === 0) {\n    return false;\n  }\n\n  return initialTime + expiry <= targetTime;\n}\n", "import { MAX_SESSION_LIFE } from '../constants';\nimport type { Session } from '../types';\nimport { isExpired } from './isExpired';\n\n/**\n * Checks to see if session is expired\n */\nexport function isSessionExpired(session: Session, idleTimeout: number, targetTime: number = +new Date()): boolean {\n  return (\n    // First, check that maximum session length has not been exceeded\n    isExpired(session.started, MAX_SESSION_LIFE, targetTime) ||\n    // check that the idle timeout has not been exceeded (i.e. user has\n    // performed an action within the last `idleTimeout` ms)\n    isExpired(session.lastActivity, idleTimeout, targetTime)\n  );\n}\n", "import { REPLAY_SESSION_KEY, WINDOW } from '../constants';\nimport type { Session } from '../types';\n\n/**\n * Save a session to session storage.\n */\nexport function saveSession(session: Session): void {\n  const hasSessionStorage = 'sessionStorage' in WINDOW;\n  if (!hasSessionStorage) {\n    return;\n  }\n\n  try {\n    WINDOW.sessionStorage.setItem(REPLAY_SESSION_KEY, JSON.stringify(session));\n  } catch {\n    // Ignore potential SecurityError exceptions\n  }\n}\n", "/**\n * Given a sample rate, returns true if replay should be sampled.\n *\n * 1.0 = 100% sampling\n * 0.0 = 0% sampling\n */\nexport function isSampled(sampleRate?: number): boolean {\n  if (sampleRate === undefined) {\n    return false;\n  }\n\n  // Math.random() returns a number in range of 0 to 1 (inclusive of 0, but not 1)\n  return Math.random() < sampleRate;\n}\n", "import { uuid4 } from '@sentry/utils';\n\nimport type { Sampled, Session } from '../types';\nimport { isSampled } from '../util/isSampled';\n\n/**\n * Get a session with defaults & applied sampling.\n */\nexport function makeSession(session: Partial<Session> & { sampled: Sampled }): Session {\n  const now = new Date().getTime();\n  const id = session.id || uuid4();\n  // Note that this means we cannot set a started/lastActivity of `0`, but this should not be relevant outside of tests.\n  const started = session.started || now;\n  const lastActivity = session.lastActivity || now;\n  const segmentId = session.segmentId || 0;\n  const sampled = session.sampled;\n\n  return {\n    id,\n    started,\n    lastActivity,\n    segmentId,\n    sampled,\n  };\n}\n\n/**\n * Get the sampled status for a session based on sample rates & current sampled status.\n */\nexport function getSessionSampleType(sessionSampleRate: number, errorSampleRate: number): Sampled {\n  return isSampled(sessionSampleRate) ? 'session' : isSampled(errorSampleRate) ? 'error' : false;\n}\n", "import { logger } from '@sentry/utils';\n\nimport type { Session, SessionOptions } from '../types';\nimport { saveSession } from './saveSession';\nimport { getSessionSampleType, makeSession } from './Session';\n\n/**\n * Create a new session, which in its current implementation is a Sentry event\n * that all replays will be saved to as attachments. Currently, we only expect\n * one of these Sentry events per \"replay session\".\n */\nexport function createSession({ sessionSampleRate, errorSampleRate, stickySession = false }: SessionOptions): Session {\n  const sampled = getSessionSampleType(sessionSampleRate, errorSampleRate);\n  const session = makeSession({\n    sampled,\n  });\n\n  __DEBUG_BUILD__ && logger.log(`[Replay] Creating new session: ${session.id}`);\n\n  if (stickySession) {\n    saveSession(session);\n  }\n\n  return session;\n}\n", "import { REPLAY_SESSION_KEY, WINDOW } from '../constants';\nimport type { Session } from '../types';\nimport { makeSession } from './Session';\n\n/**\n * Fetches a session from storage\n */\nexport function fetchSession(): Session | null {\n  const hasSessionStorage = 'sessionStorage' in WINDOW;\n\n  if (!hasSessionStorage) {\n    return null;\n  }\n\n  try {\n    // This can throw if cookies are disabled\n    const sessionStringFromStorage = WINDOW.sessionStorage.getItem(REPLAY_SESSION_KEY);\n\n    if (!sessionStringFromStorage) {\n      return null;\n    }\n\n    const sessionObj = JSON.parse(sessionStringFromStorage) as Session;\n\n    return makeSession(sessionObj);\n  } catch {\n    return null;\n  }\n}\n", "import { logger } from '@sentry/utils';\n\nimport type { Session, SessionOptions } from '../types';\nimport { isSessionExpired } from '../util/isSessionExpired';\nimport { createSession } from './createSession';\nimport { fetchSession } from './fetchSession';\nimport { makeSession } from './Session';\n\ninterface GetSessionParams extends SessionOptions {\n  /**\n   * The length of time (in ms) which we will consider the session to be expired.\n   */\n  expiry: number;\n\n  /**\n   * The current session (e.g. if stickySession is off)\n   */\n  currentSession?: Session;\n}\n\n/**\n * Get or create a session\n */\nexport function getSession({\n  expiry,\n  currentSession,\n  stickySession,\n  sessionSampleRate,\n  errorSampleRate,\n}: GetSessionParams): { type: 'new' | 'saved'; session: Session } {\n  // If session exists and is passed, use it instead of always hitting session storage\n  const session = currentSession || (stickySession && fetchSession());\n\n  if (session) {\n    // If there is a session, check if it is valid (e.g. \"last activity\" time\n    // should be within the \"session idle time\", and \"session started\" time is\n    // within \"max session time\").\n    const isExpired = isSessionExpired(session, expiry);\n\n    if (!isExpired) {\n      return { type: 'saved', session };\n    } else if (session.sampled === 'error') {\n      // Error samples should not be re-created when expired, but instead we stop when the replay is done\n      const discardedSession = makeSession({ sampled: false });\n      return { type: 'new', session: discardedSession };\n    } else {\n      __DEBUG_BUILD__ && logger.log('[Replay] Session has expired');\n    }\n    // Otherwise continue to create a new session\n  }\n\n  const newSession = createSession({\n    stickySession,\n    sessionSampleRate,\n    errorSampleRate,\n  });\n\n  return { type: 'new', session: newSession };\n}\n", "import { getCurrentHub } from '@sentry/core';\nimport { logger } from '@sentry/utils';\n\nimport { SESSION_IDLE_DURATION } from '../constants';\nimport type { AddEventResult, RecordingEvent, ReplayContainer } from '../types';\n\n/**\n * Add an event to the event buffer\n */\nexport async function addEvent(\n  replay: ReplayContainer,\n  event: RecordingEvent,\n  isCheckout?: boolean,\n): Promise<AddEventResult | null> {\n  if (!replay.eventBuffer) {\n    // This implies that `_isEnabled` is false\n    return null;\n  }\n\n  if (replay.isPaused()) {\n    // Do not add to event buffer when recording is paused\n    return null;\n  }\n\n  // TODO: sadness -- we will want to normalize timestamps to be in ms -\n  // requires coordination with frontend\n  const isMs = event.timestamp > 9999999999;\n  const timestampInMs = isMs ? event.timestamp : event.timestamp * 1000;\n\n  // Throw out events that happen more than 5 minutes ago. This can happen if\n  // page has been left open and idle for a long period of time and user\n  // comes back to trigger a new session. The performance entries rely on\n  // `performance.timeOrigin`, which is when the page first opened.\n  if (timestampInMs + SESSION_IDLE_DURATION < new Date().getTime()) {\n    return null;\n  }\n\n  // Only record earliest event if a new session was created, otherwise it\n  // shouldn't be relevant\n  const earliestEvent = replay.getContext().earliestEvent;\n  if (replay.session && replay.session.segmentId === 0 && (!earliestEvent || timestampInMs < earliestEvent)) {\n    replay.getContext().earliestEvent = timestampInMs;\n  }\n\n  try {\n    return await replay.eventBuffer.addEvent(event, isCheckout);\n  } catch (error) {\n    __DEBUG_BUILD__ && logger.error(error);\n    replay.stop('addEvent');\n\n    const client = getCurrentHub().getClient();\n\n    if (client) {\n      client.recordDroppedEvent('internal_sdk_error', 'replay');\n    }\n  }\n}\n", "import type { Breadcrumb } from '@sentry/types';\n\ntype RequiredProperties = 'category' | 'message';\n\n/**\n * Create a breadcrumb for a replay.\n */\nexport function createBreadcrumb(\n  breadcrumb: Pick<Breadcrumb, RequiredProperties> & Partial<Omit<Breadcrumb, RequiredProperties>>,\n): Breadcrumb {\n  return {\n    timestamp: new Date().getTime() / 1000,\n    type: 'default',\n    ...breadcrumb,\n  };\n}\n", "import { EventType } from '@sentry-internal/rrweb';\nimport type { Breadcrumb } from '@sentry/types';\n\nimport type { ReplayContainer } from '../types';\nimport { addEvent } from '../util/addEvent';\n\n/**\n * Add a breadcrumb event to replay.\n */\nexport function addBreadcrumbEvent(replay: ReplayContainer, breadcrumb: Breadcrumb): void {\n  if (breadcrumb.category === 'sentry.transaction') {\n    return;\n  }\n\n  if (breadcrumb.category === 'ui.click') {\n    replay.triggerUserActivity();\n  } else {\n    replay.checkAndHandleExpiredSession();\n  }\n\n  replay.addUpdate(() => {\n    void addEvent(replay, {\n      type: EventType.Custom,\n      // TODO: We were converting from ms to seconds for breadcrumbs, spans,\n      // but maybe we should just keep them as milliseconds\n      timestamp: (breadcrumb.timestamp || 0) * 1000,\n      data: {\n        tag: 'breadcrumb',\n        payload: breadcrumb,\n      },\n    });\n\n    // Do not flush after console log messages\n    return breadcrumb.category === 'console';\n  });\n}\n", "import { record } from '@sentry-internal/rrweb';\nimport type { Breadcrumb } from '@sentry/types';\nimport { htmlTreeAsString } from '@sentry/utils';\n\nimport type { ReplayContainer } from '../types';\nimport { createBreadcrumb } from '../util/createBreadcrumb';\nimport { addBreadcrumbEvent } from './addBreadcrumbEvent';\n\ninterface DomHandlerData {\n  name: string;\n  event: Node | { target: Node };\n}\n\nexport const handleDomListener: (replay: ReplayContainer) => (handlerData: DomHandlerData) => void =\n  (replay: ReplayContainer) =>\n  (handlerData: DomHandlerData): void => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleDom(handlerData);\n\n    if (!result) {\n      return;\n    }\n\n    addBreadcrumbEvent(replay, result);\n  };\n\n/**\n * An event handler to react to DOM events.\n */\nfunction handleDom(handlerData: DomHandlerData): Breadcrumb | null {\n  // Taken from https://github.com/getsentry/sentry-javascript/blob/master/packages/browser/src/integrations/breadcrumbs.ts#L112\n  let target;\n  let targetNode;\n\n  // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n  try {\n    targetNode = getTargetNode(handlerData);\n    target = htmlTreeAsString(targetNode);\n  } catch (e) {\n    target = '<unknown>';\n  }\n\n  if (target.length === 0) {\n    return null;\n  }\n\n  return createBreadcrumb({\n    category: `ui.${handlerData.name}`,\n    message: target,\n    data: {\n      // Not sure why this errors, Node should be correct (Argument of type 'Node' is not assignable to parameter of type 'INode')\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ...(targetNode ? { nodeId: record.mirror.getId(targetNode as any) } : {}),\n    },\n  });\n}\n\nfunction getTargetNode(handlerData: DomHandlerData): Node {\n  if (isEventWithTarget(handlerData.event)) {\n    return handlerData.event.target;\n  }\n\n  return handlerData.event;\n}\n\nfunction isEventWithTarget(event: unknown): event is { target: Node } {\n  return !!(event as { target?: Node }).target;\n}\n", "import { EventType } from '@sentry-internal/rrweb';\n\nimport type { AddEventResult, ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { addEvent } from './addEvent';\n\n/**\n * Create a \"span\" for each performance entry. The parent transaction is `this.replayEvent`.\n */\nexport function createPerformanceSpans(\n  replay: ReplayContainer,\n  entries: ReplayPerformanceEntry[],\n): Promise<AddEventResult | null>[] {\n  return entries.map(({ type, start, end, name, data }) =>\n    addEvent(replay, {\n      type: EventType.Custom,\n      timestamp: start,\n      data: {\n        tag: 'performanceSpan',\n        payload: {\n          op: type,\n          description: name,\n          startTimestamp: start,\n          endTimestamp: end,\n          data,\n        },\n      },\n    }),\n  );\n}\n", "import { getCurrentHub } from '@sentry/core';\n\nimport type { ReplayContainer } from '../types';\n\n/**\n * Check whether a given request URL should be filtered out. This is so we\n * don't log Sentry ingest requests.\n */\nexport function shouldFilterRequest(replay: ReplayContainer, url: string): boolean {\n  // If we enabled the `traceInternals` experiment, we want to trace everything\n  if (__DEBUG_BUILD__ && replay.getOptions()._experiments.traceInternals) {\n    return false;\n  }\n\n  return _isSentryRequest(url);\n}\n\n/**\n * Checks wether a given URL belongs to the configured Sentry DSN.\n */\nfunction _isSentryRequest(url: string): boolean {\n  const client = getCurrentHub().getClient();\n  const dsn = client && client.getDsn();\n  return dsn ? url.includes(dsn.host) : false;\n}\n", "import type { ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { createPerformanceSpans } from '../util/createPerformanceSpans';\nimport { shouldFilterRequest } from '../util/shouldFilterRequest';\n\ninterface FetchHandlerData {\n  args: Parameters<typeof fetch>;\n  fetchData: {\n    method: string;\n    url: string;\n  };\n  response: {\n    type: string;\n    url: string;\n    redirected: boolean;\n    status: number;\n    ok: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** only exported for tests */\nexport function handleFetch(handlerData: FetchHandlerData): null | ReplayPerformanceEntry {\n  if (!handlerData.endTimestamp) {\n    return null;\n  }\n\n  const { startTimestamp, endTimestamp, fetchData, response } = handlerData;\n\n  return {\n    type: 'resource.fetch',\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: fetchData.url,\n    data: {\n      method: fetchData.method,\n      statusCode: response.status,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('fetch', listener)`.\n */\nexport function handleFetchSpanListener(replay: ReplayContainer): (handlerData: FetchHandlerData) => void {\n  return (handlerData: FetchHandlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleFetch(handlerData);\n\n    if (result === null) {\n      return;\n    }\n\n    if (shouldFilterRequest(replay, result.name)) {\n      return;\n    }\n\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning true will cause `addUpdate` to not flush\n      // We do not want network requests to cause a flush. This will prevent\n      // recurring/polling requests from keeping the replay session alive.\n      return true;\n    });\n  };\n}\n", "import type { Event, EventHint } from '@sentry/types';\n\n/**\n * Returns true if we think the given event is an error originating inside of rrweb.\n */\nexport function isRrwebError(event: Event, hint: EventHint): boolean {\n  if (event.type || !event.exception || !event.exception.values || !event.exception.values.length) {\n    return false;\n  }\n\n  // @ts-ignore this may be set by rrweb when it finds errors\n  if (hint.originalException && hint.originalException.__rrweb__) {\n    return true;\n  }\n\n  // Check if any exception originates from rrweb\n  return event.exception.values.some(exception => {\n    if (!exception.stacktrace || !exception.stacktrace.frames || !exception.stacktrace.frames.length) {\n      return false;\n    }\n\n    return exception.stacktrace.frames.some(frame => frame.filename && frame.filename.includes('/rrweb/src/'));\n  });\n}\n", "import { addBreadcrumb } from '@sentry/core';\nimport type { Event, EventHint } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { REPLAY_EVENT_NAME, UNABLE_TO_SEND_REPLAY } from '../constants';\nimport type { ReplayContainer } from '../types';\nimport { isRrwebError } from '../util/isRrwebError';\n\n/**\n * Returns a listener to be added to `addGlobalEventProcessor(listener)`.\n */\nexport function handleGlobalEventListener(replay: ReplayContainer): (event: Event, hint: EventHint) => Event | null {\n  return (event: Event, hint: EventHint) => {\n    // Do not apply replayId to the root event\n    if (event.type === REPLAY_EVENT_NAME) {\n      // Replays have separate set of breadcrumbs, do not include breadcrumbs\n      // from core SDK\n      delete event.breadcrumbs;\n      return event;\n    }\n\n    // Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb\n    // As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users\n    if (isRrwebError(event, hint) && !replay.getOptions()._experiments.captureExceptions) {\n      __DEBUG_BUILD__ && logger.log('[Replay] Ignoring error from rrweb internals', event);\n      return null;\n    }\n\n    // Only tag transactions with replayId if not waiting for an error\n    // @ts-ignore private\n    if (!event.type || replay.recordingMode === 'session') {\n      event.tags = { ...event.tags, replayId: replay.getSessionId() };\n    }\n\n    // Collect traceIds in _context regardless of `recordingMode` - if it's true,\n    // _context gets cleared on every checkout\n    if (event.type === 'transaction' && event.contexts && event.contexts.trace && event.contexts.trace.trace_id) {\n      replay.getContext().traceIds.add(event.contexts.trace.trace_id as string);\n      return event;\n    }\n\n    // no event type means error\n    if (!event.type) {\n      replay.getContext().errorIds.add(event.event_id as string);\n    }\n\n    if (__DEBUG_BUILD__ && replay.getOptions()._experiments.traceInternals) {\n      const exc = getEventExceptionValues(event);\n      addInternalBreadcrumb({\n        message: `Tagging event (${event.event_id}) - ${event.message} - ${exc.type}: ${exc.value}`,\n      });\n    }\n\n    // Need to be very careful that this does not cause an infinite loop\n    if (\n      replay.recordingMode === 'error' &&\n      event.exception &&\n      event.message !== UNABLE_TO_SEND_REPLAY // ignore this error because otherwise we could loop indefinitely with trying to capture replay and failing\n    ) {\n      setTimeout(async () => {\n        // Allow flush to complete before resuming as a session recording, otherwise\n        // the checkout from `startRecording` may be included in the payload.\n        // Prefer to keep the error replay as a separate (and smaller) segment\n        // than the session replay.\n        await replay.flushImmediate();\n\n        if (replay.stopRecording()) {\n          // Reset all \"capture on error\" configuration before\n          // starting a new recording\n          replay.recordingMode = 'session';\n          replay.startRecording();\n        }\n      });\n    }\n\n    return event;\n  };\n}\n\nfunction addInternalBreadcrumb(arg: Parameters<typeof addBreadcrumb>[0]): void {\n  const { category, level, message, ...rest } = arg;\n\n  addBreadcrumb({\n    category: category || 'console',\n    level: level || 'debug',\n    message: `[debug]: ${message}`,\n    ...rest,\n  });\n}\n\nfunction getEventExceptionValues(event: Event): { type: string; value: string } {\n  return {\n    type: 'Unknown',\n    value: 'n/a',\n    ...(event.exception && event.exception.values && event.exception.values[0]),\n  };\n}\n", "import type { ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { createPerformanceSpans } from '../util/createPerformanceSpans';\n\ninterface HistoryHandlerData {\n  from: string;\n  to: string;\n}\n\nfunction handleHistory(handlerData: HistoryHandlerData): ReplayPerformanceEntry {\n  const { from, to } = handlerData;\n\n  const now = new Date().getTime() / 1000;\n\n  return {\n    type: 'navigation.push',\n    start: now,\n    end: now,\n    name: to,\n    data: {\n      previous: from,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('history', listener)`.\n */\nexport function handleHistorySpanListener(replay: ReplayContainer): (handlerData: HistoryHandlerData) => void {\n  return (handlerData: HistoryHandlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleHistory(handlerData);\n\n    if (result === null) {\n      return;\n    }\n\n    // Need to collect visited URLs\n    replay.getContext().urls.push(result.name);\n    replay.triggerUserActivity();\n\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning false to flush\n      return false;\n    });\n  };\n}\n", "import type { Breadcrumb, Scope } from '@sentry/types';\n\nimport type { ReplayContainer } from '../types';\nimport { createBreadcrumb } from '../util/createBreadcrumb';\nimport { addBreadcrumbEvent } from './addBreadcrumbEvent';\n\nlet _LAST_BREADCRUMB: null | Breadcrumb = null;\n\nexport const handleScopeListener: (replay: ReplayContainer) => (scope: Scope) => void =\n  (replay: ReplayContainer) =>\n  (scope: Scope): void => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleScope(scope);\n\n    if (!result) {\n      return;\n    }\n\n    addBreadcrumbEvent(replay, result);\n  };\n\n/**\n * An event handler to handle scope changes.\n */\nexport function handleScope(scope: Scope): Breadcrumb | null {\n  // TODO (v8): Remove this guard. This was put in place because we introduced\n  // Scope.getLastBreadcrumb mid-v7 which caused incompatibilities with older SDKs.\n  // For now, we'll just return null if the method doesn't exist but we should eventually\n  // get rid of this guard.\n  const newBreadcrumb = scope.getLastBreadcrumb && scope.getLastBreadcrumb();\n\n  // Listener can be called when breadcrumbs have not changed, so we store the\n  // reference to the last crumb and only return a crumb if it has changed\n  if (_LAST_BREADCRUMB === newBreadcrumb || !newBreadcrumb) {\n    return null;\n  }\n\n  _LAST_BREADCRUMB = newBreadcrumb;\n\n  if (\n    newBreadcrumb.category &&\n    (['fetch', 'xhr', 'sentry.event', 'sentry.transaction'].includes(newBreadcrumb.category) ||\n      newBreadcrumb.category.startsWith('ui.'))\n  ) {\n    return null;\n  }\n\n  return createBreadcrumb(newBreadcrumb);\n}\n", "import type { ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { createPerformanceSpans } from '../util/createPerformanceSpans';\nimport { shouldFilterRequest } from '../util/shouldFilterRequest';\n\n// From sentry-javascript\n// e.g. https://github.com/getsentry/sentry-javascript/blob/c7fc025bf9fa8c073fdb56351808ce53909fbe45/packages/utils/src/instrument.ts#L180\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: unknown;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n    startTimestamp?: number; // This is unique to replay SDK\n  };\n  // If Sentry key appears in request, don't capture as request\n  // See https://github.com/getsentry/sentry-javascript/blob/c7fc025bf9fa8c073fdb56351808ce53909fbe45/packages/utils/src/instrument.ts#L236\n  __sentry_own_request__?: boolean;\n}\n\ninterface XhrHandlerData {\n  args: [string, string];\n  xhr: SentryWrappedXMLHttpRequest;\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\nfunction handleXhr(handlerData: XhrHandlerData): ReplayPerformanceEntry | null {\n  if (handlerData.xhr.__sentry_own_request__) {\n    // Taken from sentry-javascript\n    // Only capture non-sentry requests\n    return null;\n  }\n\n  if (handlerData.startTimestamp) {\n    // TODO: See if this is still needed\n    handlerData.xhr.__sentry_xhr__ = handlerData.xhr.__sentry_xhr__ || {};\n    handlerData.xhr.__sentry_xhr__.startTimestamp = handlerData.startTimestamp;\n  }\n\n  if (!handlerData.endTimestamp) {\n    return null;\n  }\n\n  const { method, url, status_code: statusCode } = handlerData.xhr.__sentry_xhr__ || {};\n\n  if (url === undefined) {\n    return null;\n  }\n\n  const timestamp = handlerData.xhr.__sentry_xhr__\n    ? handlerData.xhr.__sentry_xhr__.startTimestamp || 0\n    : handlerData.endTimestamp;\n\n  return {\n    type: 'resource.xhr',\n    name: url,\n    start: timestamp / 1000,\n    end: handlerData.endTimestamp / 1000,\n    data: {\n      method,\n      statusCode,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('xhr', listener)`.\n */\nexport function handleXhrSpanListener(replay: ReplayContainer): (handlerData: XhrHandlerData) => void {\n  return (handlerData: XhrHandlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleXhr(handlerData);\n\n    if (result === null) {\n      return;\n    }\n\n    if (shouldFilterRequest(replay, result.name)) {\n      return;\n    }\n\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning true will cause `addUpdate` to not flush\n      // We do not want network requests to cause a flush. This will prevent\n      // recurring/polling requests from keeping the replay session alive.\n      return true;\n    });\n  };\n}\n", "import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { addInstrumentationHandler } from '@sentry/utils';\n\nimport { handleDomListener } from '../coreHandlers/handleDom';\nimport { handleFetchSpanListener } from '../coreHandlers/handleFetch';\nimport { handleGlobalEventListener } from '../coreHandlers/handleGlobalEvent';\nimport { handleHistorySpanListener } from '../coreHandlers/handleHistory';\nimport { handleScopeListener } from '../coreHandlers/handleScope';\nimport { handleXhrSpanListener } from '../coreHandlers/handleXhr';\nimport type { ReplayContainer } from '../types';\n\n/**\n * Add global listeners that cannot be removed.\n */\nexport function addGlobalListeners(replay: ReplayContainer): void {\n  // Listeners from core SDK //\n  const scope = getCurrentHub().getScope();\n  if (scope) {\n    scope.addScopeListener(handleScopeListener(replay));\n  }\n  addInstrumentationHandler('dom', handleDomListener(replay));\n  addInstrumentationHandler('fetch', handleFetchSpanListener(replay));\n  addInstrumentationHandler('xhr', handleXhrSpanListener(replay));\n  addInstrumentationHandler('history', handleHistorySpanListener(replay));\n\n  // Tag all (non replay) events that get sent to Sentry with the current\n  // replay ID so that we can reference them later in the UI\n  addGlobalEventProcessor(handleGlobalEventListener(replay));\n}\n", "import { WINDOW } from '../constants';\nimport type { AddEventResult, ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { createPerformanceSpans } from './createPerformanceSpans';\n\ntype ReplayMemoryEntry = ReplayPerformanceEntry & { data: { memory: MemoryInfo } };\n\ninterface MemoryInfo {\n  jsHeapSizeLimit: number;\n  totalJSHeapSize: number;\n  usedJSHeapSize: number;\n}\n\n/**\n * Create a \"span\" for the total amount of memory being used by JS objects\n * (including v8 internal objects).\n */\nexport async function addMemoryEntry(replay: ReplayContainer): Promise<Array<AddEventResult | null>> {\n  // window.performance.memory is a non-standard API and doesn't work on all browsers, so we try-catch this\n  try {\n    return Promise.all(\n      createPerformanceSpans(replay, [\n        // @ts-ignore memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)\n        createMemoryEntry(WINDOW.performance.memory),\n      ]),\n    );\n  } catch (error) {\n    // Do nothing\n    return [];\n  }\n}\n\nfunction createMemoryEntry(memoryEntry: MemoryInfo): ReplayMemoryEntry {\n  const { jsHeapSizeLimit, totalJSHeapSize, usedJSHeapSize } = memoryEntry;\n  // we don't want to use `getAbsoluteTime` because it adds the event time to the\n  // time origin, so we get the current timestamp instead\n  const time = new Date().getTime() / 1000;\n  return {\n    type: 'memory',\n    name: 'memory',\n    start: time,\n    end: time,\n    data: {\n      memory: {\n        jsHeapSizeLimit,\n        totalJSHeapSize,\n        usedJSHeapSize,\n      },\n    },\n  };\n}\n", "import { record } from '@sentry-internal/rrweb';\nimport { browserPerformanceTimeOrigin } from '@sentry/utils';\n\nimport { WINDOW } from '../constants';\nimport type {\n  AllPerformanceEntry,\n  PerformanceNavigationTiming,\n  PerformancePaintTiming,\n  ReplayPerformanceEntry,\n} from '../types';\n\n// Map entryType -> function to normalize data for event\n// @ts-ignore TODO: entry type does not fit the create* functions entry type\nconst ENTRY_TYPES: Record<string, (entry: AllPerformanceEntry) => null | ReplayPerformanceEntry> = {\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  resource: createResourceEntry,\n  paint: createPaintEntry,\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  navigation: createNavigationEntry,\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  ['largest-contentful-paint']: createLargestContentfulPaint,\n};\n\n/**\n * Create replay performance entries from the browser performance entries.\n */\nexport function createPerformanceEntries(entries: AllPerformanceEntry[]): ReplayPerformanceEntry[] {\n  return entries.map(createPerformanceEntry).filter(Boolean) as ReplayPerformanceEntry[];\n}\n\nfunction createPerformanceEntry(entry: AllPerformanceEntry): ReplayPerformanceEntry | null {\n  if (ENTRY_TYPES[entry.entryType] === undefined) {\n    return null;\n  }\n\n  return ENTRY_TYPES[entry.entryType](entry);\n}\n\nfunction getAbsoluteTime(time: number): number {\n  // browserPerformanceTimeOrigin can be undefined if `performance` or\n  // `performance.now` doesn't exist, but this is already checked by this integration\n  return ((browserPerformanceTimeOrigin || WINDOW.performance.timeOrigin) + time) / 1000;\n}\n\n// TODO: type definition!\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createPaintEntry(entry: PerformancePaintTiming) {\n  const { duration, entryType, name, startTime } = entry;\n\n  const start = getAbsoluteTime(startTime);\n  return {\n    type: entryType,\n    name,\n    start,\n    end: start + duration,\n  };\n}\n\n// TODO: type definition!\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createNavigationEntry(entry: PerformanceNavigationTiming) {\n  // TODO: There looks to be some more interesting bits in here (domComplete, domContentLoaded)\n  const { entryType, name, duration, domComplete, startTime, transferSize, type } = entry;\n\n  // Ignore entries with no duration, they do not seem to be useful and cause dupes\n  if (duration === 0) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${type}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(domComplete),\n    name,\n    data: {\n      size: transferSize,\n      duration,\n    },\n  };\n}\n\n// TODO: type definition!\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createResourceEntry(entry: PerformanceResourceTiming) {\n  const { entryType, initiatorType, name, responseEnd, startTime, encodedBodySize, transferSize } = entry;\n\n  // Core SDK handles these\n  if (['fetch', 'xmlhttprequest'].includes(initiatorType)) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${initiatorType}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(responseEnd),\n    name,\n    data: {\n      size: transferSize,\n      encodedBodySize,\n    },\n  };\n}\n\n// TODO: type definition!\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createLargestContentfulPaint(entry: PerformanceEntry & { size: number; element: Node }) {\n  const { entryType, startTime, size } = entry;\n\n  let startTimeOrNavigationActivation = 0;\n\n  if (WINDOW.performance) {\n    const navEntry = WINDOW.performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming & {\n      activationStart: number;\n    };\n\n    // See https://github.com/GoogleChrome/web-vitals/blob/9f11c4c6578fb4c5ee6fa4e32b9d1d756475f135/src/lib/getActivationStart.ts#L21\n    startTimeOrNavigationActivation = (navEntry && navEntry.activationStart) || 0;\n  }\n\n  // value is in ms\n  const value = Math.max(startTime - startTimeOrNavigationActivation, 0);\n  // LCP doesn't have a \"duration\", it just happens at a single point in time.\n  // But the UI expects both, so use end (in seconds) for both timestamps.\n  const end = getAbsoluteTime(startTimeOrNavigationActivation) + value / 1000;\n\n  return {\n    type: entryType,\n    name: entryType,\n    start: end,\n    end,\n    data: {\n      value, // LCP \"duration\" in ms\n      size,\n      // Not sure why this errors, Node should be correct (Argument of type 'Node' is not assignable to parameter of type 'INode')\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      nodeId: record.mirror.getId(entry.element as any),\n    },\n  };\n}\n", "type DebouncedCallback = {\n  (): void | unknown;\n  flush: () => void | unknown;\n  cancel: () => void;\n};\ntype CallbackFunction = () => unknown;\ntype DebounceOptions = { maxWait?: number };\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nexport function debounce(func: CallbackFunction, wait: number, options?: DebounceOptions): DebouncedCallback {\n  let callbackReturnValue: unknown;\n\n  let timerId: ReturnType<typeof setTimeout> | undefined;\n  let maxTimerId: ReturnType<typeof setTimeout> | undefined;\n\n  const maxWait = options && options.maxWait ? Math.max(options.maxWait, wait) : 0;\n\n  function invokeFunc(): unknown {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n\n  function cancelTimers(): void {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n\n  function flush(): unknown {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n\n  function debounced(): unknown {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(invokeFunc, wait);\n\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeout(invokeFunc, maxWait);\n    }\n\n    return callbackReturnValue;\n  }\n\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n", "import { getCurrentHub } from '@sentry/core';\nimport type { Client, DataCategory, Event, EventDropReason } from '@sentry/types';\n\nlet _originalRecordDroppedEvent: Client['recordDroppedEvent'] | undefined;\n\n/**\n * Overwrite the `recordDroppedEvent` method on the client, so we can find out which events were dropped.\n * */\nexport function overwriteRecordDroppedEvent(errorIds: Set<string>): void {\n  const client = getCurrentHub().getClient();\n\n  if (!client) {\n    return;\n  }\n\n  const _originalCallback = client.recordDroppedEvent.bind(client);\n\n  const recordDroppedEvent: Client['recordDroppedEvent'] = (\n    reason: EventDropReason,\n    category: DataCategory,\n    event?: Event,\n  ): void => {\n    if (event && !event.type && event.event_id) {\n      errorIds.delete(event.event_id);\n    }\n\n    return _originalCallback(reason, category, event);\n  };\n\n  client.recordDroppedEvent = recordDroppedEvent;\n  _originalRecordDroppedEvent = _originalCallback;\n}\n\n/**\n * Restore the original method.\n * */\nexport function restoreRecordDroppedEvent(): void {\n  const client = getCurrentHub().getClient();\n\n  if (!client || !_originalRecordDroppedEvent) {\n    return;\n  }\n\n  client.recordDroppedEvent = _originalRecordDroppedEvent;\n}\n", "import type { DsnComponents, ReplayEnvelope, ReplayEvent, ReplayRecordingData } from '@sentry/types';\nimport { createEnvelope, createEventEnvelopeHeaders, getSdkMetadataForEnvelopeHeader } from '@sentry/utils';\n\n/**\n * Create a replay envelope ready to be sent.\n * This includes both the replay event, as well as the recording data.\n */\nexport function createReplayEnvelope(\n  replayEvent: ReplayEvent,\n  recordingData: ReplayRecordingData,\n  dsn: DsnComponents,\n  tunnel?: string,\n): ReplayEnvelope {\n  return createEnvelope<ReplayEnvelope>(\n    createEventEnvelopeHeaders(replayEvent, getSdkMetadataForEnvelopeHeader(replayEvent), tunnel, dsn),\n    [\n      [{ type: 'replay_event' }, replayEvent],\n      [\n        {\n          type: 'replay_recording',\n          // If string then we need to encode to UTF8, otherwise will have\n          // wrong size. TextEncoder has similar browser support to\n          // MutationObserver, although it does not accept IE11.\n          length:\n            typeof recordingData === 'string' ? new TextEncoder().encode(recordingData).length : recordingData.length,\n        },\n        recordingData,\n      ],\n    ],\n  );\n}\n", "import type { ReplayRecordingData } from '@sentry/types';\n\n/**\n * Prepare the recording data ready to be sent.\n */\nexport function prepareRecordingData({\n  recordingData,\n  headers,\n}: {\n  recordingData: ReplayRecordingData;\n  headers: Record<string, unknown>;\n}): ReplayRecordingData {\n  let payloadWithSequence;\n\n  // XXX: newline is needed to separate sequence id from events\n  const replayHeaders = `${JSON.stringify(headers)}\n`;\n\n  if (typeof recordingData === 'string') {\n    payloadWithSequence = `${replayHeaders}${recordingData}`;\n  } else {\n    const enc = new TextEncoder();\n    // XXX: newline is needed to separate sequence id from events\n    const sequence = enc.encode(replayHeaders);\n    // Merge the two Uint8Arrays\n    payloadWithSequence = new Uint8Array(sequence.length + recordingData.length);\n    payloadWithSequence.set(sequence);\n    payloadWithSequence.set(recordingData, sequence.length);\n  }\n\n  return payloadWithSequence;\n}\n", "import type { Scope } from '@sentry/core';\nimport { prepareEvent } from '@sentry/core';\nimport type { IntegrationIndex } from '@sentry/core/build/types/integration';\nimport type { Client, ReplayEvent } from '@sentry/types';\n\n/**\n * Prepare a replay event & enrich it with the SDK metadata.\n */\nexport async function prepareReplayEvent({\n  client,\n  scope,\n  replayId: event_id,\n  event,\n}: {\n  client: Client & { _integrations?: IntegrationIndex };\n  scope: Scope;\n  replayId: string;\n  event: ReplayEvent;\n}): Promise<ReplayEvent | null> {\n  const integrations =\n    typeof client._integrations === 'object' && client._integrations !== null && !Array.isArray(client._integrations)\n      ? Object.keys(client._integrations)\n      : undefined;\n  const preparedEvent = (await prepareEvent(\n    client.getOptions(),\n    event,\n    { event_id, integrations },\n    scope,\n  )) as ReplayEvent | null;\n\n  // If e.g. a global event processor returned null\n  if (!preparedEvent) {\n    return null;\n  }\n\n  // This normally happens in browser client \"_prepareEvent\"\n  // but since we do not use this private method from the client, but rather the plain import\n  // we need to do this manually.\n  preparedEvent.platform = preparedEvent.platform || 'javascript';\n\n  // extract the SDK name because `client._prepareEvent` doesn't add it to the event\n  const metadata = client.getSdkMetadata && client.getSdkMetadata();\n  const { name, version } = (metadata && metadata.sdk) || {};\n\n  preparedEvent.sdk = {\n    ...preparedEvent.sdk,\n    name: name || 'sentry.javascript.unknown',\n    version: version || '0.0.0',\n  };\n\n  return preparedEvent;\n}\n", "import { getCurrentHub } from '@sentry/core';\nimport type { ReplayEvent, TransportMakeRequestResponse } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { REPLAY_EVENT_NAME, UNABLE_TO_SEND_REPLAY } from '../constants';\nimport type { SendReplayData } from '../types';\nimport { createReplayEnvelope } from './createReplayEnvelope';\nimport { prepareRecordingData } from './prepareRecordingData';\nimport { prepareReplayEvent } from './prepareReplayEvent';\n\n/**\n * Send replay attachment using `fetch()`\n */\nexport async function sendReplayRequest({\n  recordingData,\n  replayId,\n  segmentId: segment_id,\n  includeReplayStartTimestamp,\n  eventContext,\n  timestamp,\n  session,\n  options,\n}: SendReplayData): Promise<void | TransportMakeRequestResponse> {\n  const preparedRecordingData = prepareRecordingData({\n    recordingData,\n    headers: {\n      segment_id,\n    },\n  });\n\n  const { urls, errorIds, traceIds, initialTimestamp } = eventContext;\n\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n  const scope = hub.getScope();\n  const transport = client && client.getTransport();\n  const dsn = client && client.getDsn();\n\n  if (!client || !scope || !transport || !dsn || !session.sampled) {\n    return;\n  }\n\n  const baseEvent: ReplayEvent = {\n    // @ts-ignore private api\n    type: REPLAY_EVENT_NAME,\n    ...(includeReplayStartTimestamp ? { replay_start_timestamp: initialTimestamp / 1000 } : {}),\n    timestamp: timestamp / 1000,\n    error_ids: errorIds,\n    trace_ids: traceIds,\n    urls,\n    replay_id: replayId,\n    segment_id,\n    replay_type: session.sampled,\n  };\n\n  const replayEvent = await prepareReplayEvent({ scope, client, replayId, event: baseEvent });\n\n  if (!replayEvent) {\n    // Taken from baseclient's `_processEvent` method, where this is handled for errors/transactions\n    client.recordDroppedEvent('event_processor', 'replay', baseEvent);\n    __DEBUG_BUILD__ && logger.log('An event processor returned `null`, will not send event.');\n    return;\n  }\n\n  replayEvent.contexts = {\n    ...replayEvent.contexts,\n    replay: {\n      ...(replayEvent.contexts && replayEvent.contexts.replay),\n      session_sample_rate: options.sessionSampleRate,\n      error_sample_rate: options.errorSampleRate,\n    },\n  };\n\n  /*\n  For reference, the fully built event looks something like this:\n  {\n      \"type\": \"replay_event\",\n      \"timestamp\": 1670837008.634,\n      \"error_ids\": [\n          \"errorId\"\n      ],\n      \"trace_ids\": [\n          \"traceId\"\n      ],\n      \"urls\": [\n          \"https://example.com\"\n      ],\n      \"replay_id\": \"eventId\",\n      \"segment_id\": 3,\n      \"replay_type\": \"error\",\n      \"platform\": \"javascript\",\n      \"event_id\": \"eventId\",\n      \"environment\": \"production\",\n      \"sdk\": {\n          \"integrations\": [\n              \"BrowserTracing\",\n              \"Replay\"\n          ],\n          \"name\": \"sentry.javascript.browser\",\n          \"version\": \"7.25.0\"\n      },\n      \"sdkProcessingMetadata\": {},\n      \"contexts\": {\n        \"replay\": {\n          \"session_sample_rate\": 1,\n          \"error_sample_rate\": 0,\n        },\n      },\n  }\n  */\n\n  const envelope = createReplayEnvelope(replayEvent, preparedRecordingData, dsn, client.getOptions().tunnel);\n\n  let response: void | TransportMakeRequestResponse;\n\n  try {\n    response = await transport.send(envelope);\n  } catch {\n    throw new Error(UNABLE_TO_SEND_REPLAY);\n  }\n\n  // TODO (v8): we can remove this guard once transport.send's type signature doesn't include void anymore\n  if (!response) {\n    return response;\n  }\n\n  // If the status code is invalid, we want to immediately stop & not retry\n  if (typeof response.statusCode === 'number' && (response.statusCode < 200 || response.statusCode >= 300)) {\n    throw new TransportStatusCodeError(response.statusCode);\n  }\n\n  return response;\n}\n\n/**\n * This error indicates that the transport returned an invalid status code.\n */\nexport class TransportStatusCodeError extends Error {\n  public constructor(statusCode: number) {\n    super(`Transport returned status code ${statusCode}`);\n  }\n}\n", "import { captureException, setContext } from '@sentry/core';\n\nimport { RETRY_BASE_INTERVAL, RETRY_MAX_COUNT, UNABLE_TO_SEND_REPLAY } from '../constants';\nimport type { SendReplayData } from '../types';\nimport { sendReplayRequest, TransportStatusCodeError } from './sendReplayRequest';\n\n/**\n * Finalize and send the current replay event to Sentry\n */\nexport async function sendReplay(\n  replayData: SendReplayData,\n  retryConfig = {\n    count: 0,\n    interval: RETRY_BASE_INTERVAL,\n  },\n): Promise<unknown> {\n  const { recordingData, options } = replayData;\n\n  // short circuit if there's no events to upload (this shouldn't happen as _runFlush makes this check)\n  if (!recordingData.length) {\n    return;\n  }\n\n  try {\n    await sendReplayRequest(replayData);\n    return true;\n  } catch (err) {\n    if (err instanceof TransportStatusCodeError) {\n      throw err;\n    }\n\n    // Capture error for every failed replay\n    setContext('Replays', {\n      _retryCount: retryConfig.count,\n    });\n\n    if (__DEBUG_BUILD__ && options._experiments && options._experiments.captureExceptions) {\n      captureException(err);\n    }\n\n    // If an error happened here, it's likely that uploading the attachment\n    // failed, we'll can retry with the same events payload\n    if (retryConfig.count >= RETRY_MAX_COUNT) {\n      throw new Error(`${UNABLE_TO_SEND_REPLAY} - max retries exceeded`);\n    }\n\n    // will retry in intervals of 5, 10, 30\n    retryConfig.interval *= ++retryConfig.count;\n\n    return await new Promise((resolve, reject) => {\n      setTimeout(async () => {\n        try {\n          await sendReplay(replayData, retryConfig);\n          resolve(true);\n        } catch (err) {\n          reject(err);\n        }\n      }, retryConfig.interval);\n    });\n  }\n}\n", "/* eslint-disable max-lines */ // TODO: We might want to split this file up\nimport { EventType, record } from '@sentry-internal/rrweb';\nimport { captureException, getCurrentHub } from '@sentry/core';\nimport type { Breadcrumb, ReplayRecordingMode } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport {\n  ERROR_CHECKOUT_TIME,\n  MAX_SESSION_LIFE,\n  SESSION_IDLE_DURATION,\n  VISIBILITY_CHANGE_TIMEOUT,\n  WINDOW,\n} from './constants';\nimport { setupPerformanceObserver } from './coreHandlers/performanceObserver';\nimport { createEventBuffer } from './eventBuffer';\nimport { getSession } from './session/getSession';\nimport { saveSession } from './session/saveSession';\nimport type {\n  AddEventResult,\n  AddUpdateCallback,\n  AllPerformanceEntry,\n  EventBuffer,\n  InternalEventContext,\n  PopEventContext,\n  RecordingEvent,\n  RecordingOptions,\n  ReplayContainer as ReplayContainerInterface,\n  ReplayPluginOptions,\n  Session,\n} from './types';\nimport { addEvent } from './util/addEvent';\nimport { addGlobalListeners } from './util/addGlobalListeners';\nimport { addMemoryEntry } from './util/addMemoryEntry';\nimport { createBreadcrumb } from './util/createBreadcrumb';\nimport { createPerformanceEntries } from './util/createPerformanceEntries';\nimport { createPerformanceSpans } from './util/createPerformanceSpans';\nimport { debounce } from './util/debounce';\nimport { isExpired } from './util/isExpired';\nimport { isSessionExpired } from './util/isSessionExpired';\nimport { overwriteRecordDroppedEvent, restoreRecordDroppedEvent } from './util/monkeyPatchRecordDroppedEvent';\nimport { sendReplay } from './util/sendReplay';\n\n/**\n * The main replay container class, which holds all the state and methods for recording and sending replays.\n */\nexport class ReplayContainer implements ReplayContainerInterface {\n  public eventBuffer: EventBuffer | null = null;\n\n  /**\n   * List of PerformanceEntry from PerformanceObserver\n   */\n  public performanceEvents: AllPerformanceEntry[] = [];\n\n  public session: Session | undefined;\n\n  /**\n   * Recording can happen in one of two modes:\n   * * session: Record the whole session, sending it continuously\n   * * error: Always keep the last 60s of recording, and when an error occurs, send it immediately\n   */\n  public recordingMode: ReplayRecordingMode = 'session';\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n  private readonly _recordingOptions: RecordingOptions;\n\n  private readonly _options: ReplayPluginOptions;\n\n  private _performanceObserver: PerformanceObserver | null = null;\n\n  private _debouncedFlush: ReturnType<typeof debounce>;\n  private _flushLock: Promise<unknown> | null = null;\n\n  /**\n   * Timestamp of the last user activity. This lives across sessions.\n   */\n  private _lastActivity: number = new Date().getTime();\n\n  /**\n   * Is the integration currently active?\n   */\n  private _isEnabled: boolean = false;\n\n  /**\n   * Paused is a state where:\n   * - DOM Recording is not listening at all\n   * - Nothing will be added to event buffer (e.g. core SDK events)\n   */\n  private _isPaused: boolean = false;\n\n  /**\n   * Have we attached listeners to the core SDK?\n   * Note we have to track this as there is no way to remove instrumentation handlers.\n   */\n  private _hasInitializedCoreListeners: boolean = false;\n\n  /**\n   * Function to stop recording\n   */\n  private _stopRecording: ReturnType<typeof record> | null = null;\n\n  private _context: InternalEventContext = {\n    errorIds: new Set(),\n    traceIds: new Set(),\n    urls: [],\n    earliestEvent: null,\n    initialTimestamp: new Date().getTime(),\n    initialUrl: '',\n  };\n\n  public constructor({\n    options,\n    recordingOptions,\n  }: {\n    options: ReplayPluginOptions;\n    recordingOptions: RecordingOptions;\n  }) {\n    this._recordingOptions = recordingOptions;\n    this._options = options;\n\n    this._debouncedFlush = debounce(() => this._flush(), this._options.flushMinDelay, {\n      maxWait: this._options.flushMaxDelay,\n    });\n  }\n\n  /** Get the event context. */\n  public getContext(): InternalEventContext {\n    return this._context;\n  }\n\n  /** If recording is currently enabled. */\n  public isEnabled(): boolean {\n    return this._isEnabled;\n  }\n\n  /** If recording is currently paused. */\n  public isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /** Get the replay integration options. */\n  public getOptions(): ReplayPluginOptions {\n    return this._options;\n  }\n\n  /**\n   * Initializes the plugin.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * _performanceObserver, Recording, Sentry SDK, etc)\n   */\n  public start(): void {\n    this._setInitialState();\n\n    if (!this._loadAndCheckSession()) {\n      return;\n    }\n\n    // If there is no session, then something bad has happened - can't continue\n    if (!this.session) {\n      this._handleException(new Error('No session found'));\n      return;\n    }\n\n    if (!this.session.sampled) {\n      // If session was not sampled, then we do not initialize the integration at all.\n      return;\n    }\n\n    // If session is sampled for errors, then we need to set the recordingMode\n    // to 'error', which will configure recording with different options.\n    if (this.session.sampled === 'error') {\n      this.recordingMode = 'error';\n    }\n\n    // setup() is generally called on page load or manually - in both cases we\n    // should treat it as an activity\n    this._updateSessionActivity();\n\n    this.eventBuffer = createEventBuffer({\n      useCompression: this._options.useCompression,\n    });\n\n    this._addListeners();\n\n    // Need to set as enabled before we start recording, as `record()` can trigger a flush with a new checkout\n    this._isEnabled = true;\n\n    this.startRecording();\n  }\n\n  /**\n   * Start recording.\n   *\n   * Note that this will cause a new DOM checkout\n   */\n  public startRecording(): void {\n    try {\n      this._stopRecording = record({\n        ...this._recordingOptions,\n        // When running in error sampling mode, we need to overwrite `checkoutEveryNms`\n        // Without this, it would record forever, until an error happens, which we don't want\n        // instead, we'll always keep the last 60 seconds of replay before an error happened\n        ...(this.recordingMode === 'error' && { checkoutEveryNms: ERROR_CHECKOUT_TIME }),\n        emit: this._handleRecordingEmit,\n      });\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Stops the recording, if it was running.\n   * Returns true if it was stopped, else false.\n   */\n  public stopRecording(): boolean {\n    try {\n      if (this._stopRecording) {\n        this._stopRecording();\n        this._stopRecording = undefined;\n        return true;\n      }\n\n      return false;\n    } catch (err) {\n      this._handleException(err);\n      return false;\n    }\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n  public stop(reason?: string): void {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    try {\n      if (__DEBUG_BUILD__) {\n        const msg = `[Replay] Stopping Replay${reason ? ` triggered by ${reason}` : ''}`;\n\n        // When `traceInternals` is enabled, we want to log this to the console\n        // Else, use the regular debug output\n        // eslint-disable-next-line\n        const log = this.getOptions()._experiments.traceInternals ? console.warn : logger.log;\n        log(msg);\n      }\n\n      this._isEnabled = false;\n      this._removeListeners();\n      this.stopRecording();\n      this.eventBuffer && this.eventBuffer.destroy();\n      this.eventBuffer = null;\n      this._debouncedFlush.cancel();\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Pause some replay functionality. See comments for `_isPaused`.\n   * This differs from stop as this only stops DOM recording, it is\n   * not as thorough of a shutdown as `stop()`.\n   */\n  public pause(): void {\n    this._isPaused = true;\n    this.stopRecording();\n  }\n\n  /**\n   * Resumes recording, see notes for `pause().\n   *\n   * Note that calling `startRecording()` here will cause a\n   * new DOM checkout.`\n   */\n  public resume(): void {\n    if (!this._loadAndCheckSession()) {\n      return;\n    }\n\n    this._isPaused = false;\n    this.startRecording();\n  }\n\n  /**\n   * We want to batch uploads of replay events. Save events only if\n   * `<flushMinDelay>` milliseconds have elapsed since the last event\n   * *OR* if `<flushMaxDelay>` milliseconds have elapsed.\n   *\n   * Accepts a callback to perform side-effects and returns true to stop batch\n   * processing and hand back control to caller.\n   */\n  public addUpdate(cb: AddUpdateCallback): void {\n    // We need to always run `cb` (e.g. in the case of `this.recordingMode == 'error'`)\n    const cbResult = cb();\n\n    // If this option is turned on then we will only want to call `flush`\n    // explicitly\n    if (this.recordingMode === 'error') {\n      return;\n    }\n\n    // If callback is true, we do not want to continue with flushing -- the\n    // caller will need to handle it.\n    if (cbResult === true) {\n      return;\n    }\n\n    // addUpdate is called quite frequently - use _debouncedFlush so that it\n    // respects the flush delays and does not flush immediately\n    this._debouncedFlush();\n  }\n\n  /**\n   * Updates the user activity timestamp and resumes recording. This should be\n   * called in an event handler for a user action that we consider as the user\n   * being \"active\" (e.g. a mouse click).\n   */\n  public triggerUserActivity(): void {\n    this._updateUserActivity();\n\n    // This case means that recording was once stopped due to inactivity.\n    // Ensure that recording is resumed.\n    if (!this._stopRecording) {\n      // Create a new session, otherwise when the user action is flushed, it\n      // will get rejected due to an expired session.\n      if (!this._loadAndCheckSession()) {\n        return;\n      }\n\n      // Note: This will cause a new DOM checkout\n      this.resume();\n      return;\n    }\n\n    // Otherwise... recording was never suspended, continue as normalish\n    this.checkAndHandleExpiredSession();\n\n    this._updateSessionActivity();\n  }\n\n  /**\n   *\n   * Always flush via `_debouncedFlush` so that we do not have flushes triggered\n   * from calling both `flush` and `_debouncedFlush`. Otherwise, there could be\n   * cases of mulitple flushes happening closely together.\n   */\n  public flushImmediate(): Promise<void> {\n    this._debouncedFlush();\n    // `.flush` is provided by the debounced function, analogously to lodash.debounce\n    return this._debouncedFlush.flush() as Promise<void>;\n  }\n\n  /** Get the current sesion (=replay) ID */\n  public getSessionId(): string | undefined {\n    return this.session && this.session.id;\n  }\n\n  /**\n   * Checks if recording should be stopped due to user inactivity. Otherwise\n   * check if session is expired and create a new session if so. Triggers a new\n   * full snapshot on new session.\n   *\n   * Returns true if session is not expired, false otherwise.\n   * @hidden\n   */\n  public checkAndHandleExpiredSession(expiry?: number): boolean | void {\n    const oldSessionId = this.getSessionId();\n\n    // Prevent starting a new session if the last user activity is older than\n    // MAX_SESSION_LIFE. Otherwise non-user activity can trigger a new\n    // session+recording. This creates noisy replays that do not have much\n    // content in them.\n    if (this._lastActivity && isExpired(this._lastActivity, MAX_SESSION_LIFE)) {\n      // Pause recording\n      this.pause();\n      return;\n    }\n\n    // --- There is recent user activity --- //\n    // This will create a new session if expired, based on expiry length\n    if (!this._loadAndCheckSession(expiry)) {\n      return;\n    }\n\n    // Session was expired if session ids do not match\n    const expired = oldSessionId !== this.getSessionId();\n\n    if (!expired) {\n      return true;\n    }\n\n    // Session is expired, trigger a full snapshot (which will create a new session)\n    this._triggerFullSnapshot();\n\n    return false;\n  }\n\n  /** A wrapper to conditionally capture exceptions. */\n  private _handleException(error: unknown): void {\n    __DEBUG_BUILD__ && logger.error('[Replay]', error);\n\n    if (__DEBUG_BUILD__ && this._options._experiments && this._options._experiments.captureExceptions) {\n      captureException(error);\n    }\n  }\n\n  /**\n   * Loads (or refreshes) the current session.\n   * Returns false if session is not recorded.\n   */\n  private _loadAndCheckSession(expiry = SESSION_IDLE_DURATION): boolean {\n    const { type, session } = getSession({\n      expiry,\n      stickySession: Boolean(this._options.stickySession),\n      currentSession: this.session,\n      sessionSampleRate: this._options.sessionSampleRate,\n      errorSampleRate: this._options.errorSampleRate,\n    });\n\n    // If session was newly created (i.e. was not loaded from storage), then\n    // enable flag to create the root replay\n    if (type === 'new') {\n      this._setInitialState();\n    }\n\n    const currentSessionId = this.getSessionId();\n    if (session.id !== currentSessionId) {\n      session.previousSessionId = currentSessionId;\n    }\n\n    this.session = session;\n\n    if (!this.session.sampled) {\n      this.stop('session unsampled');\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Capture some initial state that can change throughout the lifespan of the\n   * replay. This is required because otherwise they would be captured at the\n   * first flush.\n   */\n  private _setInitialState(): void {\n    const urlPath = `${WINDOW.location.pathname}${WINDOW.location.hash}${WINDOW.location.search}`;\n    const url = `${WINDOW.location.origin}${urlPath}`;\n\n    this.performanceEvents = [];\n\n    // Reset _context as well\n    this._clearContext();\n\n    this._context.initialUrl = url;\n    this._context.initialTimestamp = new Date().getTime();\n    this._context.urls.push(url);\n  }\n\n  /**\n   * Adds listeners to record events for the replay\n   */\n  private _addListeners(): void {\n    try {\n      WINDOW.document.addEventListener('visibilitychange', this._handleVisibilityChange);\n      WINDOW.addEventListener('blur', this._handleWindowBlur);\n      WINDOW.addEventListener('focus', this._handleWindowFocus);\n\n      // We need to filter out dropped events captured by `addGlobalEventProcessor(this.handleGlobalEvent)` below\n      overwriteRecordDroppedEvent(this._context.errorIds);\n\n      // There is no way to remove these listeners, so ensure they are only added once\n      if (!this._hasInitializedCoreListeners) {\n        addGlobalListeners(this);\n\n        this._hasInitializedCoreListeners = true;\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n\n    // PerformanceObserver //\n    if (!('PerformanceObserver' in WINDOW)) {\n      return;\n    }\n\n    this._performanceObserver = setupPerformanceObserver(this);\n  }\n\n  /**\n   * Cleans up listeners that were created in `_addListeners`\n   */\n  private _removeListeners(): void {\n    try {\n      WINDOW.document.removeEventListener('visibilitychange', this._handleVisibilityChange);\n\n      WINDOW.removeEventListener('blur', this._handleWindowBlur);\n      WINDOW.removeEventListener('focus', this._handleWindowFocus);\n\n      restoreRecordDroppedEvent();\n\n      if (this._performanceObserver) {\n        this._performanceObserver.disconnect();\n        this._performanceObserver = null;\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Handler for recording events.\n   *\n   * Adds to event buffer, and has varying flushing behaviors if the event was a checkout.\n   */\n  private _handleRecordingEmit: (event: RecordingEvent, isCheckout?: boolean) => void = (\n    event: RecordingEvent,\n    isCheckout?: boolean,\n  ) => {\n    // If this is false, it means session is expired, create and a new session and wait for checkout\n    if (!this.checkAndHandleExpiredSession()) {\n      __DEBUG_BUILD__ && logger.error('[Replay] Received replay event after session expired.');\n\n      return;\n    }\n\n    this.addUpdate(() => {\n      // The session is always started immediately on pageload/init, but for\n      // error-only replays, it should reflect the most recent checkout\n      // when an error occurs. Clear any state that happens before this current\n      // checkout. This needs to happen before `addEvent()` which updates state\n      // dependent on this reset.\n      if (this.recordingMode === 'error' && event.type === 2) {\n        this._setInitialState();\n      }\n\n      // We need to clear existing events on a checkout, otherwise they are\n      // incremental event updates and should be appended\n      void addEvent(this, event, isCheckout);\n\n      // Different behavior for full snapshots (type=2), ignore other event types\n      // See https://github.com/rrweb-io/rrweb/blob/d8f9290ca496712aa1e7d472549480c4e7876594/packages/rrweb/src/types.ts#L16\n      if (event.type !== 2) {\n        return false;\n      }\n\n      // If there is a previousSessionId after a full snapshot occurs, then\n      // the replay session was started due to session expiration. The new session\n      // is started before triggering a new checkout and contains the id\n      // of the previous session. Do not immediately flush in this case\n      // to avoid capturing only the checkout and instead the replay will\n      // be captured if they perform any follow-up actions.\n      if (this.session && this.session.previousSessionId) {\n        return true;\n      }\n\n      // See note above re: session start needs to reflect the most recent\n      // checkout.\n      if (this.recordingMode === 'error' && this.session && this._context.earliestEvent) {\n        this.session.started = this._context.earliestEvent;\n        this._maybeSaveSession();\n      }\n\n      // Flush immediately so that we do not miss the first segment, otherwise\n      // it can prevent loading on the UI. This will cause an increase in short\n      // replays (e.g. opening and closing a tab quickly), but these can be\n      // filtered on the UI.\n      if (this.recordingMode === 'session') {\n        // We want to ensure the worker is ready, as otherwise we'd always send the first event uncompressed\n        void this.flushImmediate();\n      }\n\n      return true;\n    });\n  };\n\n  /**\n   * Handle when visibility of the page content changes. Opening a new tab will\n   * cause the state to change to hidden because of content of current page will\n   * be hidden. Likewise, moving a different window to cover the contents of the\n   * page will also trigger a change to a hidden state.\n   */\n  private _handleVisibilityChange: () => void = () => {\n    if (WINDOW.document.visibilityState === 'visible') {\n      this._doChangeToForegroundTasks();\n    } else {\n      this._doChangeToBackgroundTasks();\n    }\n  };\n\n  /**\n   * Handle when page is blurred\n   */\n  private _handleWindowBlur: () => void = () => {\n    const breadcrumb = createBreadcrumb({\n      category: 'ui.blur',\n    });\n\n    // Do not count blur as a user action -- it's part of the process of them\n    // leaving the page\n    this._doChangeToBackgroundTasks(breadcrumb);\n  };\n\n  /**\n   * Handle when page is focused\n   */\n  private _handleWindowFocus: () => void = () => {\n    const breadcrumb = createBreadcrumb({\n      category: 'ui.focus',\n    });\n\n    // Do not count focus as a user action -- instead wait until they focus and\n    // interactive with page\n    this._doChangeToForegroundTasks(breadcrumb);\n  };\n\n  /**\n   * Tasks to run when we consider a page to be hidden (via blurring and/or visibility)\n   */\n  private _doChangeToBackgroundTasks(breadcrumb?: Breadcrumb): void {\n    if (!this.session) {\n      return;\n    }\n\n    const expired = isSessionExpired(this.session, VISIBILITY_CHANGE_TIMEOUT);\n\n    if (breadcrumb && !expired) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n\n    // Send replay when the page/tab becomes hidden. There is no reason to send\n    // replay if it becomes visible, since no actions we care about were done\n    // while it was hidden\n    this._conditionalFlush();\n  }\n\n  /**\n   * Tasks to run when we consider a page to be visible (via focus and/or visibility)\n   */\n  private _doChangeToForegroundTasks(breadcrumb?: Breadcrumb): void {\n    if (!this.session) {\n      return;\n    }\n\n    const isSessionActive = this.checkAndHandleExpiredSession(VISIBILITY_CHANGE_TIMEOUT);\n\n    if (!isSessionActive) {\n      // If the user has come back to the page within VISIBILITY_CHANGE_TIMEOUT\n      // ms, we will re-use the existing session, otherwise create a new\n      // session\n      __DEBUG_BUILD__ && logger.log('[Replay] Document has become active, but session has expired');\n      return;\n    }\n\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n  }\n\n  /**\n   * Trigger rrweb to take a full snapshot which will cause this plugin to\n   * create a new Replay event.\n   */\n  private _triggerFullSnapshot(): void {\n    try {\n      __DEBUG_BUILD__ && logger.log('[Replay] Taking full rrweb snapshot');\n      record.takeFullSnapshot(true);\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Update user activity (across session lifespans)\n   */\n  private _updateUserActivity(_lastActivity: number = new Date().getTime()): void {\n    this._lastActivity = _lastActivity;\n  }\n\n  /**\n   * Updates the session's last activity timestamp\n   */\n  private _updateSessionActivity(_lastActivity: number = new Date().getTime()): void {\n    if (this.session) {\n      this.session.lastActivity = _lastActivity;\n      this._maybeSaveSession();\n    }\n  }\n\n  /**\n   * Helper to create (and buffer) a replay breadcrumb from a core SDK breadcrumb\n   */\n  private _createCustomBreadcrumb(breadcrumb: Breadcrumb): void {\n    this.addUpdate(() => {\n      void addEvent(this, {\n        type: EventType.Custom,\n        timestamp: breadcrumb.timestamp || 0,\n        data: {\n          tag: 'breadcrumb',\n          payload: breadcrumb,\n        },\n      });\n    });\n  }\n\n  /**\n   * Observed performance events are added to `this.performanceEvents`. These\n   * are included in the replay event before it is finished and sent to Sentry.\n   */\n  private _addPerformanceEntries(): Promise<Array<AddEventResult | null>> {\n    // Copy and reset entries before processing\n    const entries = [...this.performanceEvents];\n    this.performanceEvents = [];\n\n    return Promise.all(createPerformanceSpans(this, createPerformanceEntries(entries)));\n  }\n\n  /**\n   * Only flush if `this.recordingMode === 'session'`\n   */\n  private _conditionalFlush(): void {\n    if (this.recordingMode === 'error') {\n      return;\n    }\n\n    void this.flushImmediate();\n  }\n\n  /**\n   * Clear _context\n   */\n  private _clearContext(): void {\n    // XXX: `initialTimestamp` and `initialUrl` do not get cleared\n    this._context.errorIds.clear();\n    this._context.traceIds.clear();\n    this._context.urls = [];\n    this._context.earliestEvent = null;\n  }\n\n  /**\n   * Return and clear _context\n   */\n  private _popEventContext(): PopEventContext {\n    if (this._context.earliestEvent && this._context.earliestEvent < this._context.initialTimestamp) {\n      this._context.initialTimestamp = this._context.earliestEvent;\n    }\n\n    const _context = {\n      initialTimestamp: this._context.initialTimestamp,\n      initialUrl: this._context.initialUrl,\n      errorIds: Array.from(this._context.errorIds).filter(Boolean),\n      traceIds: Array.from(this._context.traceIds).filter(Boolean),\n      urls: this._context.urls,\n    };\n\n    this._clearContext();\n\n    return _context;\n  }\n\n  /**\n   * Flushes replay event buffer to Sentry.\n   *\n   * Performance events are only added right before flushing - this is\n   * due to the buffered performance observer events.\n   *\n   * Should never be called directly, only by `flush`\n   */\n  private async _runFlush(): Promise<void> {\n    if (!this.session || !this.eventBuffer) {\n      __DEBUG_BUILD__ && logger.error('[Replay] No session or eventBuffer found to flush.');\n      return;\n    }\n\n    await this._addPerformanceEntries();\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer || !this.eventBuffer.hasEvents) {\n      return;\n    }\n\n    // Only attach memory event if eventBuffer is not empty\n    await addMemoryEntry(this);\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer) {\n      return;\n    }\n\n    try {\n      // Note this empties the event buffer regardless of outcome of sending replay\n      const recordingData = await this.eventBuffer.finish();\n\n      // NOTE: Copy values from instance members, as it's possible they could\n      // change before the flush finishes.\n      const replayId = this.session.id;\n      const eventContext = this._popEventContext();\n      // Always increment segmentId regardless of outcome of sending replay\n      const segmentId = this.session.segmentId++;\n      this._maybeSaveSession();\n\n      await sendReplay({\n        replayId,\n        recordingData,\n        segmentId,\n        includeReplayStartTimestamp: segmentId === 0,\n        eventContext,\n        session: this.session,\n        options: this.getOptions(),\n        timestamp: new Date().getTime(),\n      });\n    } catch (err) {\n      this._handleException(err);\n\n      // This means we retried 3 times and all of them failed,\n      // or we ran into a problem we don't want to retry, like rate limiting.\n      // In this case, we want to completely stop the replay - otherwise, we may get inconsistent segments\n      this.stop('sendReplay');\n\n      const client = getCurrentHub().getClient();\n\n      if (client) {\n        client.recordDroppedEvent('send_error', 'replay');\n      }\n    }\n  }\n\n  /**\n   * Flush recording data to Sentry. Creates a lock so that only a single flush\n   * can be active at a time. Do not call this directly.\n   */\n  private _flush: () => Promise<void> = async () => {\n    if (!this._isEnabled) {\n      // This can happen if e.g. the replay was stopped because of exceeding the retry limit\n      return;\n    }\n\n    if (!this.checkAndHandleExpiredSession()) {\n      __DEBUG_BUILD__ && logger.error('[Replay] Attempting to finish replay event after session expired.');\n      return;\n    }\n\n    if (!this.session) {\n      __DEBUG_BUILD__ && logger.error('[Replay] No session found to flush.');\n      return;\n    }\n\n    // A flush is about to happen, cancel any queued flushes\n    this._debouncedFlush.cancel();\n\n    // this._flushLock acts as a lock so that future calls to `_flush()`\n    // will be blocked until this promise resolves\n    if (!this._flushLock) {\n      this._flushLock = this._runFlush();\n      await this._flushLock;\n      this._flushLock = null;\n      return;\n    }\n\n    // Wait for previous flush to finish, then call the debounced `_flush()`.\n    // It's possible there are other flush requests queued and waiting for it\n    // to resolve. We want to reduce all outstanding requests (as well as any\n    // new flush requests that occur within a second of the locked flush\n    // completing) into a single flush.\n\n    try {\n      await this._flushLock;\n    } catch (err) {\n      __DEBUG_BUILD__ && logger.error(err);\n    } finally {\n      this._debouncedFlush();\n    }\n  };\n\n  /** Save the session, if it is sticky */\n  private _maybeSaveSession(): void {\n    if (this.session && this._options.stickySession) {\n      saveSession(this.session);\n    }\n  }\n}\n", "import type { DeprecatedPrivacyOptions, ReplayIntegrationPrivacyOptions } from '../types';\n\ntype GetPrivacyOptions = Required<Omit<ReplayIntegrationPrivacyOptions, 'maskFn'>> &\n  Omit<DeprecatedPrivacyOptions, 'maskInputOptions'>;\ninterface GetPrivacyReturn {\n  maskTextSelector: string;\n  unmaskTextSelector: string;\n  maskInputSelector: string;\n  unmaskInputSelector: string;\n  blockSelector: string;\n  unblockSelector: string;\n  ignoreSelector: string;\n\n  blockClass?: RegExp;\n  maskTextClass?: RegExp;\n}\n\nfunction getOption(\n  selectors: string[],\n  defaultSelectors: string[],\n  deprecatedClassOption?: string | RegExp,\n  deprecatedSelectorOption?: string,\n): string {\n  const deprecatedSelectors = typeof deprecatedSelectorOption === 'string' ? deprecatedSelectorOption.split(',') : [];\n\n  const allSelectors = [\n    ...selectors,\n    // @deprecated\n    ...deprecatedSelectors,\n\n    // sentry defaults\n    ...defaultSelectors,\n  ];\n\n  // @deprecated\n  if (typeof deprecatedClassOption !== 'undefined') {\n    // NOTE: No support for RegExp\n    if (typeof deprecatedClassOption === 'string') {\n      allSelectors.push(`.${deprecatedClassOption}`);\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[Replay] You are using a deprecated configuration item for privacy. Read the documentation on how to use the new privacy configuration.',\n    );\n  }\n\n  return allSelectors.join(',');\n}\n\n/**\n * Returns privacy related configuration for use in rrweb\n */\nexport function getPrivacyOptions({\n  mask,\n  unmask,\n  block,\n  unblock,\n  ignore,\n\n  // eslint-disable-next-line deprecation/deprecation\n  blockClass,\n  // eslint-disable-next-line deprecation/deprecation\n  blockSelector,\n  // eslint-disable-next-line deprecation/deprecation\n  maskTextClass,\n  // eslint-disable-next-line deprecation/deprecation\n  maskTextSelector,\n  // eslint-disable-next-line deprecation/deprecation\n  ignoreClass,\n}: GetPrivacyOptions): GetPrivacyReturn {\n  const defaultBlockedElements = ['base[href=\"/\"]'];\n\n  const maskSelector = getOption(mask, ['.sentry-mask', '[data-sentry-mask]'], maskTextClass, maskTextSelector);\n  const unmaskSelector = getOption(unmask, ['.sentry-unmask', '[data-sentry-unmask]']);\n\n  const options: GetPrivacyReturn = {\n    // We are making the decision to make text and input selectors the same\n    maskTextSelector: maskSelector,\n    unmaskTextSelector: unmaskSelector,\n    maskInputSelector: maskSelector,\n    unmaskInputSelector: unmaskSelector,\n\n    blockSelector: getOption(\n      block,\n      ['.sentry-block', '[data-sentry-block]', ...defaultBlockedElements],\n      blockClass,\n      blockSelector,\n    ),\n    unblockSelector: getOption(unblock, ['.sentry-unblock', '[data-sentry-unblock]']),\n    ignoreSelector: getOption(ignore, ['.sentry-ignore', '[data-sentry-ignore]'], ignoreClass),\n  };\n\n  if (blockClass instanceof RegExp) {\n    options.blockClass = blockClass;\n  }\n\n  if (maskTextClass instanceof RegExp) {\n    options.maskTextClass = maskTextClass;\n  }\n\n  return options;\n}\n", "import { isNodeEnv } from '@sentry/utils';\n\n/**\n * Returns true if we are in the browser.\n */\nexport function isBrowser(): boolean {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof window !== 'undefined' && (!isNodeEnv() || isElectronNodeRenderer());\n}\n\ntype ElectronProcess = { type?: string };\n\n// Electron renderers with nodeIntegration enabled are detected as Node.js so we specifically test for them\nfunction isElectronNodeRenderer(): boolean {\n  return typeof process !== 'undefined' && (process as ElectronProcess).type === 'renderer';\n}\n", "import { getCurrentHub } from '@sentry/core';\nimport type { BrowserClientReplayOptions, Integration } from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\n\nimport { DEFAULT_FLUSH_MAX_DELAY, DEFAULT_FLUSH_MIN_DELAY } from './constants';\nimport { ReplayContainer } from './replay';\nimport type { RecordingOptions, ReplayConfiguration, ReplayPluginOptions } from './types';\nimport { getPrivacyOptions } from './util/getPrivacyOptions';\nimport { isBrowser } from './util/isBrowser';\n\nconst MEDIA_SELECTORS =\n  'img,image,svg,video,object,picture,embed,map,audio,link[rel=\"icon\"],link[rel=\"apple-touch-icon\"]';\n\nlet _initialized = false;\n\ntype InitialReplayPluginOptions = Omit<ReplayPluginOptions, 'sessionSampleRate' | 'errorSampleRate'> &\n  Partial<Pick<ReplayPluginOptions, 'sessionSampleRate' | 'errorSampleRate'>>;\n\n/**\n * The main replay integration class, to be passed to `init({  integrations: [] })`.\n */\nexport class Replay implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Replay';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Replay.id;\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n  private readonly _recordingOptions: RecordingOptions;\n\n  /**\n   * Initial options passed to the replay integration, merged with default values.\n   * Note: `sessionSampleRate` and `errorSampleRate` are not required here, as they\n   * can only be finally set when setupOnce() is called.\n   *\n   * @private\n   */\n  private readonly _initialOptions: InitialReplayPluginOptions;\n\n  private _replay?: ReplayContainer;\n\n  public constructor({\n    flushMinDelay = DEFAULT_FLUSH_MIN_DELAY,\n    flushMaxDelay = DEFAULT_FLUSH_MAX_DELAY,\n    stickySession = true,\n    useCompression = true,\n    _experiments = {},\n    sessionSampleRate,\n    errorSampleRate,\n    maskAllText = true,\n    maskAllInputs = true,\n    blockAllMedia = true,\n\n    mask = [],\n    unmask = [],\n    block = [],\n    unblock = [],\n    ignore = [],\n    maskFn,\n\n    // eslint-disable-next-line deprecation/deprecation\n    blockClass,\n    // eslint-disable-next-line deprecation/deprecation\n    blockSelector,\n    // eslint-disable-next-line deprecation/deprecation\n    maskInputOptions,\n    // eslint-disable-next-line deprecation/deprecation\n    maskTextClass,\n    // eslint-disable-next-line deprecation/deprecation\n    maskTextSelector,\n    // eslint-disable-next-line deprecation/deprecation\n    ignoreClass,\n  }: ReplayConfiguration = {}) {\n    this._recordingOptions = {\n      maskAllInputs,\n      maskAllText,\n      maskInputOptions: { ...(maskInputOptions || {}), password: true },\n      maskTextFn: maskFn,\n      maskInputFn: maskFn,\n\n      ...getPrivacyOptions({\n        mask,\n        unmask,\n        block,\n        unblock,\n        ignore,\n        blockClass,\n        blockSelector,\n        maskTextClass,\n        maskTextSelector,\n        ignoreClass,\n      }),\n\n      // Our defaults\n      slimDOMOptions: 'all',\n      inlineStylesheet: true,\n      // Disable inline images as it will increase segment/replay size\n      inlineImages: false,\n      // collect fonts, but be aware that `sentry.io` needs to be an allowed\n      // origin for playback\n      collectFonts: true,\n    };\n\n    this._initialOptions = {\n      flushMinDelay,\n      flushMaxDelay,\n      stickySession,\n      sessionSampleRate,\n      errorSampleRate,\n      useCompression,\n      blockAllMedia,\n      _experiments,\n    };\n\n    if (typeof sessionSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(\n        `[Replay] You are passing \\`sessionSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysSessionSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysSessionSampleRate: ${sessionSampleRate} })`,\n      );\n\n      this._initialOptions.sessionSampleRate = sessionSampleRate;\n    }\n\n    if (typeof errorSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(\n        `[Replay] You are passing \\`errorSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysOnErrorSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysOnErrorSampleRate: ${errorSampleRate} })`,\n      );\n\n      this._initialOptions.errorSampleRate = errorSampleRate;\n    }\n\n    if (this._initialOptions.blockAllMedia) {\n      // `blockAllMedia` is a more user friendly option to configure blocking\n      // embedded media elements\n      this._recordingOptions.blockSelector = !this._recordingOptions.blockSelector\n        ? MEDIA_SELECTORS\n        : `${this._recordingOptions.blockSelector},${MEDIA_SELECTORS}`;\n    }\n\n    if (this._isInitialized && isBrowser()) {\n      throw new Error('Multiple Sentry Session Replay instances are not supported');\n    }\n\n    this._isInitialized = true;\n  }\n\n  /** If replay has already been initialized */\n  protected get _isInitialized(): boolean {\n    return _initialized;\n  }\n\n  /** Update _isInitialized */\n  protected set _isInitialized(value: boolean) {\n    _initialized = value;\n  }\n\n  /**\n   * We previously used to create a transaction in `setupOnce` and it would\n   * potentially create a transaction before some native SDK integrations have run\n   * and applied their own global event processor. An example is:\n   * https://github.com/getsentry/sentry-javascript/blob/b47ceafbdac7f8b99093ce6023726ad4687edc48/packages/browser/src/integrations/useragent.ts\n   *\n   * So we call `replay.setup` in next event loop as a workaround to wait for other\n   * global event processors to finish. This is no longer needed, but keeping it\n   * here to avoid any future issues.\n   */\n  public setupOnce(): void {\n    if (!isBrowser()) {\n      return;\n    }\n\n    this._setup();\n\n    // XXX: See method comments above\n    setTimeout(() => this.start());\n  }\n\n  /**\n   * Initializes the plugin.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * PerformanceObserver, Recording, Sentry SDK, etc)\n   */\n  public start(): void {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.start();\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n  public stop(): void {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.stop();\n  }\n\n  /**\n   * Immediately send all pending events.\n   */\n  public flush(): Promise<void> | void {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return;\n    }\n\n    return this._replay.flushImmediate();\n  }\n\n  /** Setup the integration. */\n  private _setup(): void {\n    // Client is not available in constructor, so we need to wait until setupOnce\n    const finalOptions = loadReplayOptionsFromClient(this._initialOptions);\n\n    this._replay = new ReplayContainer({\n      options: finalOptions,\n      recordingOptions: this._recordingOptions,\n    });\n  }\n}\n\n/** Parse Replay-related options from SDK options */\nfunction loadReplayOptionsFromClient(initialOptions: InitialReplayPluginOptions): ReplayPluginOptions {\n  const client = getCurrentHub().getClient();\n  const opt = client && (client.getOptions() as BrowserClientReplayOptions);\n\n  const finalOptions = { sessionSampleRate: 0, errorSampleRate: 0, ...dropUndefinedKeys(initialOptions) };\n\n  if (!opt) {\n    // eslint-disable-next-line no-console\n    console.warn('SDK client is not available.');\n    return finalOptions;\n  }\n\n  if (\n    initialOptions.sessionSampleRate == null && // TODO remove once deprecated rates are removed\n    initialOptions.errorSampleRate == null && // TODO remove once deprecated rates are removed\n    opt.replaysSessionSampleRate == null &&\n    opt.replaysOnErrorSampleRate == null\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set.',\n    );\n  }\n\n  if (typeof opt.replaysSessionSampleRate === 'number') {\n    finalOptions.sessionSampleRate = opt.replaysSessionSampleRate;\n  }\n\n  if (typeof opt.replaysOnErrorSampleRate === 'number') {\n    finalOptions.errorSampleRate = opt.replaysOnErrorSampleRate;\n  }\n\n  return finalOptions;\n}\n", "import type { OfflineStore, OfflineTransportOptions } from '@sentry/core';\nimport { makeOfflineTransport } from '@sentry/core';\nimport type { Envelope, InternalBaseTransportOptions, Transport } from '@sentry/types';\nimport type { TextDecoderInternal } from '@sentry/utils';\nimport { parseEnvelope, serializeEnvelope } from '@sentry/utils';\n\n// 'Store', 'promisifyRequest' and 'createStore' were originally copied from the 'idb-keyval' package before being\n// modified and simplified: https://github.com/jakearchibald/idb-keyval\n//\n// At commit: 0420a704fd6cbb4225429c536b1f61112d012fca\n// Original licence:\n\n// Copyright 2016, Jake Archibald\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntype Store = <T>(callback: (store: IDBObjectStore) => T | PromiseLike<T>) => Promise<T>;\n\nfunction promisifyRequest<T = undefined>(request: IDBRequest<T> | IDBTransaction): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    // @ts-ignore - file size hacks\n    request.oncomplete = request.onsuccess = () => resolve(request.result);\n    // @ts-ignore - file size hacks\n    request.onabort = request.onerror = () => reject(request.error);\n  });\n}\n\n/** Create or open an IndexedDb store */\nexport function createStore(dbName: string, storeName: string): Store {\n  const request = indexedDB.open(dbName);\n  request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n  const dbp = promisifyRequest(request);\n\n  return callback => dbp.then(db => callback(db.transaction(storeName, 'readwrite').objectStore(storeName)));\n}\n\nfunction keys(store: IDBObjectStore): Promise<number[]> {\n  return promisifyRequest(store.getAllKeys() as IDBRequest<number[]>);\n}\n\n/** Insert into the store */\nexport function insert(store: Store, value: Uint8Array | string, maxQueueSize: number): Promise<void> {\n  return store(store => {\n    return keys(store).then(keys => {\n      if (keys.length >= maxQueueSize) {\n        return;\n      }\n\n      // We insert with an incremented key so that the entries are popped in order\n      store.put(value, Math.max(...keys, 0) + 1);\n      return promisifyRequest(store.transaction);\n    });\n  });\n}\n\n/** Pop the oldest value from the store */\nexport function pop(store: Store): Promise<Uint8Array | string | undefined> {\n  return store(store => {\n    return keys(store).then(keys => {\n      if (keys.length === 0) {\n        return undefined;\n      }\n\n      return promisifyRequest(store.get(keys[0])).then(value => {\n        store.delete(keys[0]);\n        return promisifyRequest(store.transaction).then(() => value);\n      });\n    });\n  });\n}\n\ninterface BrowserOfflineTransportOptions extends OfflineTransportOptions {\n  /**\n   * Name of indexedDb database to store envelopes in\n   * Default: 'sentry-offline'\n   */\n  dbName?: string;\n  /**\n   * Name of indexedDb object store to store envelopes in\n   * Default: 'queue'\n   */\n  storeName?: string;\n  /**\n   * Maximum number of envelopes to store\n   * Default: 30\n   */\n  maxQueueSize?: number;\n  /**\n   * Only required for testing on node.js\n   * @ignore\n   */\n  textDecoder?: TextDecoderInternal;\n}\n\nfunction createIndexedDbStore(options: BrowserOfflineTransportOptions): OfflineStore {\n  let store: Store | undefined;\n\n  // Lazily create the store only when it's needed\n  function getStore(): Store {\n    if (store == undefined) {\n      store = createStore(options.dbName || 'sentry-offline', options.storeName || 'queue');\n    }\n\n    return store;\n  }\n\n  return {\n    insert: async (env: Envelope) => {\n      try {\n        const serialized = await serializeEnvelope(env, options.textEncoder);\n        await insert(getStore(), serialized, options.maxQueueSize || 30);\n      } catch (_) {\n        //\n      }\n    },\n    pop: async () => {\n      try {\n        const deserialized = await pop(getStore());\n        if (deserialized) {\n          return parseEnvelope(\n            deserialized,\n            options.textEncoder || new TextEncoder(),\n            options.textDecoder || new TextDecoder(),\n          );\n        }\n      } catch (_) {\n        //\n      }\n\n      return undefined;\n    },\n  };\n}\n\nfunction makeIndexedDbOfflineTransport<T>(\n  createTransport: (options: T) => Transport,\n): (options: T & BrowserOfflineTransportOptions) => Transport {\n  return options => createTransport({ ...options, createStore: createIndexedDbStore });\n}\n\n/**\n * Creates a transport that uses IndexedDb to store events when offline.\n */\nexport function makeBrowserOfflineTransport<T extends InternalBaseTransportOptions>(\n  createTransport: (options: T) => Transport,\n): (options: T & BrowserOfflineTransportOptions) => Transport {\n  return makeIndexedDbOfflineTransport<T>(makeOfflineTransport(createTransport));\n}\n", "export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\n\nimport { WINDOW } from './helpers';\nimport * as BrowserIntegrations from './integrations';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nif (WINDOW.Sentry && WINDOW.Sentry.Integrations) {\n  windowIntegrations = WINDOW.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations };\n\n// DO NOT DELETE THESE COMMENTS!\n// We want to exclude Replay/Offline from CDN bundles, so we remove the block below with our\n// makeExcludeBlockPlugin Rollup plugin when generating bundles. Everything between\n// ROLLUP_EXCLUDE_*_FROM_BUNDLES_BEGIN and _END__ is removed for bundles.\n\n// __ROLLUP_EXCLUDE_REPLAY_FROM_BUNDLES_BEGIN__\nexport { Replay } from '@sentry/replay';\n// __ROLLUP_EXCLUDE_REPLAY_FROM_BUNDLES_END__\n\n// __ROLLUP_EXCLUDE_OFFLINE_FROM_BUNDLES_BEGIN__\nexport { makeBrowserOfflineTransport } from './transports/offline';\n// __ROLLUP_EXCLUDE_OFFLINE_FROM_BUNDLES_END__\n"],
  "mappings": "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",
  "names": ["e", "e", "e", "e", "document", "e", "e", "e", "e", "addGlobalEventProcessor", "getCurrentHub", "CoreIntegrations", "wrap", "internalWrap", "integrations_exports", "WINDOW", "NodeType", "chars", "EventType", "IncrementalSource", "MouseInteractions", "CanvasContext", "MediaInteractions", "ReplayerEvents", "mirror", "r", "e", "init", "getWorkerURL", "isExpired", "flush", "err", "store", "keys", "createTransport", "CoreIntegrations", "BrowserIntegrations"]
}
